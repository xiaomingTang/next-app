diff --git a/core/AccumulativeShadows.d.ts b/core/AccumulativeShadows.d.ts
index dc6e0a491229f328fb6176843e8ad5ac633aab03..c39ecaa58fcc9debffe9c858cb9e2f34220c8ee2 100644
--- a/core/AccumulativeShadows.d.ts
+++ b/core/AccumulativeShadows.d.ts
@@ -36,13 +36,13 @@ type SoftShadowMaterialProps = {
 };
 declare global {
     namespace JSX {
-        interface IntrinsicElements {
-            softShadowMaterial: JSX.IntrinsicElements['shaderMaterial'] & SoftShadowMaterialProps;
+        interface JSX_IntrinsicElements {
+            softShadowMaterial: JSX_JSX_IntrinsicElements['shaderMaterial'] & SoftShadowMaterialProps;
         }
     }
 }
 export declare const accumulativeContext: React.Context<AccumulativeContext>;
-export declare const AccumulativeShadows: ForwardRefComponent<JSX.IntrinsicElements['group'] & AccumulativeShadowsProps, AccumulativeContext>;
+export declare const AccumulativeShadows: ForwardRefComponent<JSX_JSX_IntrinsicElements['group'] & AccumulativeShadowsProps, AccumulativeContext>;
 export type RandomizedLightProps = {
     frames?: number;
     position?: [x: number, y: number, z: number];
@@ -57,5 +57,5 @@ export type RandomizedLightProps = {
     near?: number;
     far?: number;
 };
-export declare const RandomizedLight: ForwardRefComponent<JSX.IntrinsicElements['group'] & RandomizedLightProps, AccumulativeLightContext>;
+export declare const RandomizedLight: ForwardRefComponent<JSX_JSX_IntrinsicElements['group'] & RandomizedLightProps, AccumulativeLightContext>;
 export {};
diff --git a/core/Backdrop.d.ts b/core/Backdrop.d.ts
index f1da2d2a5c2b644f6082474632101b881afd54e8..76ed6762c1dfe4770f0c7c65927541066dd081fc 100644
--- a/core/Backdrop.d.ts
+++ b/core/Backdrop.d.ts
@@ -1,5 +1,5 @@
 import * as React from 'react';
-export type BackdropProps = JSX.IntrinsicElements['group'] & {
+export type BackdropProps = JSX_JSX_IntrinsicElements['group'] & {
     floor?: number;
     segments?: number;
     receiveShadow?: boolean;
diff --git a/core/Billboard.d.ts b/core/Billboard.d.ts
index a27cddbc7233a3eafdfab4ca31ded5823f0aff02..b20d5f76d112715d571cf602cdfc41c480174f6a 100644
--- a/core/Billboard.d.ts
+++ b/core/Billboard.d.ts
@@ -5,5 +5,5 @@ export type BillboardProps = {
     lockX?: boolean;
     lockY?: boolean;
     lockZ?: boolean;
-} & JSX.IntrinsicElements['group'];
+} & JSX_JSX_IntrinsicElements['group'];
 export declare const Billboard: ForwardRefComponent<BillboardProps, Group>;
diff --git a/core/Bounds.d.ts b/core/Bounds.d.ts
index ec12162b0341942187b8dd142ef12523f70cb448..b3bbbfb4683f1a9507bd867d48ff5b894e907d05 100644
--- a/core/Bounds.d.ts
+++ b/core/Bounds.d.ts
@@ -22,7 +22,7 @@ export type BoundsApi = {
     fit(): BoundsApi;
     clip(): BoundsApi;
 };
-export type BoundsProps = JSX.IntrinsicElements['group'] & {
+export type BoundsProps = JSX_JSX_IntrinsicElements['group'] & {
     maxDuration?: number;
     margin?: number;
     observe?: boolean;
diff --git a/core/Bvh.d.ts b/core/Bvh.d.ts
index 0c526be7ab1fcf750864d5ed36271c5baeb4569c..ca2522d0b5ce2ea496e092f6757af593bcd789a9 100644
--- a/core/Bvh.d.ts
+++ b/core/Bvh.d.ts
@@ -10,7 +10,7 @@ export interface BVHOptions {
     maxLeafTris?: number;
     indirect?: boolean;
 }
-export type BvhProps = BVHOptions & JSX.IntrinsicElements['group'] & {
+export type BvhProps = BVHOptions & JSX_JSX_IntrinsicElements['group'] & {
     enabled?: boolean;
     firstHitOnly?: boolean;
 };
diff --git a/core/Caustics.d.ts b/core/Caustics.d.ts
index 1ca24e0e7c04b7f0b8f6081f6ee8e5586775e8dd..4ce95f894ec35a361d3e74d0e51a7c57ad6335f6 100644
--- a/core/Caustics.d.ts
+++ b/core/Caustics.d.ts
@@ -2,7 +2,7 @@ import * as THREE from 'three';
 import * as React from 'react';
 import { ReactThreeFiber } from '@react-three/fiber';
 import { ForwardRefComponent } from '../helpers/ts-utils';
-type CausticsProps = JSX.IntrinsicElements['group'] & {
+type CausticsProps = JSX_JSX_IntrinsicElements['group'] & {
     frames?: number;
     debug?: boolean;
     causticsOnly: boolean;
@@ -17,7 +17,7 @@ type CausticsProps = JSX.IntrinsicElements['group'] & {
 };
 declare global {
     namespace JSX {
-        interface IntrinsicElements {
+        interface JSX_IntrinsicElements {
             causticsProjectionMaterial: ReactThreeFiber.MeshNormalMaterialProps & {
                 viewMatrix?: {
                     value: THREE.Matrix4;
diff --git a/core/Center.d.ts b/core/Center.d.ts
index e00a1efc9028c4b13c0e6106232862f8b4ce653d..45b8dd6de2b2de137f18d042709310274c3b1203 100644
--- a/core/Center.d.ts
+++ b/core/Center.d.ts
@@ -28,4 +28,4 @@ export type CenterProps = {
     onCentered?: (props: OnCenterCallbackProps) => void;
     cacheKey?: any;
 };
-export declare const Center: ForwardRefComponent<JSX.IntrinsicElements['group'] & CenterProps, Group>;
+export declare const Center: ForwardRefComponent<JSX_JSX_IntrinsicElements['group'] & CenterProps, Group>;
diff --git a/core/Clone.d.ts b/core/Clone.d.ts
index cf95554052a40dbf815610bcdcb24a66e56b7176..739a9fdb23d46bb62266ccc7a772931700a21a8a 100644
--- a/core/Clone.d.ts
+++ b/core/Clone.d.ts
@@ -12,4 +12,4 @@ export type CloneProps = {
     receiveShadow?: boolean;
     isChild?: boolean;
 };
-export declare const Clone: ForwardRefComponent<Omit<JSX.IntrinsicElements['group'], 'children'> & CloneProps, THREE.Group>;
+export declare const Clone: ForwardRefComponent<Omit<JSX_JSX_IntrinsicElements['group'], 'children'> & CloneProps, THREE.Group>;
diff --git a/core/Cloud.d.ts b/core/Cloud.d.ts
index ac5335eb742d2a69875ca72fd3db072c50618cb7..1df8a9cf79069a40e1b067bb6beb830f9e30cf34 100644
--- a/core/Cloud.d.ts
+++ b/core/Cloud.d.ts
@@ -3,7 +3,7 @@ import { Color, Group, Vector3, Material, MeshLambertMaterial, Matrix4 } from 't
 import { MaterialNode, ReactThreeFiber } from '@react-three/fiber';
 declare global {
     namespace JSX {
-        interface IntrinsicElements {
+        interface JSX_IntrinsicElements {
             cloudMaterial: MaterialNode<MeshLambertMaterial, typeof MeshLambertMaterial>;
         }
     }
@@ -28,14 +28,14 @@ type CloudState = {
     rotationFactor: number;
     color: Color;
 };
-type CloudsProps = JSX.IntrinsicElements['group'] & {
+type CloudsProps = JSX_JSX_IntrinsicElements['group'] & {
     texture?: string;
     limit?: number;
     range?: number;
     material?: typeof Material;
     frustumCulled?: boolean;
 };
-type CloudProps = JSX.IntrinsicElements['group'] & {
+type CloudProps = JSX_JSX_IntrinsicElements['group'] & {
     seed?: number;
     segments?: number;
     bounds?: ReactThreeFiber.Vector3;
diff --git a/core/ContactShadows.d.ts b/core/ContactShadows.d.ts
index 7574dafa6b25adeabfc1f49e49c5ef3dce3a85f3..3b6839dbd6d1db2adeeed9bc81f5711a7e688e1f 100644
--- a/core/ContactShadows.d.ts
+++ b/core/ContactShadows.d.ts
@@ -14,4 +14,4 @@ export type ContactShadowsProps = {
     color?: THREE.ColorRepresentation;
     depthWrite?: boolean;
 };
-export declare const ContactShadows: ForwardRefComponent<Omit<JSX.IntrinsicElements['group'], 'scale'> & ContactShadowsProps, THREE.Group>;
+export declare const ContactShadows: ForwardRefComponent<Omit<JSX_JSX_IntrinsicElements['group'], 'scale'> & ContactShadowsProps, THREE.Group>;
diff --git a/core/CubeCamera.d.ts b/core/CubeCamera.d.ts
index b202d7cd8639931c77d8b6101be1eb1bbf74b497..dc3a9bbfe57e85df50af9ecbc039a5558d9ec35f 100644
--- a/core/CubeCamera.d.ts
+++ b/core/CubeCamera.d.ts
@@ -13,7 +13,7 @@ export declare function useCubeCamera({ resolution, near, far, envMap, fog }?: C
     camera: THREE.CubeCamera;
     update: () => void;
 };
-type Props = Omit<JSX.IntrinsicElements['group'], 'children'> & {
+type Props = Omit<JSX_JSX_IntrinsicElements['group'], 'children'> & {
     children?: (tex: Texture) => React.ReactNode;
     frames?: number;
 } & CubeCameraOptions;
diff --git a/core/CurveModifier.d.ts b/core/CurveModifier.d.ts
index 00fb70c7ac1bb483c451f8c781445d7c231e82cb..bb8fd412daa92f214c5702c732d9bc24986fc435 100644
--- a/core/CurveModifier.d.ts
+++ b/core/CurveModifier.d.ts
@@ -3,7 +3,7 @@ import * as THREE from 'three';
 import { Flow } from 'three-stdlib';
 import { ForwardRefComponent } from '../helpers/ts-utils';
 export interface CurveModifierProps {
-    children: React.ReactElement<JSX.IntrinsicElements['mesh']>;
+    children: React.ReactElement<JSX_JSX_IntrinsicElements['mesh']>;
     curve?: THREE.Curve<THREE.Vector3>;
 }
 export type CurveModifierRef = Pick<Flow, 'moveAlongCurve'>;
diff --git a/core/Decal.d.ts b/core/Decal.d.ts
index 7e6e8b1ca4a19ad8470cabfaa9ce98232114d7bc..1bd599834af414bbc2f014b06d081b3478940318 100644
--- a/core/Decal.d.ts
+++ b/core/Decal.d.ts
@@ -2,7 +2,7 @@ import * as React from 'react';
 import * as THREE from 'three';
 import * as FIBER from '@react-three/fiber';
 import { ForwardRefComponent } from '../helpers/ts-utils';
-export type DecalProps = Omit<JSX.IntrinsicElements['mesh'], 'children'> & {
+export type DecalProps = Omit<JSX_JSX_IntrinsicElements['mesh'], 'children'> & {
     debug?: boolean;
     mesh?: React.MutableRefObject<THREE.Mesh>;
     position?: FIBER.Vector3;
diff --git a/core/Detailed.d.ts b/core/Detailed.d.ts
index db4b378efac6297814657244a804762898d0f909..8f17d5b6ba108f9530af97f563b43fb14acbde3e 100644
--- a/core/Detailed.d.ts
+++ b/core/Detailed.d.ts
@@ -1,7 +1,7 @@
 import * as React from 'react';
 import { LOD, Object3D } from 'three';
 import { ForwardRefComponent } from '../helpers/ts-utils';
-type Props = JSX.IntrinsicElements['lOD'] & {
+type Props = JSX_JSX_IntrinsicElements['lOD'] & {
     children: React.ReactElement<Object3D>[];
     hysteresis?: number;
     distances: number[];
diff --git a/core/Effects.d.ts b/core/Effects.d.ts
index 573fb243463a19c5335125800032a926068b9ed9..58f7c89da5913dd55306466fae3172b332eb4c66 100644
--- a/core/Effects.d.ts
+++ b/core/Effects.d.ts
@@ -17,7 +17,7 @@ type Props = ReactThreeFiber.Node<EffectComposer, typeof EffectComposer> & {
 };
 declare global {
     namespace JSX {
-        interface IntrinsicElements {
+        interface JSX_IntrinsicElements {
             effectComposer: ReactThreeFiber.Node<EffectComposer, typeof EffectComposer>;
             renderPass: ReactThreeFiber.Node<RenderPass, typeof RenderPass>;
             shaderPass: ReactThreeFiber.Node<ShaderPass, typeof ShaderPass>;
diff --git a/core/Environment.d.ts b/core/Environment.d.ts
index e590f1cbb3ed5fb029636b42160807b337753162..e24aa901a0ee25820be57eb7541cd6972147f523 100644
--- a/core/Environment.d.ts
+++ b/core/Environment.d.ts
@@ -31,7 +31,7 @@ export declare function EnvironmentCube({ background, scene, blur, backgroundBlu
 export declare function EnvironmentPortal({ children, near, far, resolution, frames, map, background, blur, backgroundBlurriness, backgroundIntensity, backgroundRotation, environmentIntensity, environmentRotation, scene, files, path, preset, extensions, }: EnvironmentProps): React.JSX.Element;
 declare global {
     namespace JSX {
-        interface IntrinsicElements {
+        interface JSX_IntrinsicElements {
             groundProjectedEnvImpl: Object3DNode<GroundProjectedEnvImpl, typeof GroundProjectedEnvImpl>;
         }
     }
diff --git a/core/Fisheye.d.ts b/core/Fisheye.d.ts
index 9f491ede8d59f0465a21d658f57d661aa0ffb21f..bf99e70b88ce43c72ff5c3ab1448725d6a016a7a 100644
--- a/core/Fisheye.d.ts
+++ b/core/Fisheye.d.ts
@@ -1,5 +1,5 @@
 import * as React from 'react';
-export type FisheyeProps = JSX.IntrinsicElements['mesh'] & {
+export type FisheyeProps = JSX_JSX_IntrinsicElements['mesh'] & {
     zoom?: number;
     segments?: number;
     resolution?: number;
diff --git a/core/Float.d.ts b/core/Float.d.ts
index 5913f9f3ae2b3c7a1bf5072e0d40b492f20528ec..7258cd17fe582d37d62e9b467379fd9a35380d8f 100644
--- a/core/Float.d.ts
+++ b/core/Float.d.ts
@@ -1,7 +1,7 @@
 import * as React from 'react';
 import * as THREE from 'three';
 import { ForwardRefComponent } from '../helpers/ts-utils';
-export type FloatProps = JSX.IntrinsicElements['group'] & {
+export type FloatProps = JSX_JSX_IntrinsicElements['group'] & {
     enabled?: boolean;
     speed?: number;
     rotationIntensity?: number;
diff --git a/core/GizmoHelper.d.ts b/core/GizmoHelper.d.ts
index 4d416374a24030fcf6dcc1848b7a2f1ca253e2b5..04618ee4a6b6ba1c452f274c0776e78a291f575c 100644
--- a/core/GizmoHelper.d.ts
+++ b/core/GizmoHelper.d.ts
@@ -3,7 +3,7 @@ type GizmoHelperContext = {
     tweenCamera: (direction: Vector3) => void;
 };
 export declare const useGizmoContext: () => GizmoHelperContext;
-export type GizmoHelperProps = JSX.IntrinsicElements['group'] & {
+export type GizmoHelperProps = JSX_JSX_IntrinsicElements['group'] & {
     alignment?: 'top-left' | 'top-right' | 'bottom-right' | 'bottom-left' | 'bottom-center' | 'center-right' | 'center-left' | 'center-center' | 'top-center';
     margin?: [number, number];
     renderPriority?: number;
diff --git a/core/GizmoViewport.d.ts b/core/GizmoViewport.d.ts
index b2822a491074914ca99d921d1d261410d4adce7b..477cc0d991bbf68e6f5747a8abd95b51f14de397 100644
--- a/core/GizmoViewport.d.ts
+++ b/core/GizmoViewport.d.ts
@@ -1,6 +1,6 @@
 import * as React from 'react';
 import { ThreeEvent } from '@react-three/fiber';
-type GizmoViewportProps = JSX.IntrinsicElements['group'] & {
+type GizmoViewportProps = JSX_JSX_IntrinsicElements['group'] & {
     axisColors?: [string, string, string];
     axisScale?: [number, number, number];
     labels?: [string, string, string];
diff --git a/core/GradientTexture.d.ts b/core/GradientTexture.d.ts
index 6054899f6ef6b9b75c56ba5f663b10a48d4d7eb2..53d1d2a4e75c4f988b1581aaa0974731bb1d7a7f 100644
--- a/core/GradientTexture.d.ts
+++ b/core/GradientTexture.d.ts
@@ -13,6 +13,6 @@ type Props = {
     type?: GradientType;
     innerCircleRadius?: number;
     outerCircleRadius?: string | number;
-} & JSX.IntrinsicElements['texture'];
+} & JSX_JSX_IntrinsicElements['texture'];
 export declare function GradientTexture({ stops, colors, size, width, type, innerCircleRadius, outerCircleRadius, ...props }: Props): React.JSX.Element;
 export {};
diff --git a/core/Grid.d.ts b/core/Grid.d.ts
index 88c1a3a272afffd2bdfd4e0dbb2b64e2de48a124..27e65501a74cf959d83ea108a7be6f78fc271689 100644
--- a/core/Grid.d.ts
+++ b/core/Grid.d.ts
@@ -19,9 +19,9 @@ export type GridProps = GridMaterialType & {
 };
 declare global {
     namespace JSX {
-        interface IntrinsicElements {
-            gridMaterial: JSX.IntrinsicElements['shaderMaterial'] & GridMaterialType;
+        interface JSX_IntrinsicElements {
+            gridMaterial: JSX_JSX_IntrinsicElements['shaderMaterial'] & GridMaterialType;
         }
     }
 }
-export declare const Grid: ForwardRefComponent<Omit<JSX.IntrinsicElements['mesh'], 'args'> & GridProps, THREE.Mesh>;
+export declare const Grid: ForwardRefComponent<Omit<JSX_JSX_IntrinsicElements['mesh'], 'args'> & GridProps, THREE.Mesh>;
diff --git a/core/Image.d.ts b/core/Image.d.ts
index 07e3b1ff4a369dbd26531fdb290144fd79609efa..7e4494318f46c6e36a38d49b43423707538299f2 100644
--- a/core/Image.d.ts
+++ b/core/Image.d.ts
@@ -1,7 +1,7 @@
 import * as THREE from 'three';
 import { Color } from '@react-three/fiber';
 import { ForwardRefComponent } from '../helpers/ts-utils';
-export type ImageProps = Omit<JSX.IntrinsicElements['mesh'], 'scale'> & {
+export type ImageProps = Omit<JSX_JSX_IntrinsicElements['mesh'], 'scale'> & {
     segments?: number;
     scale?: number | [number, number];
     color?: Color;
@@ -19,7 +19,7 @@ export type ImageProps = Omit<JSX.IntrinsicElements['mesh'], 'scale'> & {
     texture?: never;
     url: string;
 });
-type ImageMaterialType = JSX.IntrinsicElements['shaderMaterial'] & {
+type ImageMaterialType = JSX_JSX_IntrinsicElements['shaderMaterial'] & {
     scale?: number[];
     imageBounds?: number[];
     radius?: number;
@@ -31,7 +31,7 @@ type ImageMaterialType = JSX.IntrinsicElements['shaderMaterial'] & {
 };
 declare global {
     namespace JSX {
-        interface IntrinsicElements {
+        interface JSX_IntrinsicElements {
             imageMaterial: ImageMaterialType;
         }
     }
diff --git a/core/Instances.d.ts b/core/Instances.d.ts
index df6ed132328fbc3d3dec710fef20ee17e2286e71..0d6a4ca5fe137fca059abc1a5c0ea8ba4cb8f091 100644
--- a/core/Instances.d.ts
+++ b/core/Instances.d.ts
@@ -4,7 +4,7 @@ import { ReactThreeFiber } from '@react-three/fiber';
 import { ForwardRefComponent } from '../helpers/ts-utils';
 declare global {
     namespace JSX {
-        interface IntrinsicElements {
+        interface JSX_IntrinsicElements {
             positionMesh: ReactThreeFiber.Object3DNode<PositionMesh, typeof PositionMesh>;
         }
     }
@@ -13,16 +13,16 @@ type Api = {
     getParent: () => React.MutableRefObject<InstancedMesh>;
     subscribe: <T>(ref: React.MutableRefObject<T>) => void;
 };
-export type InstancesProps = JSX.IntrinsicElements['instancedMesh'] & {
+export type InstancesProps = JSX_JSX_IntrinsicElements['instancedMesh'] & {
     context?: React.Context<Api>;
     range?: number;
     limit?: number;
     frames?: number;
 };
-export type InstanceProps = JSX.IntrinsicElements['positionMesh'] & {
+export type InstanceProps = JSX_JSX_IntrinsicElements['positionMesh'] & {
     context?: React.Context<Api>;
 };
-export type InstancedAttributeProps = JSX.IntrinsicElements['instancedBufferAttribute'] & {
+export type InstancedAttributeProps = JSX_JSX_IntrinsicElements['instancedBufferAttribute'] & {
     name: string;
     defaultValue: any;
     normalized?: boolean;
@@ -35,7 +35,7 @@ type InstancedMesh = Omit<THREE.InstancedMesh, 'instanceMatrix' | 'instanceColor
 export declare class PositionMesh extends THREE.Group {
     color: THREE.Color;
     instance: React.MutableRefObject<THREE.InstancedMesh | undefined>;
-    instanceKey: React.MutableRefObject<JSX.IntrinsicElements['positionMesh'] | undefined>;
+    instanceKey: React.MutableRefObject<JSX_JSX_IntrinsicElements['positionMesh'] | undefined>;
     constructor();
     get geometry(): THREE.BufferGeometry | undefined;
     raycast(raycaster: THREE.Raycaster, intersects: THREE.Intersection[]): void;
diff --git a/core/Lightformer.d.ts b/core/Lightformer.d.ts
index 94b94f555965b057b40903b45c2afc412c88c030..0f11c56cc3e4d6512ea20edb18d2cf8b79fdfd68 100644
--- a/core/Lightformer.d.ts
+++ b/core/Lightformer.d.ts
@@ -1,7 +1,7 @@
 import { ReactThreeFiber } from '@react-three/fiber';
 import * as THREE from 'three';
 import { ForwardRefComponent } from '../helpers/ts-utils';
-export type LightProps = JSX.IntrinsicElements['mesh'] & {
+export type LightProps = JSX_JSX_IntrinsicElements['mesh'] & {
     args?: any[];
     map?: THREE.Texture;
     toneMapped?: boolean;
diff --git a/core/MarchingCubes.d.ts b/core/MarchingCubes.d.ts
index 99b771deef99520eabd7945eb04933b69fe2b260..b68b04d47bebbca7f754d7371730cac18017b263 100644
--- a/core/MarchingCubes.d.ts
+++ b/core/MarchingCubes.d.ts
@@ -7,18 +7,18 @@ export type MarchingCubesProps = {
     maxPolyCount?: number;
     enableUvs?: boolean;
     enableColors?: boolean;
-} & JSX.IntrinsicElements['group'];
+} & JSX_JSX_IntrinsicElements['group'];
 export declare const MarchingCubes: ForwardRefComponent<MarchingCubesProps, MarchingCubesImpl>;
 type MarchingCubeProps = {
     strength?: number;
     subtract?: number;
     color?: Color;
-} & JSX.IntrinsicElements['group'];
+} & JSX_JSX_IntrinsicElements['group'];
 export declare const MarchingCube: ForwardRefComponent<MarchingCubeProps, THREE.Group>;
 type MarchingPlaneProps = {
     planeType?: 'x' | 'y' | 'z';
     strength?: number;
     subtract?: number;
-} & JSX.IntrinsicElements['group'];
+} & JSX_JSX_IntrinsicElements['group'];
 export declare const MarchingPlane: ForwardRefComponent<MarchingPlaneProps, THREE.Group>;
 export {};
diff --git a/core/Mask.d.ts b/core/Mask.d.ts
index fe2c522da4b14ba26db0004c1de395f107102370..44c55fc32f9c81c5d1b61e99f3ca84c8e257009e 100644
--- a/core/Mask.d.ts
+++ b/core/Mask.d.ts
@@ -1,6 +1,6 @@
 import * as THREE from 'three';
 import { ForwardRefComponent } from '../helpers/ts-utils';
-type Props = Omit<JSX.IntrinsicElements['mesh'], 'id'> & {
+type Props = Omit<JSX_JSX_IntrinsicElements['mesh'], 'id'> & {
     id: number;
     colorWrite?: boolean;
     depthWrite?: boolean;
diff --git a/core/MeshDiscardMaterial.d.ts b/core/MeshDiscardMaterial.d.ts
index 11bb69fec911c3acea5200a76d0317c358dece2d..24b0346b71836e3b780c5ce2668ad1db671809d3 100644
--- a/core/MeshDiscardMaterial.d.ts
+++ b/core/MeshDiscardMaterial.d.ts
@@ -3,9 +3,9 @@ import { ReactThreeFiber } from '@react-three/fiber';
 import { ForwardRefComponent } from '../helpers/ts-utils';
 declare global {
     namespace JSX {
-        interface IntrinsicElements {
+        interface JSX_IntrinsicElements {
             discardMaterialImpl: ReactThreeFiber.ShaderMaterialProps;
         }
     }
 }
-export declare const MeshDiscardMaterial: ForwardRefComponent<JSX.IntrinsicElements['shaderMaterial'], ShaderMaterial>;
+export declare const MeshDiscardMaterial: ForwardRefComponent<JSX_JSX_IntrinsicElements['shaderMaterial'], ShaderMaterial>;
diff --git a/core/MeshDistortMaterial.d.ts b/core/MeshDistortMaterial.d.ts
index 7e888c64907fae02d273ced46fe0f8b97e216d2f..f8bb99c98e0be05a0bff563cae5c0ca9a0baaa66 100644
--- a/core/MeshDistortMaterial.d.ts
+++ b/core/MeshDistortMaterial.d.ts
@@ -1,6 +1,6 @@
 import { IUniform, MeshPhysicalMaterial, MeshPhysicalMaterialParameters } from 'three';
 import { ForwardRefComponent } from '../helpers/ts-utils';
-type DistortMaterialType = JSX.IntrinsicElements['meshPhysicalMaterial'] & {
+type DistortMaterialType = JSX_JSX_IntrinsicElements['meshPhysicalMaterial'] & {
     time?: number;
     distort?: number;
     radius?: number;
@@ -11,7 +11,7 @@ type Props = DistortMaterialType & {
 };
 declare global {
     namespace JSX {
-        interface IntrinsicElements {
+        interface JSX_IntrinsicElements {
             distortMaterialImpl: DistortMaterialType;
         }
     }
diff --git a/core/MeshPortalMaterial.d.ts b/core/MeshPortalMaterial.d.ts
index f09b2105ae216bdcd56170388e0f780067823388..ef3bb877effb5350e2c538435c755ab267c47485 100644
--- a/core/MeshPortalMaterial.d.ts
+++ b/core/MeshPortalMaterial.d.ts
@@ -8,15 +8,15 @@ export type PortalMaterialType = {
     size?: number;
     sdf?: THREE.Texture;
     map?: THREE.Texture;
-} & JSX.IntrinsicElements['shaderMaterial'];
+} & JSX_JSX_IntrinsicElements['shaderMaterial'];
 declare global {
     namespace JSX {
-        interface IntrinsicElements {
+        interface JSX_IntrinsicElements {
             portalMaterialImpl: PortalMaterialType;
         }
     }
 }
-export type PortalProps = JSX.IntrinsicElements['shaderMaterial'] & {
+export type PortalProps = JSX_JSX_IntrinsicElements['shaderMaterial'] & {
     blend?: number;
     blur?: number;
     resolution?: number;
diff --git a/core/MeshReflectorMaterial.d.ts b/core/MeshReflectorMaterial.d.ts
index 827e0a3f5128d69b4df892e3d7388a708f92dcf7..db9ff9042013c5ac2182eb8b7af2a1d31419785f 100644
--- a/core/MeshReflectorMaterial.d.ts
+++ b/core/MeshReflectorMaterial.d.ts
@@ -1,7 +1,7 @@
 import { Texture } from 'three';
 import { MeshReflectorMaterialProps, MeshReflectorMaterial as MeshReflectorMaterialImpl } from '../materials/MeshReflectorMaterial';
 import { ForwardRefComponent } from '../helpers/ts-utils';
-type Props = JSX.IntrinsicElements['meshStandardMaterial'] & {
+type Props = JSX_JSX_IntrinsicElements['meshStandardMaterial'] & {
     resolution?: number;
     mixBlur?: number;
     mixStrength?: number;
@@ -18,7 +18,7 @@ type Props = JSX.IntrinsicElements['meshStandardMaterial'] & {
 };
 declare global {
     namespace JSX {
-        interface IntrinsicElements {
+        interface JSX_IntrinsicElements {
             meshReflectorMaterialImpl: MeshReflectorMaterialProps;
         }
     }
diff --git a/core/MeshRefractionMaterial.d.ts b/core/MeshRefractionMaterial.d.ts
index 772908147aae1a8b20870ca3b0915d66b85ae7d8..8aa625ba5654f4b285d1f83b5541aca2981d5111 100644
--- a/core/MeshRefractionMaterial.d.ts
+++ b/core/MeshRefractionMaterial.d.ts
@@ -4,12 +4,12 @@ import { ReactThreeFiber } from '@react-three/fiber';
 import { MeshRefractionMaterial as MeshRefractionMaterial_ } from '../materials/MeshRefractionMaterial';
 declare global {
     namespace JSX {
-        interface IntrinsicElements {
+        interface JSX_IntrinsicElements {
             meshRefractionMaterial: typeof MeshRefractionMaterial_;
         }
     }
 }
-type MeshRefractionMaterialProps = JSX.IntrinsicElements['shaderMaterial'] & {
+type MeshRefractionMaterialProps = JSX_JSX_IntrinsicElements['shaderMaterial'] & {
     envMap: THREE.CubeTexture | THREE.Texture;
     bounces?: number;
     ior?: number;
diff --git a/core/MeshTransmissionMaterial.d.ts b/core/MeshTransmissionMaterial.d.ts
index 00ab0bc42c677e0a3c6cabf0688a0385c83d071d..6d53888b9edb8eb2edecdf89ee2fa68ccc902b25 100644
--- a/core/MeshTransmissionMaterial.d.ts
+++ b/core/MeshTransmissionMaterial.d.ts
@@ -1,6 +1,6 @@
 import * as THREE from 'three';
 import { ForwardRefComponent } from '../helpers/ts-utils';
-type MeshTransmissionMaterialType = Omit<JSX.IntrinsicElements['meshPhysicalMaterial'], 'args' | 'roughness' | 'thickness' | 'transmission'> & {
+type MeshTransmissionMaterialType = Omit<JSX_JSX_IntrinsicElements['meshPhysicalMaterial'], 'args' | 'roughness' | 'thickness' | 'transmission'> & {
     transmission?: number;
     thickness?: number;
     roughness?: number;
@@ -26,10 +26,10 @@ type MeshTransmissionMaterialProps = Omit<MeshTransmissionMaterialType, 'args'>
 };
 declare global {
     namespace JSX {
-        interface IntrinsicElements {
+        interface JSX_IntrinsicElements {
             meshTransmissionMaterial: MeshTransmissionMaterialType;
         }
     }
 }
-export declare const MeshTransmissionMaterial: ForwardRefComponent<MeshTransmissionMaterialProps, JSX.IntrinsicElements['meshTransmissionMaterial']>;
+export declare const MeshTransmissionMaterial: ForwardRefComponent<MeshTransmissionMaterialProps, JSX_JSX_IntrinsicElements['meshTransmissionMaterial']>;
 export {};
diff --git a/core/MeshWobbleMaterial.d.ts b/core/MeshWobbleMaterial.d.ts
index 1a7d823cf5ed7d3a196d47859286049872f46eb3..16eeabddb7664de538464b5bb58a841944eab23f 100644
--- a/core/MeshWobbleMaterial.d.ts
+++ b/core/MeshWobbleMaterial.d.ts
@@ -1,6 +1,6 @@
 import { IUniform, MeshStandardMaterial, MeshStandardMaterialParameters } from 'three';
 import { ForwardRefComponent } from '../helpers/ts-utils';
-type WobbleMaterialType = JSX.IntrinsicElements['meshStandardMaterial'] & {
+type WobbleMaterialType = JSX_JSX_IntrinsicElements['meshStandardMaterial'] & {
     time?: number;
     factor?: number;
     speed?: number;
@@ -11,7 +11,7 @@ type Props = WobbleMaterialType & {
 };
 declare global {
     namespace JSX {
-        interface IntrinsicElements {
+        interface JSX_IntrinsicElements {
             wobbleMaterialImpl: WobbleMaterialType;
         }
     }
diff --git a/core/MotionPathControls.d.ts b/core/MotionPathControls.d.ts
index b13b70cf331b46311eafee9b267c7bd67dc77145..c44c0795c72964a2b06367ed495014406511157b 100644
--- a/core/MotionPathControls.d.ts
+++ b/core/MotionPathControls.d.ts
@@ -1,6 +1,6 @@
 import * as THREE from 'three';
 import * as React from 'react';
-type MotionPathProps = JSX.IntrinsicElements['group'] & {
+type MotionPathProps = JSX_JSX_IntrinsicElements['group'] & {
     curves?: THREE.Curve<THREE.Vector3>[];
     debug?: boolean;
     object?: React.MutableRefObject<THREE.Object3D>;
diff --git a/core/OrthographicCamera.d.ts b/core/OrthographicCamera.d.ts
index bd0a3fb16cebc694ce02ed8a8d504747d1cbeff0..bf1df216d2139924dbe7b3d57abf84c2c9781a15 100644
--- a/core/OrthographicCamera.d.ts
+++ b/core/OrthographicCamera.d.ts
@@ -2,7 +2,7 @@ import * as THREE from 'three';
 import * as React from 'react';
 import { OrthographicCamera as OrthographicCameraImpl } from 'three';
 import { ForwardRefComponent } from '../helpers/ts-utils';
-type Props = Omit<JSX.IntrinsicElements['orthographicCamera'], 'children'> & {
+type Props = Omit<JSX_JSX_IntrinsicElements['orthographicCamera'], 'children'> & {
     makeDefault?: boolean;
     manual?: boolean;
     children?: React.ReactNode | ((texture: THREE.Texture) => React.ReactNode);
diff --git a/core/Outlines.d.ts b/core/Outlines.d.ts
index 68aabb966d395705a1ccc7e5fa947cc372b00349..ad5e63b54cf11d70f32a51c75348715dae57dcc3 100644
--- a/core/Outlines.d.ts
+++ b/core/Outlines.d.ts
@@ -1,6 +1,6 @@
 import * as React from 'react';
 import { ReactThreeFiber } from '@react-three/fiber';
-type OutlinesProps = JSX.IntrinsicElements['group'] & {
+type OutlinesProps = JSX_JSX_IntrinsicElements['group'] & {
     color?: ReactThreeFiber.Color;
     screenspace?: boolean;
     opacity?: number;
diff --git a/core/PerspectiveCamera.d.ts b/core/PerspectiveCamera.d.ts
index ae56a29be113ddbff7b03ed69275042fd9165263..e68f175cffeb3d45ea6665fb4867f3fe49274428 100644
--- a/core/PerspectiveCamera.d.ts
+++ b/core/PerspectiveCamera.d.ts
@@ -2,7 +2,7 @@ import * as THREE from 'three';
 import * as React from 'react';
 import { PerspectiveCamera as PerspectiveCameraImpl } from 'three';
 import { ForwardRefComponent } from '../helpers/ts-utils';
-type Props = Omit<JSX.IntrinsicElements['perspectiveCamera'], 'children'> & {
+type Props = Omit<JSX_JSX_IntrinsicElements['perspectiveCamera'], 'children'> & {
     makeDefault?: boolean;
     manual?: boolean;
     children?: React.ReactNode | ((texture: THREE.Texture) => React.ReactNode);
diff --git a/core/PointMaterial.d.ts b/core/PointMaterial.d.ts
index 04fe55256edca9d5304719bd7275ee52f3deb9f1..fae2fccede4b285b879bbf526c36623959067047 100644
--- a/core/PointMaterial.d.ts
+++ b/core/PointMaterial.d.ts
@@ -1,10 +1,10 @@
 import * as THREE from 'three';
 import { PrimitiveProps } from '@react-three/fiber';
 import { ForwardRefComponent } from '../helpers/ts-utils';
-type PointMaterialType = JSX.IntrinsicElements['pointsMaterial'];
+type PointMaterialType = JSX_JSX_IntrinsicElements['pointsMaterial'];
 declare global {
     namespace JSX {
-        interface IntrinsicElements {
+        interface JSX_IntrinsicElements {
             pointMaterialImpl: PointMaterialType;
         }
     }
diff --git a/core/Points.d.ts b/core/Points.d.ts
index 339f5aca61c10996d98b79df1dcc16f26cd0e5c7..ff76e8be2b5ab98d5ea4b68469be3994eb0db4c5 100644
--- a/core/Points.d.ts
+++ b/core/Points.d.ts
@@ -4,12 +4,12 @@ import { ReactThreeFiber } from '@react-three/fiber';
 import { ForwardRefComponent } from '../helpers/ts-utils';
 declare global {
     namespace JSX {
-        interface IntrinsicElements {
+        interface JSX_IntrinsicElements {
             positionPoint: ReactThreeFiber.Object3DNode<PositionPoint, typeof PositionPoint>;
         }
     }
 }
-type PointsInstancesProps = JSX.IntrinsicElements['points'] & {
+type PointsInstancesProps = JSX_JSX_IntrinsicElements['points'] & {
     range?: number;
     limit?: number;
 };
@@ -17,13 +17,13 @@ export declare class PositionPoint extends THREE.Group {
     size: number;
     color: THREE.Color;
     instance: React.MutableRefObject<THREE.Points | undefined>;
-    instanceKey: React.MutableRefObject<JSX.IntrinsicElements['positionPoint'] | undefined>;
+    instanceKey: React.MutableRefObject<JSX_JSX_IntrinsicElements['positionPoint'] | undefined>;
     constructor();
     get geometry(): THREE.BufferGeometry | undefined;
     raycast(raycaster: THREE.Raycaster, intersects: THREE.Intersection[]): void;
 }
-export declare const Point: ForwardRefComponent<JSX.IntrinsicElements['positionPoint'], PositionPoint>;
-type PointsBuffersProps = JSX.IntrinsicElements['points'] & {
+export declare const Point: ForwardRefComponent<JSX_JSX_IntrinsicElements['positionPoint'], PositionPoint>;
+type PointsBuffersProps = JSX_JSX_IntrinsicElements['points'] & {
     positions: Float32Array;
     colors?: Float32Array;
     sizes?: Float32Array;
diff --git a/core/PositionalAudio.d.ts b/core/PositionalAudio.d.ts
index 82cd84a09b7cd9d6912314434db66a1c7a82f4d3..b50dca8ff688d978572da7559967295821903b7b 100644
--- a/core/PositionalAudio.d.ts
+++ b/core/PositionalAudio.d.ts
@@ -1,6 +1,6 @@
 import { PositionalAudio as PositionalAudioImpl } from 'three';
 import { ForwardRefComponent } from '../helpers/ts-utils';
-type Props = JSX.IntrinsicElements['positionalAudio'] & {
+type Props = JSX_JSX_IntrinsicElements['positionalAudio'] & {
     url: string;
     distance?: number;
     loop?: boolean;
diff --git a/core/Reflector.d.ts b/core/Reflector.d.ts
index d94c276238c9d1e59ba1c195bca2b3a822ddea1b..f1fe7b6ae2bd44da5d18e7208447059d8d2798c7 100644
--- a/core/Reflector.d.ts
+++ b/core/Reflector.d.ts
@@ -2,7 +2,7 @@ import * as React from 'react';
 import { Mesh, Texture } from 'three';
 import { MeshReflectorMaterialProps } from '../materials/MeshReflectorMaterial';
 import { ForwardRefComponent } from '../helpers/ts-utils';
-export type ReflectorProps = Omit<JSX.IntrinsicElements['mesh'], 'args' | 'children'> & Pick<JSX.IntrinsicElements['planeGeometry'], 'args'> & {
+export type ReflectorProps = Omit<JSX_JSX_IntrinsicElements['mesh'], 'args' | 'children'> & Pick<JSX_JSX_IntrinsicElements['planeGeometry'], 'args'> & {
     resolution?: number;
     mixBlur?: number;
     mixStrength?: number;
@@ -17,12 +17,12 @@ export type ReflectorProps = Omit<JSX.IntrinsicElements['mesh'], 'args' | 'child
     distortion?: number;
     mixContrast?: number;
     children?: {
-        (Component: React.ElementType<JSX.IntrinsicElements['meshReflectorMaterial']>, ComponentProps: MeshReflectorMaterialProps): JSX.Element | null;
+        (Component: React.ElementType<JSX_JSX_IntrinsicElements['meshReflectorMaterial']>, ComponentProps: MeshReflectorMaterialProps): JSX.Element | null;
     };
 };
 declare global {
     namespace JSX {
-        interface IntrinsicElements {
+        interface JSX_IntrinsicElements {
             meshReflectorMaterial: MeshReflectorMaterialProps;
         }
     }
diff --git a/core/RenderCubeTexture.d.ts b/core/RenderCubeTexture.d.ts
index 5f341a813b09feebe832c1c0cae1682a8812d8d2..c8c86d845b00f23da086a83ac6ff7ee12d34cc6e 100644
--- a/core/RenderCubeTexture.d.ts
+++ b/core/RenderCubeTexture.d.ts
@@ -2,7 +2,7 @@ import * as THREE from 'three';
 import * as React from 'react';
 import { ComputeFunction, ReactThreeFiber } from '@react-three/fiber';
 import { ForwardRefComponent } from '../helpers/ts-utils';
-export type RenderCubeTextureProps = Omit<JSX.IntrinsicElements['texture'], 'rotation'> & {
+export type RenderCubeTextureProps = Omit<JSX_JSX_IntrinsicElements['texture'], 'rotation'> & {
     stencilBuffer?: boolean;
     depthBuffer?: boolean;
     generateMipmaps?: boolean;
diff --git a/core/RenderTexture.d.ts b/core/RenderTexture.d.ts
index c9f356e73440fd6b93df57ad743129d077af3416..8864b30e1fdab90da95f4f2482573df80383a6b7 100644
--- a/core/RenderTexture.d.ts
+++ b/core/RenderTexture.d.ts
@@ -1,7 +1,7 @@
 import * as THREE from 'three';
 import * as React from 'react';
 import { ForwardRefComponent } from '../helpers/ts-utils';
-type Props = JSX.IntrinsicElements['texture'] & {
+type Props = JSX_JSX_IntrinsicElements['texture'] & {
     width?: number;
     height?: number;
     samples?: number;
diff --git a/core/Resize.d.ts b/core/Resize.d.ts
index dc01883586877be4229492b911096a5671f47013..c22f888c98567182b246c7fbce25b88d007fd064 100644
--- a/core/Resize.d.ts
+++ b/core/Resize.d.ts
@@ -1,6 +1,6 @@
 import * as THREE from 'three';
 import * as React from 'react';
-export type ResizeProps = JSX.IntrinsicElements['group'] & {
+export type ResizeProps = JSX_JSX_IntrinsicElements['group'] & {
     width?: boolean;
     height?: boolean;
     depth?: boolean;
diff --git a/core/RoundedBox.d.ts b/core/RoundedBox.d.ts
index 4a84b7e339d69ab810564e1946ca927941672e07..a350def91101a0eed5253b2da3299f315a5de7e6 100644
--- a/core/RoundedBox.d.ts
+++ b/core/RoundedBox.d.ts
@@ -7,6 +7,6 @@ type Props = {
     bevelSegments?: number;
     steps?: number;
     creaseAngle?: number;
-} & Omit<JSX.IntrinsicElements['mesh'], 'args'>;
+} & Omit<JSX_JSX_IntrinsicElements['mesh'], 'args'>;
 export declare const RoundedBox: ForwardRefComponent<Props, Mesh>;
 export {};
diff --git a/core/ScreenQuad.d.ts b/core/ScreenQuad.d.ts
index 15307c86906abc0a4c6c2a09e74fb66dbfcfa740..bd1e0b04269e3d59032c820c9ebd5f78bfb20299 100644
--- a/core/ScreenQuad.d.ts
+++ b/core/ScreenQuad.d.ts
@@ -1,5 +1,5 @@
 import * as THREE from 'three';
 import { ForwardRefComponent } from '../helpers/ts-utils';
-type Props = Omit<JSX.IntrinsicElements['mesh'], 'args'>;
+type Props = Omit<JSX_JSX_IntrinsicElements['mesh'], 'args'>;
 export declare const ScreenQuad: ForwardRefComponent<Props, THREE.Mesh>;
 export {};
diff --git a/core/ScreenSpace.d.ts b/core/ScreenSpace.d.ts
index 254a87357786e5dbbaaebb8bfdd1d04efb6719ea..d97220360a160cc5b02cab1d68db93cc42dc1938 100644
--- a/core/ScreenSpace.d.ts
+++ b/core/ScreenSpace.d.ts
@@ -2,5 +2,5 @@ import { Group } from 'three';
 import { ForwardRefComponent } from '../helpers/ts-utils';
 export type ScreenSpaceProps = {
     depth?: number;
-} & JSX.IntrinsicElements['group'];
+} & JSX_JSX_IntrinsicElements['group'];
 export declare const ScreenSpace: ForwardRefComponent<ScreenSpaceProps, Group>;
diff --git a/core/Segments.d.ts b/core/Segments.d.ts
index fc709b11578c23da462627e508121c708418c306..baebc894560b4abe5f7eb3414687ef666776b83e 100644
--- a/core/Segments.d.ts
+++ b/core/Segments.d.ts
@@ -8,7 +8,7 @@ type SegmentsProps = LineMaterialParameters & {
     lineWidth?: number;
     children: React.ReactNode;
 };
-type SegmentProps = Omit<JSX.IntrinsicElements['segmentObject'], 'start' | 'end' | 'color'> & {
+type SegmentProps = Omit<JSX_JSX_IntrinsicElements['segmentObject'], 'start' | 'end' | 'color'> & {
     start: ReactThreeFiber.Vector3;
     end: ReactThreeFiber.Vector3;
     color?: ReactThreeFiber.Color;
@@ -16,7 +16,7 @@ type SegmentProps = Omit<JSX.IntrinsicElements['segmentObject'], 'start' | 'end'
 declare const Segments: ForwardRefComponent<SegmentsProps, Line2>;
 declare global {
     namespace JSX {
-        interface IntrinsicElements {
+        interface JSX_IntrinsicElements {
             segmentObject: ReactThreeFiber.Object3DNode<SegmentObject, typeof SegmentObject>;
         }
     }
diff --git a/core/Shadow.d.ts b/core/Shadow.d.ts
index 03688a5b3b4b6389b77d9c58a9cadbbaedb9874f..e94cce87914496c13fe2662aa6a4432ad1830f5f 100644
--- a/core/Shadow.d.ts
+++ b/core/Shadow.d.ts
@@ -1,6 +1,6 @@
 import { Mesh, Color, type PlaneGeometry, type MeshBasicMaterial } from 'three';
 import { ForwardRefComponent } from '../helpers/ts-utils';
-type Props = JSX.IntrinsicElements['mesh'] & {
+type Props = JSX_JSX_IntrinsicElements['mesh'] & {
     colorStop?: number;
     fog?: boolean;
     color?: Color | number | string;
diff --git a/core/Sparkles.d.ts b/core/Sparkles.d.ts
index bfa0337d3659ff22ce3aa4b67831f8e167fb37da..e6b35245e2023acbd12ad89b09fff0772f98487d 100644
--- a/core/Sparkles.d.ts
+++ b/core/Sparkles.d.ts
@@ -12,7 +12,7 @@ interface Props {
 }
 declare global {
     namespace JSX {
-        interface IntrinsicElements {
+        interface JSX_IntrinsicElements {
             sparklesImplMaterial: Node<any, any>;
         }
     }
diff --git a/core/Splat.d.ts b/core/Splat.d.ts
index df1b65de82c8828335a5240159069e624a7d294a..ca184aca00abbcebb20b3085da21b8729f4e1546 100644
--- a/core/Splat.d.ts
+++ b/core/Splat.d.ts
@@ -42,8 +42,8 @@ export type SharedState = {
 };
 declare global {
     namespace JSX {
-        interface IntrinsicElements {
-            splatMaterial: SplatMaterialType & JSX.IntrinsicElements['shaderMaterial'];
+        interface JSX_IntrinsicElements {
+            splatMaterial: SplatMaterialType & JSX_JSX_IntrinsicElements['shaderMaterial'];
         }
     }
 }
@@ -53,6 +53,6 @@ type SplatProps = {
     alphaTest?: number;
     alphaHash?: boolean;
     chunkSize?: number;
-} & JSX.IntrinsicElements['mesh'];
+} & JSX_JSX_IntrinsicElements['mesh'];
 export declare function Splat({ src, toneMapped, alphaTest, alphaHash, chunkSize, ...props }: SplatProps): React.JSX.Element;
 export {};
diff --git a/core/SpotLight.d.ts b/core/SpotLight.d.ts
index 781eb9c8fc8b1651e073f3604e7395e9efbf34cb..0be5e1349044ac1e4bc9a138a6ae9b231770eae1 100644
--- a/core/SpotLight.d.ts
+++ b/core/SpotLight.d.ts
@@ -1,7 +1,7 @@
 import * as React from 'react';
 import { DepthTexture, SpotLight as SpotLightImpl, Texture } from 'three';
 import { ForwardRefComponent } from '../helpers/ts-utils';
-type SpotLightProps = JSX.IntrinsicElements['spotLight'] & {
+type SpotLightProps = JSX_JSX_IntrinsicElements['spotLight'] & {
     depthBuffer?: DepthTexture;
     attenuation?: number;
     anglePower?: number;
diff --git a/core/SpriteAnimator.d.ts b/core/SpriteAnimator.d.ts
index 199b177d9e32f7588c0da324d51547f86982e778..ff0c5ec8418caf23513f55506aa86fed4f4fc91b 100644
--- a/core/SpriteAnimator.d.ts
+++ b/core/SpriteAnimator.d.ts
@@ -26,7 +26,7 @@ export type SpriteAnimatorProps = {
     maxItems?: number;
     instanceItems?: any[];
     spriteDataset?: any;
-} & JSX.IntrinsicElements['group'];
+} & JSX_JSX_IntrinsicElements['group'];
 type SpriteAnimatorState = {
     current: number | undefined;
     offset: number | undefined;
diff --git a/core/Stage.d.ts b/core/Stage.d.ts
index 21cbeb3446cbdb48da4c4111c77592f370db54b5..1a9e8def9fc5d0e46bcdf0559e5e7a2e5946ca2c 100644
--- a/core/Stage.d.ts
+++ b/core/Stage.d.ts
@@ -22,5 +22,5 @@ type StageProps = {
     intensity?: number;
     center?: Partial<CenterProps>;
 };
-export declare function Stage({ children, center, adjustCamera, intensity, shadows, environment, preset, ...props }: JSX.IntrinsicElements['group'] & StageProps): React.JSX.Element;
+export declare function Stage({ children, center, adjustCamera, intensity, shadows, environment, preset, ...props }: JSX_JSX_IntrinsicElements['group'] & StageProps): React.JSX.Element;
 export {};
diff --git a/core/Stars.d.ts b/core/Stars.d.ts
index b682cfced2d5365300cbc7aac3c607a468f89c2a..65e5a91ec6982e941b15cba5bd134506495406cf 100644
--- a/core/Stars.d.ts
+++ b/core/Stars.d.ts
@@ -15,7 +15,7 @@ declare class StarfieldMaterial extends ShaderMaterial {
 }
 declare global {
     namespace JSX {
-        interface IntrinsicElements {
+        interface JSX_IntrinsicElements {
             starfieldMaterial: ReactThreeFiber.MaterialNode<StarfieldMaterial, []>;
         }
     }
diff --git a/core/Text.d.ts b/core/Text.d.ts
index 137a46ffead1b8f8402e1b47558708121d8602c6..a571687a4181015abc634626a2ed1382b03a710b 100644
--- a/core/Text.d.ts
+++ b/core/Text.d.ts
@@ -1,7 +1,7 @@
 import * as React from 'react';
 import { ReactThreeFiber } from '@react-three/fiber';
 import { ForwardRefComponent } from '../helpers/ts-utils';
-type Props = JSX.IntrinsicElements['mesh'] & {
+type Props = JSX_JSX_IntrinsicElements['mesh'] & {
     children: React.ReactNode;
     characters?: string;
     color?: ReactThreeFiber.Color;
diff --git a/core/Text3D.d.ts b/core/Text3D.d.ts
index e2195fca3234a04ce88f4a4d3d17375392185362..2089fca15a75ff3469070af3d274e41abeefc881 100644
--- a/core/Text3D.d.ts
+++ b/core/Text3D.d.ts
@@ -6,7 +6,7 @@ import { FontData } from './useFont';
 import { ForwardRefComponent } from '../helpers/ts-utils';
 declare global {
     namespace JSX {
-        interface IntrinsicElements {
+        interface JSX_IntrinsicElements {
             renamedTextGeometry: Node<any, any>;
         }
     }
diff --git a/core/TransformControls.d.ts b/core/TransformControls.d.ts
index fdba2fb121105a885ca705960acb2f3c8c5c2bdf..4c3b321d5b0a01a6847a94e8ae07405b1056ec0d 100644
--- a/core/TransformControls.d.ts
+++ b/core/TransformControls.d.ts
@@ -3,7 +3,7 @@ import * as React from 'react';
 import * as THREE from 'three';
 import { TransformControls as TransformControlsImpl } from 'three-stdlib';
 import { ForwardRefComponent } from '../helpers/ts-utils';
-export type TransformControlsProps = ReactThreeFiber.Object3DNode<TransformControlsImpl, typeof TransformControlsImpl> & JSX.IntrinsicElements['group'] & {
+export type TransformControlsProps = ReactThreeFiber.Object3DNode<TransformControlsImpl, typeof TransformControlsImpl> & JSX_JSX_IntrinsicElements['group'] & {
     object?: THREE.Object3D | React.MutableRefObject<THREE.Object3D>;
     enabled?: boolean;
     axis?: string | null;
diff --git a/core/Wireframe.d.ts b/core/Wireframe.d.ts
index 3aecbe04ae526b163764be7f9da0d3703194c454..45ed775e1f7917a05a42a3da118caa03fe87c701 100644
--- a/core/Wireframe.d.ts
+++ b/core/Wireframe.d.ts
@@ -4,7 +4,7 @@ import { MaterialNode } from '@react-three/fiber';
 import { WireframeMaterialProps } from '../materials/WireframeMaterial';
 declare global {
     namespace JSX {
-        interface IntrinsicElements {
+        interface JSX_IntrinsicElements {
             meshWireframeMaterial: MaterialNode<THREE.ShaderMaterial, WireframeMaterialProps>;
         }
     }
diff --git a/core/shapes.d.ts b/core/shapes.d.ts
index 6f390c7558f2029930b83082222d803cf71bd906..0b8618458b10ac6d71769b12d9fa029a18daa23f 100644
--- a/core/shapes.d.ts
+++ b/core/shapes.d.ts
@@ -1,7 +1,7 @@
 import * as THREE from 'three';
 import { ForwardRefComponent } from '../helpers/ts-utils';
 export type Args<T> = T extends new (...args: any) => any ? ConstructorParameters<T> : T;
-export type ShapeProps<T> = Omit<JSX.IntrinsicElements['mesh'], 'args'> & {
+export type ShapeProps<T> = Omit<JSX_JSX_IntrinsicElements['mesh'], 'args'> & {
     args?: Args<T>;
 };
 export declare const Box: ForwardRefComponent<ShapeProps<typeof THREE.BoxGeometry>, THREE.Mesh<THREE.BufferGeometry, THREE.Material | THREE.Material[]>>;
diff --git a/materials/MeshReflectorMaterial.d.ts b/materials/MeshReflectorMaterial.d.ts
index e906d4c68681708d640d4927990b2a599e7c2aca..cc1baa32ece703eaf082ec43476c31e51937db10 100644
--- a/materials/MeshReflectorMaterial.d.ts
+++ b/materials/MeshReflectorMaterial.d.ts
@@ -63,4 +63,4 @@ export type MeshReflectorMaterialProps = {
     depthToBlurRatioBias: number;
     distortion: number;
     mixContrast: number;
-} & JSX.IntrinsicElements['meshStandardMaterial'];
+} & JSX_JSX_IntrinsicElements['meshStandardMaterial'];
diff --git a/web/Facemesh.d.ts b/web/Facemesh.d.ts
index 0ed818b866e6a28e3933806143e758fd028da513..18f40aaa26959c9bb154cbf481ec7fa45e81fdb0 100644
--- a/web/Facemesh.d.ts
+++ b/web/Facemesh.d.ts
@@ -17,7 +17,7 @@ export type FacemeshProps = {
     eyes?: boolean;
     eyesAsOrigin?: boolean;
     debug?: boolean;
-} & Omit<JSX.IntrinsicElements['group'], 'ref'>;
+} & Omit<JSX_JSX_IntrinsicElements['group'], 'ref'>;
 export type FacemeshApi = {
     meshRef: React.RefObject<THREE.Mesh>;
     outerRef: React.RefObject<THREE.Group>;
diff --git a/web/Select.d.ts b/web/Select.d.ts
index 108185e1f035fac035757931435d2860ada6be80..0c611492c9bcafef85f7e1b9e92d46015dde53f8 100644
--- a/web/Select.d.ts
+++ b/web/Select.d.ts
@@ -1,6 +1,6 @@
 import * as React from 'react';
 import * as THREE from 'three';
-type Props = JSX.IntrinsicElements['group'] & {
+type Props = JSX_JSX_IntrinsicElements['group'] & {
     multiple?: boolean;
     box?: boolean;
     border?: string;
