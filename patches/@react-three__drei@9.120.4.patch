diff --git a/core/AccumulativeShadows.d.ts b/core/AccumulativeShadows.d.ts
index dc6e0a491229f328fb6176843e8ad5ac633aab03..d81b6eb14773732b75d69995e5f33fb0a991dfaa 100644
--- a/core/AccumulativeShadows.d.ts
+++ b/core/AccumulativeShadows.d.ts
@@ -1,61 +1,71 @@
-import * as THREE from 'three';
-import * as React from 'react';
-import { ReactThreeFiber } from '@react-three/fiber';
-import { ForwardRefComponent } from '../helpers/ts-utils';
+import * as THREE from "three";
+import * as React from "react";
+import { ReactThreeFiber } from "@react-three/fiber";
+import { ForwardRefComponent } from "../helpers/ts-utils";
 export type AccumulativeShadowsProps = {
-    frames?: number;
-    blend?: number;
-    limit?: number;
-    scale?: number;
-    temporal?: boolean;
-    opacity?: number;
-    alphaTest?: number;
-    color?: string;
-    colorBlend?: number;
-    resolution?: number;
-    toneMapped?: boolean;
+  frames?: number;
+  blend?: number;
+  limit?: number;
+  scale?: number;
+  temporal?: boolean;
+  opacity?: number;
+  alphaTest?: number;
+  color?: string;
+  colorBlend?: number;
+  resolution?: number;
+  toneMapped?: boolean;
 };
 interface AccumulativeContext {
-    lights: Map<any, any>;
-    temporal: boolean;
-    frames: number;
-    blend: number;
-    count: number;
-    getMesh: () => THREE.Mesh<THREE.PlaneGeometry, SoftShadowMaterialProps & THREE.ShaderMaterial>;
-    reset: () => void;
-    update: (frames?: number) => void;
+  lights: Map<any, any>;
+  temporal: boolean;
+  frames: number;
+  blend: number;
+  count: number;
+  getMesh: () => THREE.Mesh<
+    THREE.PlaneGeometry,
+    SoftShadowMaterialProps & THREE.ShaderMaterial
+  >;
+  reset: () => void;
+  update: (frames?: number) => void;
 }
 interface AccumulativeLightContext {
-    update: () => void;
+  update: () => void;
 }
 type SoftShadowMaterialProps = {
-    map: THREE.Texture;
-    color?: ReactThreeFiber.Color;
-    alphaTest?: number;
-    blend?: number;
+  map: THREE.Texture;
+  color?: ReactThreeFiber.Color;
+  alphaTest?: number;
+  blend?: number;
 };
 declare global {
-    namespace JSX {
-        interface IntrinsicElements {
-            softShadowMaterial: JSX.IntrinsicElements['shaderMaterial'] & SoftShadowMaterialProps;
-        }
+  namespace JSX {
+    interface JSX_IntrinsicElements {
+      softShadowMaterial: JSX_IntrinsicElements["shaderMaterial"] &
+        SoftShadowMaterialProps;
     }
+  }
 }
 export declare const accumulativeContext: React.Context<AccumulativeContext>;
-export declare const AccumulativeShadows: ForwardRefComponent<JSX.IntrinsicElements['group'] & AccumulativeShadowsProps, AccumulativeContext>;
+export declare const AccumulativeShadows: ForwardRefComponent<
+  JSX_IntrinsicElements["group"] & AccumulativeShadowsProps,
+  AccumulativeContext
+>;
 export type RandomizedLightProps = {
-    frames?: number;
-    position?: [x: number, y: number, z: number];
-    radius?: number;
-    amount?: number;
-    intensity?: number;
-    ambient?: number;
-    castShadow?: boolean;
-    bias?: number;
-    mapSize?: number;
-    size?: number;
-    near?: number;
-    far?: number;
+  frames?: number;
+  position?: [x: number, y: number, z: number];
+  radius?: number;
+  amount?: number;
+  intensity?: number;
+  ambient?: number;
+  castShadow?: boolean;
+  bias?: number;
+  mapSize?: number;
+  size?: number;
+  near?: number;
+  far?: number;
 };
-export declare const RandomizedLight: ForwardRefComponent<JSX.IntrinsicElements['group'] & RandomizedLightProps, AccumulativeLightContext>;
+export declare const RandomizedLight: ForwardRefComponent<
+  JSX_IntrinsicElements["group"] & RandomizedLightProps,
+  AccumulativeLightContext
+>;
 export {};
diff --git a/core/Backdrop.d.ts b/core/Backdrop.d.ts
index f1da2d2a5c2b644f6082474632101b881afd54e8..02def7bef6e8c89ff072042707195abe9979f73b 100644
--- a/core/Backdrop.d.ts
+++ b/core/Backdrop.d.ts
@@ -1,14 +1,20 @@
-import * as React from 'react';
-export type BackdropProps = JSX.IntrinsicElements['group'] & {
-    floor?: number;
-    segments?: number;
-    receiveShadow?: boolean;
-    children?: React.ReactNode;
+import * as React from "react";
+export type BackdropProps = JSX_IntrinsicElements["group"] & {
+  floor?: number;
+  segments?: number;
+  receiveShadow?: boolean;
+  children?: React.ReactNode;
 };
-export declare function Backdrop({ children, floor, segments, receiveShadow, ...props }: {
-    [x: string]: any;
-    children: any;
-    floor?: number | undefined;
-    segments?: number | undefined;
-    receiveShadow: any;
+export declare function Backdrop({
+  children,
+  floor,
+  segments,
+  receiveShadow,
+  ...props
+}: {
+  [x: string]: any;
+  children: any;
+  floor?: number | undefined;
+  segments?: number | undefined;
+  receiveShadow: any;
 }): React.JSX.Element;
diff --git a/core/Billboard.d.ts b/core/Billboard.d.ts
index a27cddbc7233a3eafdfab4ca31ded5823f0aff02..b45e36556dbf8a5de73d37203fa3f8ea6d4b4a14 100644
--- a/core/Billboard.d.ts
+++ b/core/Billboard.d.ts
@@ -1,9 +1,9 @@
-import { Group } from 'three';
-import { ForwardRefComponent } from '../helpers/ts-utils';
+import { Group } from "three";
+import { ForwardRefComponent } from "../helpers/ts-utils";
 export type BillboardProps = {
-    follow?: boolean;
-    lockX?: boolean;
-    lockY?: boolean;
-    lockZ?: boolean;
-} & JSX.IntrinsicElements['group'];
+  follow?: boolean;
+  lockX?: boolean;
+  lockY?: boolean;
+  lockZ?: boolean;
+} & JSX_IntrinsicElements["group"];
 export declare const Billboard: ForwardRefComponent<BillboardProps, Group>;
diff --git a/core/Bounds.d.ts b/core/Bounds.d.ts
index ec12162b0341942187b8dd142ef12523f70cb448..2f56e202c24b83f81ccd3ce643499232a04be01a 100644
--- a/core/Bounds.d.ts
+++ b/core/Bounds.d.ts
@@ -1,35 +1,50 @@
-import * as React from 'react';
-import * as THREE from 'three';
+import * as React from "react";
+import * as THREE from "three";
 export type SizeProps = {
-    box: THREE.Box3;
-    size: THREE.Vector3;
-    center: THREE.Vector3;
-    distance: number;
+  box: THREE.Box3;
+  size: THREE.Vector3;
+  center: THREE.Vector3;
+  distance: number;
 };
 export type BoundsApi = {
-    getSize: () => SizeProps;
-    refresh(object?: THREE.Object3D | THREE.Box3): BoundsApi;
-    reset(): BoundsApi;
-    moveTo(position: THREE.Vector3 | [number, number, number]): BoundsApi;
-    lookAt({ target, up, }: {
-        target?: THREE.Vector3 | [number, number, number];
-        up?: THREE.Vector3 | [number, number, number];
-    }): BoundsApi;
-    to({ position, target }: {
-        position: [number, number, number];
-        target: [number, number, number];
-    }): BoundsApi;
-    fit(): BoundsApi;
-    clip(): BoundsApi;
+  getSize: () => SizeProps;
+  refresh(object?: THREE.Object3D | THREE.Box3): BoundsApi;
+  reset(): BoundsApi;
+  moveTo(position: THREE.Vector3 | [number, number, number]): BoundsApi;
+  lookAt({
+    target,
+    up,
+  }: {
+    target?: THREE.Vector3 | [number, number, number];
+    up?: THREE.Vector3 | [number, number, number];
+  }): BoundsApi;
+  to({
+    position,
+    target,
+  }: {
+    position: [number, number, number];
+    target: [number, number, number];
+  }): BoundsApi;
+  fit(): BoundsApi;
+  clip(): BoundsApi;
 };
-export type BoundsProps = JSX.IntrinsicElements['group'] & {
-    maxDuration?: number;
-    margin?: number;
-    observe?: boolean;
-    fit?: boolean;
-    clip?: boolean;
-    interpolateFunc?: (t: number) => number;
-    onFit?: (data: SizeProps) => void;
+export type BoundsProps = JSX_IntrinsicElements["group"] & {
+  maxDuration?: number;
+  margin?: number;
+  observe?: boolean;
+  fit?: boolean;
+  clip?: boolean;
+  interpolateFunc?: (t: number) => number;
+  onFit?: (data: SizeProps) => void;
 };
-export declare function Bounds({ children, maxDuration, margin, observe, fit, clip, interpolateFunc, onFit, }: BoundsProps): React.JSX.Element;
+export declare function Bounds({
+  children,
+  maxDuration,
+  margin,
+  observe,
+  fit,
+  clip,
+  interpolateFunc,
+  onFit,
+}: BoundsProps): React.JSX.Element;
 export declare function useBounds(): BoundsApi;
diff --git a/core/Bvh.d.ts b/core/Bvh.d.ts
index 0c526be7ab1fcf750864d5ed36271c5baeb4569c..95e05836480e12c450ec8b1f68f8dfbfc851ef64 100644
--- a/core/Bvh.d.ts
+++ b/core/Bvh.d.ts
@@ -1,18 +1,22 @@
-import * as React from 'react';
-import { Mesh, Group } from 'three';
-import { SplitStrategy } from 'three-mesh-bvh';
-import { ForwardRefComponent } from '../helpers/ts-utils';
+import * as React from "react";
+import { Mesh, Group } from "three";
+import { SplitStrategy } from "three-mesh-bvh";
+import { ForwardRefComponent } from "../helpers/ts-utils";
 export interface BVHOptions {
-    strategy?: SplitStrategy;
-    verbose?: boolean;
-    setBoundingBox?: boolean;
-    maxDepth?: number;
-    maxLeafTris?: number;
-    indirect?: boolean;
+  strategy?: SplitStrategy;
+  verbose?: boolean;
+  setBoundingBox?: boolean;
+  maxDepth?: number;
+  maxLeafTris?: number;
+  indirect?: boolean;
 }
-export type BvhProps = BVHOptions & JSX.IntrinsicElements['group'] & {
+export type BvhProps = BVHOptions &
+  JSX_IntrinsicElements["group"] & {
     enabled?: boolean;
     firstHitOnly?: boolean;
-};
-export declare function useBVH(mesh: React.MutableRefObject<Mesh | undefined>, options?: BVHOptions): void;
+  };
+export declare function useBVH(
+  mesh: React.MutableRefObject<Mesh | undefined>,
+  options?: BVHOptions
+): void;
 export declare const Bvh: ForwardRefComponent<BvhProps, Group>;
diff --git a/core/Caustics.d.ts b/core/Caustics.d.ts
index 1ca24e0e7c04b7f0b8f6081f6ee8e5586775e8dd..369d941419ced621a63d5be9a40b51a3d5f7073a 100644
--- a/core/Caustics.d.ts
+++ b/core/Caustics.d.ts
@@ -1,35 +1,37 @@
-import * as THREE from 'three';
-import * as React from 'react';
-import { ReactThreeFiber } from '@react-three/fiber';
-import { ForwardRefComponent } from '../helpers/ts-utils';
-type CausticsProps = JSX.IntrinsicElements['group'] & {
-    frames?: number;
-    debug?: boolean;
-    causticsOnly: boolean;
-    backside: boolean;
-    ior?: number;
-    backsideIOR?: number;
-    worldRadius?: number;
-    intensity?: number;
-    color?: ReactThreeFiber.Color;
-    resolution?: number;
-    lightSource?: [x: number, y: number, z: number] | React.MutableRefObject<THREE.Object3D>;
+import * as THREE from "three";
+import * as React from "react";
+import { ReactThreeFiber } from "@react-three/fiber";
+import { ForwardRefComponent } from "../helpers/ts-utils";
+type CausticsProps = JSX_IntrinsicElements["group"] & {
+  frames?: number;
+  debug?: boolean;
+  causticsOnly: boolean;
+  backside: boolean;
+  ior?: number;
+  backsideIOR?: number;
+  worldRadius?: number;
+  intensity?: number;
+  color?: ReactThreeFiber.Color;
+  resolution?: number;
+  lightSource?:
+    | [x: number, y: number, z: number]
+    | React.MutableRefObject<THREE.Object3D>;
 };
 declare global {
-    namespace JSX {
-        interface IntrinsicElements {
-            causticsProjectionMaterial: ReactThreeFiber.MeshNormalMaterialProps & {
-                viewMatrix?: {
-                    value: THREE.Matrix4;
-                };
-                color?: ReactThreeFiber.Color;
-                causticsTexture?: THREE.Texture;
-                causticsTextureB?: THREE.Texture;
-                lightProjMatrix?: THREE.Matrix4;
-                lightViewMatrix?: THREE.Matrix4;
-            };
-        }
+  namespace JSX {
+    interface JSX_IntrinsicElements {
+      causticsProjectionMaterial: ReactThreeFiber.MeshNormalMaterialProps & {
+        viewMatrix?: {
+          value: THREE.Matrix4;
+        };
+        color?: ReactThreeFiber.Color;
+        causticsTexture?: THREE.Texture;
+        causticsTextureB?: THREE.Texture;
+        lightProjMatrix?: THREE.Matrix4;
+        lightViewMatrix?: THREE.Matrix4;
+      };
     }
+  }
 }
 export declare const Caustics: ForwardRefComponent<CausticsProps, THREE.Group>;
 export {};
diff --git a/core/Center.d.ts b/core/Center.d.ts
index e00a1efc9028c4b13c0e6106232862f8b4ce653d..e11de3a24bae34157d2eb9e44b2f2270bd0bf9f5 100644
--- a/core/Center.d.ts
+++ b/core/Center.d.ts
@@ -1,31 +1,34 @@
-import { Box3, Vector3, Sphere, Group, Object3D } from 'three';
-import { ForwardRefComponent } from '../helpers/ts-utils';
+import { Box3, Vector3, Sphere, Group, Object3D } from "three";
+import { ForwardRefComponent } from "../helpers/ts-utils";
 export type OnCenterCallbackProps = {
-    parent: Object3D;
-    container: Object3D;
-    width: number;
-    height: number;
-    depth: number;
-    boundingBox: Box3;
-    boundingSphere: Sphere;
-    center: Vector3;
-    verticalAlignment: number;
-    horizontalAlignment: number;
-    depthAlignment: number;
+  parent: Object3D;
+  container: Object3D;
+  width: number;
+  height: number;
+  depth: number;
+  boundingBox: Box3;
+  boundingSphere: Sphere;
+  center: Vector3;
+  verticalAlignment: number;
+  horizontalAlignment: number;
+  depthAlignment: number;
 };
 export type CenterProps = {
-    top?: boolean;
-    right?: boolean;
-    bottom?: boolean;
-    left?: boolean;
-    front?: boolean;
-    back?: boolean;
-    disable?: boolean;
-    disableX?: boolean;
-    disableY?: boolean;
-    disableZ?: boolean;
-    precise?: boolean;
-    onCentered?: (props: OnCenterCallbackProps) => void;
-    cacheKey?: any;
+  top?: boolean;
+  right?: boolean;
+  bottom?: boolean;
+  left?: boolean;
+  front?: boolean;
+  back?: boolean;
+  disable?: boolean;
+  disableX?: boolean;
+  disableY?: boolean;
+  disableZ?: boolean;
+  precise?: boolean;
+  onCentered?: (props: OnCenterCallbackProps) => void;
+  cacheKey?: any;
 };
-export declare const Center: ForwardRefComponent<JSX.IntrinsicElements['group'] & CenterProps, Group>;
+export declare const Center: ForwardRefComponent<
+  JSX_IntrinsicElements["group"] & CenterProps,
+  Group
+>;
diff --git a/core/Clone.d.ts b/core/Clone.d.ts
index cf95554052a40dbf815610bcdcb24a66e56b7176..426ccdf9bc901923d7a8f1ff7f3c66cb5447cb32 100644
--- a/core/Clone.d.ts
+++ b/core/Clone.d.ts
@@ -1,15 +1,21 @@
-import * as THREE from 'three';
-import * as React from 'react';
-import { MeshProps } from '@react-three/fiber';
-import { ForwardRefComponent } from '../helpers/ts-utils';
+import * as THREE from "three";
+import * as React from "react";
+import { MeshProps } from "@react-three/fiber";
+import { ForwardRefComponent } from "../helpers/ts-utils";
 export type CloneProps = {
-    object: THREE.Object3D | THREE.Object3D[];
-    children?: React.ReactNode;
-    deep?: boolean | 'materialsOnly' | 'geometriesOnly';
-    keys?: string[];
-    inject?: MeshProps | React.ReactNode | ((object: THREE.Object3D) => React.ReactNode);
-    castShadow?: boolean;
-    receiveShadow?: boolean;
-    isChild?: boolean;
+  object: THREE.Object3D | THREE.Object3D[];
+  children?: React.ReactNode;
+  deep?: boolean | "materialsOnly" | "geometriesOnly";
+  keys?: string[];
+  inject?:
+    | MeshProps
+    | React.ReactNode
+    | ((object: THREE.Object3D) => React.ReactNode);
+  castShadow?: boolean;
+  receiveShadow?: boolean;
+  isChild?: boolean;
 };
-export declare const Clone: ForwardRefComponent<Omit<JSX.IntrinsicElements['group'], 'children'> & CloneProps, THREE.Group>;
+export declare const Clone: ForwardRefComponent<
+  Omit<JSX_IntrinsicElements["group"], "children"> & CloneProps,
+  THREE.Group
+>;
diff --git a/core/Cloud.d.ts b/core/Cloud.d.ts
index ac5335eb742d2a69875ca72fd3db072c50618cb7..1abbab2b90032e583aba6dcda41683ce1ad1b249 100644
--- a/core/Cloud.d.ts
+++ b/core/Cloud.d.ts
@@ -1,59 +1,78 @@
-import * as React from 'react';
-import { Color, Group, Vector3, Material, MeshLambertMaterial, Matrix4 } from 'three';
-import { MaterialNode, ReactThreeFiber } from '@react-three/fiber';
+import * as React from "react";
+import {
+  Color,
+  Group,
+  Vector3,
+  Material,
+  MeshLambertMaterial,
+  Matrix4,
+} from "three";
+import { MaterialNode, ReactThreeFiber } from "@react-three/fiber";
 declare global {
-    namespace JSX {
-        interface IntrinsicElements {
-            cloudMaterial: MaterialNode<MeshLambertMaterial, typeof MeshLambertMaterial>;
-        }
+  namespace JSX {
+    interface JSX_IntrinsicElements {
+      cloudMaterial: MaterialNode<
+        MeshLambertMaterial,
+        typeof MeshLambertMaterial
+      >;
     }
+  }
 }
 type CloudState = {
-    uuid: string;
-    index: number;
-    segments: number;
-    dist: number;
-    matrix: Matrix4;
-    bounds: Vector3;
-    position: Vector3;
-    volume: number;
-    length: number;
-    ref: React.MutableRefObject<Group>;
-    speed: number;
-    growth: number;
-    opacity: number;
-    fade: number;
-    density: number;
-    rotation: number;
-    rotationFactor: number;
-    color: Color;
+  uuid: string;
+  index: number;
+  segments: number;
+  dist: number;
+  matrix: Matrix4;
+  bounds: Vector3;
+  position: Vector3;
+  volume: number;
+  length: number;
+  ref: React.MutableRefObject<Group>;
+  speed: number;
+  growth: number;
+  opacity: number;
+  fade: number;
+  density: number;
+  rotation: number;
+  rotationFactor: number;
+  color: Color;
 };
-type CloudsProps = JSX.IntrinsicElements['group'] & {
-    texture?: string;
-    limit?: number;
-    range?: number;
-    material?: typeof Material;
-    frustumCulled?: boolean;
+type CloudsProps = JSX_IntrinsicElements["group"] & {
+  texture?: string;
+  limit?: number;
+  range?: number;
+  material?: typeof Material;
+  frustumCulled?: boolean;
 };
-type CloudProps = JSX.IntrinsicElements['group'] & {
-    seed?: number;
-    segments?: number;
-    bounds?: ReactThreeFiber.Vector3;
-    concentrate?: 'random' | 'inside' | 'outside';
-    scale?: ReactThreeFiber.Vector3;
+type CloudProps = JSX_IntrinsicElements["group"] & {
+  seed?: number;
+  segments?: number;
+  bounds?: ReactThreeFiber.Vector3;
+  concentrate?: "random" | "inside" | "outside";
+  scale?: ReactThreeFiber.Vector3;
+  volume?: number;
+  smallestVolume?: number;
+  distribute?: (
+    cloud: CloudState,
+    index: number
+  ) => {
+    point: Vector3;
     volume?: number;
-    smallestVolume?: number;
-    distribute?: (cloud: CloudState, index: number) => {
-        point: Vector3;
-        volume?: number;
-    };
-    growth?: number;
-    speed?: number;
-    fade?: number;
-    opacity?: number;
-    color?: ReactThreeFiber.Color;
+  };
+  growth?: number;
+  speed?: number;
+  fade?: number;
+  opacity?: number;
+  color?: ReactThreeFiber.Color;
 };
-export declare const Clouds: React.ForwardRefExoticComponent<Omit<CloudsProps, "ref"> & React.RefAttributes<Group>>;
-export declare const CloudInstance: React.ForwardRefExoticComponent<Omit<CloudProps, "ref"> & React.RefAttributes<Group>>;
-export declare const Cloud: React.ForwardRefExoticComponent<Omit<CloudProps, "ref"> & React.RefAttributes<Group>>;
+export declare const Clouds: React.ForwardRefExoticComponent<
+  Omit<CloudsProps, "ref"> & React.RefAttributes<Group>
+>;
+export declare const CloudInstance: React.ForwardRefExoticComponent<
+  Omit<CloudProps, "ref"> & React.RefAttributes<Group>
+>;
+export declare const Cloud: React.ForwardRefExoticComponent<
+  Omit<CloudProps, "ref"> & React.RefAttributes<Group>
+>;
 export {};
diff --git a/core/ContactShadows.d.ts b/core/ContactShadows.d.ts
index 7574dafa6b25adeabfc1f49e49c5ef3dce3a85f3..47d1296f9a263e53dfa06702e313360bf362b7c9 100644
--- a/core/ContactShadows.d.ts
+++ b/core/ContactShadows.d.ts
@@ -1,17 +1,20 @@
-import * as THREE from 'three';
-import { ForwardRefComponent } from '../helpers/ts-utils';
+import * as THREE from "three";
+import { ForwardRefComponent } from "../helpers/ts-utils";
 export type ContactShadowsProps = {
-    opacity?: number;
-    width?: number;
-    height?: number;
-    blur?: number;
-    near?: number;
-    far?: number;
-    smooth?: boolean;
-    resolution?: number;
-    frames?: number;
-    scale?: number | [x: number, y: number];
-    color?: THREE.ColorRepresentation;
-    depthWrite?: boolean;
+  opacity?: number;
+  width?: number;
+  height?: number;
+  blur?: number;
+  near?: number;
+  far?: number;
+  smooth?: boolean;
+  resolution?: number;
+  frames?: number;
+  scale?: number | [x: number, y: number];
+  color?: THREE.ColorRepresentation;
+  depthWrite?: boolean;
 };
-export declare const ContactShadows: ForwardRefComponent<Omit<JSX.IntrinsicElements['group'], 'scale'> & ContactShadowsProps, THREE.Group>;
+export declare const ContactShadows: ForwardRefComponent<
+  Omit<JSX_IntrinsicElements["group"], "scale"> & ContactShadowsProps,
+  THREE.Group
+>;
diff --git a/core/CubeCamera.d.ts b/core/CubeCamera.d.ts
index b202d7cd8639931c77d8b6101be1eb1bbf74b497..c7194bd11f62ebec7c43da705c77bcf898a00ad8 100644
--- a/core/CubeCamera.d.ts
+++ b/core/CubeCamera.d.ts
@@ -1,21 +1,36 @@
-import * as THREE from 'three';
-import { Fog, FogExp2, Texture } from 'three';
-import * as React from 'react';
+import * as THREE from "three";
+import { Fog, FogExp2, Texture } from "three";
+import * as React from "react";
 export type CubeCameraOptions = {
-    resolution?: number;
-    near?: number;
-    far?: number;
-    envMap?: THREE.Texture;
-    fog?: Fog | FogExp2;
+  resolution?: number;
+  near?: number;
+  far?: number;
+  envMap?: THREE.Texture;
+  fog?: Fog | FogExp2;
 };
-export declare function useCubeCamera({ resolution, near, far, envMap, fog }?: CubeCameraOptions): {
-    fbo: THREE.WebGLCubeRenderTarget;
-    camera: THREE.CubeCamera;
-    update: () => void;
+export declare function useCubeCamera({
+  resolution,
+  near,
+  far,
+  envMap,
+  fog,
+}?: CubeCameraOptions): {
+  fbo: THREE.WebGLCubeRenderTarget;
+  camera: THREE.CubeCamera;
+  update: () => void;
 };
-type Props = Omit<JSX.IntrinsicElements['group'], 'children'> & {
-    children?: (tex: Texture) => React.ReactNode;
-    frames?: number;
+type Props = Omit<JSX_IntrinsicElements["group"], "children"> & {
+  children?: (tex: Texture) => React.ReactNode;
+  frames?: number;
 } & CubeCameraOptions;
-export declare function CubeCamera({ children, frames, resolution, near, far, envMap, fog, ...props }: Props): React.JSX.Element;
+export declare function CubeCamera({
+  children,
+  frames,
+  resolution,
+  near,
+  far,
+  envMap,
+  fog,
+  ...props
+}: Props): React.JSX.Element;
 export {};
diff --git a/core/CurveModifier.d.ts b/core/CurveModifier.d.ts
index 00fb70c7ac1bb483c451f8c781445d7c231e82cb..4c183a3c31a30150200007f5bdae187e52487710 100644
--- a/core/CurveModifier.d.ts
+++ b/core/CurveModifier.d.ts
@@ -1,10 +1,13 @@
-import * as React from 'react';
-import * as THREE from 'three';
-import { Flow } from 'three-stdlib';
-import { ForwardRefComponent } from '../helpers/ts-utils';
+import * as React from "react";
+import * as THREE from "three";
+import { Flow } from "three-stdlib";
+import { ForwardRefComponent } from "../helpers/ts-utils";
 export interface CurveModifierProps {
-    children: React.ReactElement<JSX.IntrinsicElements['mesh']>;
-    curve?: THREE.Curve<THREE.Vector3>;
+  children: React.ReactElement<JSX_IntrinsicElements["mesh"]>;
+  curve?: THREE.Curve<THREE.Vector3>;
 }
-export type CurveModifierRef = Pick<Flow, 'moveAlongCurve'>;
-export declare const CurveModifier: ForwardRefComponent<CurveModifierProps, CurveModifierRef>;
+export type CurveModifierRef = Pick<Flow, "moveAlongCurve">;
+export declare const CurveModifier: ForwardRefComponent<
+  CurveModifierProps,
+  CurveModifierRef
+>;
diff --git a/core/Decal.d.ts b/core/Decal.d.ts
index 7e6e8b1ca4a19ad8470cabfaa9ce98232114d7bc..bbaada3317e2977c476918ecf7b907fe0a3e26fc 100644
--- a/core/Decal.d.ts
+++ b/core/Decal.d.ts
@@ -1,16 +1,16 @@
-import * as React from 'react';
-import * as THREE from 'three';
-import * as FIBER from '@react-three/fiber';
-import { ForwardRefComponent } from '../helpers/ts-utils';
-export type DecalProps = Omit<JSX.IntrinsicElements['mesh'], 'children'> & {
-    debug?: boolean;
-    mesh?: React.MutableRefObject<THREE.Mesh>;
-    position?: FIBER.Vector3;
-    rotation?: FIBER.Euler | number;
-    scale?: FIBER.Vector3;
-    map?: THREE.Texture;
-    children?: React.ReactNode;
-    polygonOffsetFactor?: number;
-    depthTest?: boolean;
+import * as React from "react";
+import * as THREE from "three";
+import * as FIBER from "@react-three/fiber";
+import { ForwardRefComponent } from "../helpers/ts-utils";
+export type DecalProps = Omit<JSX_IntrinsicElements["mesh"], "children"> & {
+  debug?: boolean;
+  mesh?: React.MutableRefObject<THREE.Mesh>;
+  position?: FIBER.Vector3;
+  rotation?: FIBER.Euler | number;
+  scale?: FIBER.Vector3;
+  map?: THREE.Texture;
+  children?: React.ReactNode;
+  polygonOffsetFactor?: number;
+  depthTest?: boolean;
 };
 export declare const Decal: ForwardRefComponent<DecalProps, THREE.Mesh>;
diff --git a/core/Detailed.d.ts b/core/Detailed.d.ts
index db4b378efac6297814657244a804762898d0f909..9671f5bb66c27878fde6a35d0efa2364e185b910 100644
--- a/core/Detailed.d.ts
+++ b/core/Detailed.d.ts
@@ -1,10 +1,10 @@
-import * as React from 'react';
-import { LOD, Object3D } from 'three';
-import { ForwardRefComponent } from '../helpers/ts-utils';
-type Props = JSX.IntrinsicElements['lOD'] & {
-    children: React.ReactElement<Object3D>[];
-    hysteresis?: number;
-    distances: number[];
+import * as React from "react";
+import { LOD, Object3D } from "three";
+import { ForwardRefComponent } from "../helpers/ts-utils";
+type Props = JSX_IntrinsicElements["lOD"] & {
+  children: React.ReactElement<Object3D>[];
+  hysteresis?: number;
+  distances: number[];
 };
 export declare const Detailed: ForwardRefComponent<Props, LOD>;
 export {};
diff --git a/core/Effects.d.ts b/core/Effects.d.ts
index 573fb243463a19c5335125800032a926068b9ed9..58f7c89da5913dd55306466fae3172b332eb4c66 100644
--- a/core/Effects.d.ts
+++ b/core/Effects.d.ts
@@ -17,7 +17,7 @@ type Props = ReactThreeFiber.Node<EffectComposer, typeof EffectComposer> & {
 };
 declare global {
     namespace JSX {
-        interface IntrinsicElements {
+        interface JSX_IntrinsicElements {
             effectComposer: ReactThreeFiber.Node<EffectComposer, typeof EffectComposer>;
             renderPass: ReactThreeFiber.Node<RenderPass, typeof RenderPass>;
             shaderPass: ReactThreeFiber.Node<ShaderPass, typeof ShaderPass>;
diff --git a/core/Environment.d.ts b/core/Environment.d.ts
index e590f1cbb3ed5fb029636b42160807b337753162..e24aa901a0ee25820be57eb7541cd6972147f523 100644
--- a/core/Environment.d.ts
+++ b/core/Environment.d.ts
@@ -31,7 +31,7 @@ export declare function EnvironmentCube({ background, scene, blur, backgroundBlu
 export declare function EnvironmentPortal({ children, near, far, resolution, frames, map, background, blur, backgroundBlurriness, backgroundIntensity, backgroundRotation, environmentIntensity, environmentRotation, scene, files, path, preset, extensions, }: EnvironmentProps): React.JSX.Element;
 declare global {
     namespace JSX {
-        interface IntrinsicElements {
+        interface JSX_IntrinsicElements {
             groundProjectedEnvImpl: Object3DNode<GroundProjectedEnvImpl, typeof GroundProjectedEnvImpl>;
         }
     }
diff --git a/core/Fisheye.d.ts b/core/Fisheye.d.ts
index 9f491ede8d59f0465a21d658f57d661aa0ffb21f..7fbe51b215a26cce4051a376ef473669211705be 100644
--- a/core/Fisheye.d.ts
+++ b/core/Fisheye.d.ts
@@ -1,9 +1,16 @@
-import * as React from 'react';
-export type FisheyeProps = JSX.IntrinsicElements['mesh'] & {
-    zoom?: number;
-    segments?: number;
-    resolution?: number;
-    children: React.ReactNode;
-    renderPriority?: number;
+import * as React from "react";
+export type FisheyeProps = JSX_IntrinsicElements["mesh"] & {
+  zoom?: number;
+  segments?: number;
+  resolution?: number;
+  children: React.ReactNode;
+  renderPriority?: number;
 };
-export declare function Fisheye({ renderPriority, zoom, segments, children, resolution, ...props }: FisheyeProps): React.JSX.Element;
+export declare function Fisheye({
+  renderPriority,
+  zoom,
+  segments,
+  children,
+  resolution,
+  ...props
+}: FisheyeProps): React.JSX.Element;
diff --git a/core/Float.d.ts b/core/Float.d.ts
index 5913f9f3ae2b3c7a1bf5072e0d40b492f20528ec..dfb174cd7d879ced344194524325564fce6b6030 100644
--- a/core/Float.d.ts
+++ b/core/Float.d.ts
@@ -1,13 +1,13 @@
-import * as React from 'react';
-import * as THREE from 'three';
-import { ForwardRefComponent } from '../helpers/ts-utils';
-export type FloatProps = JSX.IntrinsicElements['group'] & {
-    enabled?: boolean;
-    speed?: number;
-    rotationIntensity?: number;
-    floatIntensity?: number;
-    children?: React.ReactNode;
-    floatingRange?: [number?, number?];
-    autoInvalidate?: boolean;
+import * as React from "react";
+import * as THREE from "three";
+import { ForwardRefComponent } from "../helpers/ts-utils";
+export type FloatProps = JSX_IntrinsicElements["group"] & {
+  enabled?: boolean;
+  speed?: number;
+  rotationIntensity?: number;
+  floatIntensity?: number;
+  children?: React.ReactNode;
+  floatingRange?: [number?, number?];
+  autoInvalidate?: boolean;
 };
 export declare const Float: ForwardRefComponent<FloatProps, THREE.Group>;
diff --git a/core/GizmoHelper.d.ts b/core/GizmoHelper.d.ts
index 4d416374a24030fcf6dcc1848b7a2f1ca253e2b5..c20feaf61915cb36e98c8dc14f0df947774c8abf 100644
--- a/core/GizmoHelper.d.ts
+++ b/core/GizmoHelper.d.ts
@@ -1,15 +1,31 @@
-import { Vector3 } from 'three';
+import { Vector3 } from "three";
 type GizmoHelperContext = {
-    tweenCamera: (direction: Vector3) => void;
+  tweenCamera: (direction: Vector3) => void;
 };
 export declare const useGizmoContext: () => GizmoHelperContext;
-export type GizmoHelperProps = JSX.IntrinsicElements['group'] & {
-    alignment?: 'top-left' | 'top-right' | 'bottom-right' | 'bottom-left' | 'bottom-center' | 'center-right' | 'center-left' | 'center-center' | 'top-center';
-    margin?: [number, number];
-    renderPriority?: number;
-    autoClear?: boolean;
-    onUpdate?: () => void;
-    onTarget?: () => Vector3;
+export type GizmoHelperProps = JSX_IntrinsicElements["group"] & {
+  alignment?:
+    | "top-left"
+    | "top-right"
+    | "bottom-right"
+    | "bottom-left"
+    | "bottom-center"
+    | "center-right"
+    | "center-left"
+    | "center-center"
+    | "top-center";
+  margin?: [number, number];
+  renderPriority?: number;
+  autoClear?: boolean;
+  onUpdate?: () => void;
+  onTarget?: () => Vector3;
 };
-export declare const GizmoHelper: ({ alignment, margin, renderPriority, onUpdate, onTarget, children, }: GizmoHelperProps) => any;
+export declare const GizmoHelper: ({
+  alignment,
+  margin,
+  renderPriority,
+  onUpdate,
+  onTarget,
+  children,
+}: GizmoHelperProps) => any;
 export {};
diff --git a/core/GizmoViewport.d.ts b/core/GizmoViewport.d.ts
index b2822a491074914ca99d921d1d261410d4adce7b..255b5b49a42ec86600f8192796e5bee5b2dc530f 100644
--- a/core/GizmoViewport.d.ts
+++ b/core/GizmoViewport.d.ts
@@ -1,16 +1,28 @@
-import * as React from 'react';
-import { ThreeEvent } from '@react-three/fiber';
-type GizmoViewportProps = JSX.IntrinsicElements['group'] & {
-    axisColors?: [string, string, string];
-    axisScale?: [number, number, number];
-    labels?: [string, string, string];
-    axisHeadScale?: number;
-    labelColor?: string;
-    hideNegativeAxes?: boolean;
-    hideAxisHeads?: boolean;
-    disabled?: boolean;
-    font?: string;
-    onClick?: (e: ThreeEvent<MouseEvent>) => null;
+import * as React from "react";
+import { ThreeEvent } from "@react-three/fiber";
+type GizmoViewportProps = JSX_IntrinsicElements["group"] & {
+  axisColors?: [string, string, string];
+  axisScale?: [number, number, number];
+  labels?: [string, string, string];
+  axisHeadScale?: number;
+  labelColor?: string;
+  hideNegativeAxes?: boolean;
+  hideAxisHeads?: boolean;
+  disabled?: boolean;
+  font?: string;
+  onClick?: (e: ThreeEvent<MouseEvent>) => null;
 };
-export declare const GizmoViewport: ({ hideNegativeAxes, hideAxisHeads, disabled, font, axisColors, axisHeadScale, axisScale, labels, labelColor, onClick, ...props }: GizmoViewportProps) => React.JSX.Element;
+export declare const GizmoViewport: ({
+  hideNegativeAxes,
+  hideAxisHeads,
+  disabled,
+  font,
+  axisColors,
+  axisHeadScale,
+  axisScale,
+  labels,
+  labelColor,
+  onClick,
+  ...props
+}: GizmoViewportProps) => React.JSX.Element;
 export {};
diff --git a/core/GradientTexture.d.ts b/core/GradientTexture.d.ts
index b3b325511a98d7b7afd8ef0243319f682f9cfd4e..1cf6ebfd95c171400073c012579a2ab185d0e2b6 100644
--- a/core/GradientTexture.d.ts
+++ b/core/GradientTexture.d.ts
@@ -1,18 +1,27 @@
-import * as React from 'react';
-import * as THREE from 'three';
+import * as React from "react";
+import * as THREE from "three";
 export declare enum GradientType {
-    Linear = "linear",
-    Radial = "radial"
+  Linear = "linear",
+  Radial = "radial",
 }
 type Props = {
-    stops: Array<number>;
-    colors: Array<THREE.ColorRepresentation>;
-    attach?: string;
-    size?: number;
-    width?: number;
-    type?: GradientType;
-    innerCircleRadius?: number;
-    outerCircleRadius?: string | number;
-} & Omit<JSX.IntrinsicElements['texture'], 'type'>;
-export declare function GradientTexture({ stops, colors, size, width, type, innerCircleRadius, outerCircleRadius, ...props }: Props): React.JSX.Element;
+  stops: Array<number>;
+  colors: Array<THREE.ColorRepresentation>;
+  attach?: string;
+  size?: number;
+  width?: number;
+  type?: GradientType;
+  innerCircleRadius?: number;
+  outerCircleRadius?: string | number;
+} & Omit<JSX_IntrinsicElements["texture"], "type">;
+export declare function GradientTexture({
+  stops,
+  colors,
+  size,
+  width,
+  type,
+  innerCircleRadius,
+  outerCircleRadius,
+  ...props
+}: Props): React.JSX.Element;
 export {};
diff --git a/core/Grid.d.ts b/core/Grid.d.ts
index 88c1a3a272afffd2bdfd4e0dbb2b64e2de48a124..e93b5ac3340031c3aa143d96a8610a473dab3aaa 100644
--- a/core/Grid.d.ts
+++ b/core/Grid.d.ts
@@ -1,27 +1,30 @@
-import * as THREE from 'three';
-import { ForwardRefComponent } from '../helpers/ts-utils';
+import * as THREE from "three";
+import { ForwardRefComponent } from "../helpers/ts-utils";
 export type GridMaterialType = {
-    cellSize?: number;
-    cellThickness?: number;
-    cellColor?: THREE.ColorRepresentation;
-    sectionSize?: number;
-    sectionThickness?: number;
-    sectionColor?: THREE.ColorRepresentation;
-    followCamera?: boolean;
-    infiniteGrid?: boolean;
-    fadeDistance?: number;
-    fadeStrength?: number;
-    fadeFrom?: number;
-    side?: THREE.Side;
+  cellSize?: number;
+  cellThickness?: number;
+  cellColor?: THREE.ColorRepresentation;
+  sectionSize?: number;
+  sectionThickness?: number;
+  sectionColor?: THREE.ColorRepresentation;
+  followCamera?: boolean;
+  infiniteGrid?: boolean;
+  fadeDistance?: number;
+  fadeStrength?: number;
+  fadeFrom?: number;
+  side?: THREE.Side;
 };
 export type GridProps = GridMaterialType & {
-    args?: ConstructorParameters<typeof THREE.PlaneGeometry>;
+  args?: ConstructorParameters<typeof THREE.PlaneGeometry>;
 };
 declare global {
-    namespace JSX {
-        interface IntrinsicElements {
-            gridMaterial: JSX.IntrinsicElements['shaderMaterial'] & GridMaterialType;
-        }
+  namespace JSX {
+    interface JSX_IntrinsicElements {
+      gridMaterial: JSX_IntrinsicElements["shaderMaterial"] & GridMaterialType;
     }
+  }
 }
-export declare const Grid: ForwardRefComponent<Omit<JSX.IntrinsicElements['mesh'], 'args'> & GridProps, THREE.Mesh>;
+export declare const Grid: ForwardRefComponent<
+  Omit<JSX_IntrinsicElements["mesh"], "args"> & GridProps,
+  THREE.Mesh
+>;
diff --git a/core/Image.d.ts b/core/Image.d.ts
index 07e3b1ff4a369dbd26531fdb290144fd79609efa..bd5cec55ceadb078fff7fed585ad7f45a08331b5 100644
--- a/core/Image.d.ts
+++ b/core/Image.d.ts
@@ -1,40 +1,43 @@
-import * as THREE from 'three';
-import { Color } from '@react-three/fiber';
-import { ForwardRefComponent } from '../helpers/ts-utils';
-export type ImageProps = Omit<JSX.IntrinsicElements['mesh'], 'scale'> & {
-    segments?: number;
-    scale?: number | [number, number];
-    color?: Color;
-    zoom?: number;
-    radius?: number;
-    grayscale?: number;
-    toneMapped?: boolean;
-    transparent?: boolean;
-    opacity?: number;
-    side?: THREE.Side;
-} & ({
-    texture: THREE.Texture;
-    url?: never;
-} | {
-    texture?: never;
-    url: string;
-});
-type ImageMaterialType = JSX.IntrinsicElements['shaderMaterial'] & {
-    scale?: number[];
-    imageBounds?: number[];
-    radius?: number;
-    resolution?: number;
-    color?: Color;
-    map: THREE.Texture;
-    zoom?: number;
-    grayscale?: number;
+import * as THREE from "three";
+import { Color } from "@react-three/fiber";
+import { ForwardRefComponent } from "../helpers/ts-utils";
+export type ImageProps = Omit<JSX_IntrinsicElements["mesh"], "scale"> & {
+  segments?: number;
+  scale?: number | [number, number];
+  color?: Color;
+  zoom?: number;
+  radius?: number;
+  grayscale?: number;
+  toneMapped?: boolean;
+  transparent?: boolean;
+  opacity?: number;
+  side?: THREE.Side;
+} & (
+    | {
+        texture: THREE.Texture;
+        url?: never;
+      }
+    | {
+        texture?: never;
+        url: string;
+      }
+  );
+type ImageMaterialType = JSX_IntrinsicElements["shaderMaterial"] & {
+  scale?: number[];
+  imageBounds?: number[];
+  radius?: number;
+  resolution?: number;
+  color?: Color;
+  map: THREE.Texture;
+  zoom?: number;
+  grayscale?: number;
 };
 declare global {
-    namespace JSX {
-        interface IntrinsicElements {
-            imageMaterial: ImageMaterialType;
-        }
+  namespace JSX {
+    interface JSX_IntrinsicElements {
+      imageMaterial: ImageMaterialType;
     }
+  }
 }
 export declare const Image: ForwardRefComponent<ImageProps, THREE.Mesh>;
 export {};
diff --git a/core/Instances.d.ts b/core/Instances.d.ts
index eb306d14204d1cbc3298599520a865044fc1f3ad..f919d8506e602486ac65ad1e0194df1d06aeb122 100644
--- a/core/Instances.d.ts
+++ b/core/Instances.d.ts
@@ -1,72 +1,113 @@
-import * as THREE from 'three';
-import * as React from 'react';
-import { ReactThreeFiber } from '@react-three/fiber';
-import { ForwardRefComponent } from '../helpers/ts-utils';
+import * as THREE from "three";
+import * as React from "react";
+import { ReactThreeFiber } from "@react-three/fiber";
+import { ForwardRefComponent } from "../helpers/ts-utils";
 declare global {
-    namespace JSX {
-        interface IntrinsicElements {
-            positionMesh: ReactThreeFiber.Object3DNode<PositionMesh, typeof PositionMesh>;
-        }
+  namespace JSX {
+    interface JSX_IntrinsicElements {
+      positionMesh: ReactThreeFiber.Object3DNode<
+        PositionMesh,
+        typeof PositionMesh
+      >;
     }
+  }
 }
 type Api = {
-    getParent: () => React.MutableRefObject<InstancedMesh>;
-    subscribe: <T>(ref: React.MutableRefObject<T>) => void;
+  getParent: () => React.MutableRefObject<InstancedMesh>;
+  subscribe: <T>(ref: React.MutableRefObject<T>) => void;
 };
-export type InstancesProps = JSX.IntrinsicElements['instancedMesh'] & {
-    context?: React.Context<Api>;
-    range?: number;
-    limit?: number;
-    frames?: number;
+export type InstancesProps = JSX_IntrinsicElements["instancedMesh"] & {
+  context?: React.Context<Api>;
+  range?: number;
+  limit?: number;
+  frames?: number;
 };
-export type InstanceProps = JSX.IntrinsicElements['positionMesh'] & {
-    context?: React.Context<Api>;
+export type InstanceProps = JSX_IntrinsicElements["positionMesh"] & {
+  context?: React.Context<Api>;
 };
-export type InstancedAttributeProps = JSX.IntrinsicElements['instancedBufferAttribute'] & {
+export type InstancedAttributeProps =
+  JSX_IntrinsicElements["instancedBufferAttribute"] & {
     name: string;
     defaultValue: any;
     normalized?: boolean;
     usage?: number;
-};
-type InstancedMesh = Omit<THREE.InstancedMesh, 'instanceMatrix' | 'instanceColor'> & {
-    instanceMatrix: THREE.InstancedBufferAttribute;
-    instanceColor: THREE.InstancedBufferAttribute;
+  };
+type InstancedMesh = Omit<
+  THREE.InstancedMesh,
+  "instanceMatrix" | "instanceColor"
+> & {
+  instanceMatrix: THREE.InstancedBufferAttribute;
+  instanceColor: THREE.InstancedBufferAttribute;
 };
 export declare class PositionMesh extends THREE.Group {
-    color: THREE.Color;
-    instance: React.MutableRefObject<THREE.InstancedMesh | undefined>;
-    instanceKey: React.MutableRefObject<JSX.IntrinsicElements['positionMesh'] | undefined>;
-    constructor();
-    get geometry(): THREE.BufferGeometry | undefined;
-    raycast(raycaster: THREE.Raycaster, intersects: THREE.Intersection[]): void;
+  color: THREE.Color;
+  instance: React.MutableRefObject<THREE.InstancedMesh | undefined>;
+  instanceKey: React.MutableRefObject<
+    JSX_IntrinsicElements["positionMesh"] | undefined
+  >;
+  constructor();
+  get geometry(): THREE.BufferGeometry | undefined;
+  raycast(raycaster: THREE.Raycaster, intersects: THREE.Intersection[]): void;
 }
-export declare const Instance: React.ForwardRefExoticComponent<Omit<InstanceProps, "ref"> & React.RefAttributes<unknown>>;
-export declare const Instances: ForwardRefComponent<InstancesProps, THREE.InstancedMesh>;
+export declare const Instance: React.ForwardRefExoticComponent<
+  Omit<InstanceProps, "ref"> & React.RefAttributes<unknown>
+>;
+export declare const Instances: ForwardRefComponent<
+  InstancesProps,
+  THREE.InstancedMesh
+>;
 export interface MergedProps extends InstancesProps {
-    meshes: THREE.Mesh[];
-    children: React.ReactNode;
+  meshes: THREE.Mesh[];
+  children: React.ReactNode;
 }
 export declare const Merged: ForwardRefComponent<any, THREE.Group>;
-export declare function createInstances<T = InstanceProps>(): readonly [React.ForwardRefExoticComponent<Omit<InstancesProps, "ref"> & React.RefAttributes<THREE.InstancedMesh<THREE.BufferGeometry, THREE.Material | THREE.Material[]>>>, React.ForwardRefExoticComponent<React.PropsWithoutRef<T & Omit<ReactThreeFiber.ExtendedColors<ReactThreeFiber.Overwrite<Partial<PositionMesh>, ReactThreeFiber.NodeProps<PositionMesh, typeof PositionMesh>>>, ReactThreeFiber.NonFunctionKeys<{
-    position?: ReactThreeFiber.Vector3;
-    up?: ReactThreeFiber.Vector3;
-    scale?: ReactThreeFiber.Vector3;
-    rotation?: ReactThreeFiber.Euler;
-    matrix?: ReactThreeFiber.Matrix4;
-    quaternion?: ReactThreeFiber.Quaternion;
-    layers?: ReactThreeFiber.Layers;
-    dispose?: (() => void) | null;
-}>> & {
-    position?: ReactThreeFiber.Vector3;
-    up?: ReactThreeFiber.Vector3;
-    scale?: ReactThreeFiber.Vector3;
-    rotation?: ReactThreeFiber.Euler;
-    matrix?: ReactThreeFiber.Matrix4;
-    quaternion?: ReactThreeFiber.Quaternion;
-    layers?: ReactThreeFiber.Layers;
-    dispose?: (() => void) | null;
-} & import("@react-three/fiber/dist/declarations/src/core/events").EventHandlers & {
-    context?: React.Context<Api>;
-}> & React.RefAttributes<PositionMesh & T>>];
-export declare const InstancedAttribute: React.ForwardRefExoticComponent<Omit<InstancedAttributeProps, "ref"> & React.RefAttributes<unknown>>;
+export declare function createInstances<T = InstanceProps>(): readonly [
+  React.ForwardRefExoticComponent<
+    Omit<InstancesProps, "ref"> &
+      React.RefAttributes<
+        THREE.InstancedMesh<
+          THREE.BufferGeometry,
+          THREE.Material | THREE.Material[]
+        >
+      >
+  >,
+  React.ForwardRefExoticComponent<
+    React.PropsWithoutRef<
+      T &
+        Omit<
+          ReactThreeFiber.ExtendedColors<
+            ReactThreeFiber.Overwrite<
+              Partial<PositionMesh>,
+              ReactThreeFiber.NodeProps<PositionMesh, typeof PositionMesh>
+            >
+          >,
+          ReactThreeFiber.NonFunctionKeys<{
+            position?: ReactThreeFiber.Vector3;
+            up?: ReactThreeFiber.Vector3;
+            scale?: ReactThreeFiber.Vector3;
+            rotation?: ReactThreeFiber.Euler;
+            matrix?: ReactThreeFiber.Matrix4;
+            quaternion?: ReactThreeFiber.Quaternion;
+            layers?: ReactThreeFiber.Layers;
+            dispose?: (() => void) | null;
+          }>
+        > & {
+          position?: ReactThreeFiber.Vector3;
+          up?: ReactThreeFiber.Vector3;
+          scale?: ReactThreeFiber.Vector3;
+          rotation?: ReactThreeFiber.Euler;
+          matrix?: ReactThreeFiber.Matrix4;
+          quaternion?: ReactThreeFiber.Quaternion;
+          layers?: ReactThreeFiber.Layers;
+          dispose?: (() => void) | null;
+        } & import("@react-three/fiber/dist/declarations/src/core/events").EventHandlers & {
+          context?: React.Context<Api>;
+        }
+    > &
+      React.RefAttributes<PositionMesh & T>
+  >
+];
+export declare const InstancedAttribute: React.ForwardRefExoticComponent<
+  Omit<InstancedAttributeProps, "ref"> & React.RefAttributes<unknown>
+>;
 export {};
diff --git a/core/Lightformer.d.ts b/core/Lightformer.d.ts
index fa39df50e8578722022f0f69d140f580ffdfeca4..08e5edc211f5d4a3b8db4579f615af693dbeac84 100644
--- a/core/Lightformer.d.ts
+++ b/core/Lightformer.d.ts
@@ -1,15 +1,15 @@
-import { ReactThreeFiber } from '@react-three/fiber';
-import * as THREE from 'three';
-import { ForwardRefComponent } from '../helpers/ts-utils';
-export type LightProps = JSX.IntrinsicElements['mesh'] & {
-    args?: any[];
-    map?: THREE.Texture;
-    toneMapped?: boolean;
-    color?: ReactThreeFiber.Color;
-    form?: 'circle' | 'ring' | 'rect' | 'plane' | 'box' | any;
-    scale?: number | [number, number, number] | [number, number];
-    intensity?: number;
-    target?: boolean | [number, number, number] | THREE.Vector3;
-    light?: Partial<JSX.IntrinsicElements['pointLight']>;
+import { ReactThreeFiber } from "@react-three/fiber";
+import * as THREE from "three";
+import { ForwardRefComponent } from "../helpers/ts-utils";
+export type LightProps = JSX_IntrinsicElements["mesh"] & {
+  args?: any[];
+  map?: THREE.Texture;
+  toneMapped?: boolean;
+  color?: ReactThreeFiber.Color;
+  form?: "circle" | "ring" | "rect" | "plane" | "box" | any;
+  scale?: number | [number, number, number] | [number, number];
+  intensity?: number;
+  target?: boolean | [number, number, number] | THREE.Vector3;
+  light?: Partial<JSX_IntrinsicElements["pointLight"]>;
 };
 export declare const Lightformer: ForwardRefComponent<LightProps, THREE.Mesh>;
diff --git a/core/MarchingCubes.d.ts b/core/MarchingCubes.d.ts
index 99b771deef99520eabd7945eb04933b69fe2b260..621003a6d5bfed3fc51f345a60b6f4c973cbbbd7 100644
--- a/core/MarchingCubes.d.ts
+++ b/core/MarchingCubes.d.ts
@@ -1,24 +1,33 @@
-import * as THREE from 'three';
-import { Color } from 'three';
-import { MarchingCubes as MarchingCubesImpl } from 'three-stdlib';
-import { ForwardRefComponent } from '../helpers/ts-utils';
+import * as THREE from "three";
+import { Color } from "three";
+import { MarchingCubes as MarchingCubesImpl } from "three-stdlib";
+import { ForwardRefComponent } from "../helpers/ts-utils";
 export type MarchingCubesProps = {
-    resolution?: number;
-    maxPolyCount?: number;
-    enableUvs?: boolean;
-    enableColors?: boolean;
-} & JSX.IntrinsicElements['group'];
-export declare const MarchingCubes: ForwardRefComponent<MarchingCubesProps, MarchingCubesImpl>;
+  resolution?: number;
+  maxPolyCount?: number;
+  enableUvs?: boolean;
+  enableColors?: boolean;
+} & JSX_IntrinsicElements["group"];
+export declare const MarchingCubes: ForwardRefComponent<
+  MarchingCubesProps,
+  MarchingCubesImpl
+>;
 type MarchingCubeProps = {
-    strength?: number;
-    subtract?: number;
-    color?: Color;
-} & JSX.IntrinsicElements['group'];
-export declare const MarchingCube: ForwardRefComponent<MarchingCubeProps, THREE.Group>;
+  strength?: number;
+  subtract?: number;
+  color?: Color;
+} & JSX_IntrinsicElements["group"];
+export declare const MarchingCube: ForwardRefComponent<
+  MarchingCubeProps,
+  THREE.Group
+>;
 type MarchingPlaneProps = {
-    planeType?: 'x' | 'y' | 'z';
-    strength?: number;
-    subtract?: number;
-} & JSX.IntrinsicElements['group'];
-export declare const MarchingPlane: ForwardRefComponent<MarchingPlaneProps, THREE.Group>;
+  planeType?: "x" | "y" | "z";
+  strength?: number;
+  subtract?: number;
+} & JSX_IntrinsicElements["group"];
+export declare const MarchingPlane: ForwardRefComponent<
+  MarchingPlaneProps,
+  THREE.Group
+>;
 export {};
diff --git a/core/Mask.d.ts b/core/Mask.d.ts
index fe2c522da4b14ba26db0004c1de395f107102370..820ffe48efe82b1f2662380fd95414a95d284dde 100644
--- a/core/Mask.d.ts
+++ b/core/Mask.d.ts
@@ -1,17 +1,20 @@
-import * as THREE from 'three';
-import { ForwardRefComponent } from '../helpers/ts-utils';
-type Props = Omit<JSX.IntrinsicElements['mesh'], 'id'> & {
-    id: number;
-    colorWrite?: boolean;
-    depthWrite?: boolean;
+import * as THREE from "three";
+import { ForwardRefComponent } from "../helpers/ts-utils";
+type Props = Omit<JSX_IntrinsicElements["mesh"], "id"> & {
+  id: number;
+  colorWrite?: boolean;
+  depthWrite?: boolean;
 };
 export declare const Mask: ForwardRefComponent<Props, THREE.Mesh>;
-export declare function useMask(id: number, inverse?: boolean): {
-    stencilWrite: boolean;
-    stencilRef: number;
-    stencilFunc: 514 | 517;
-    stencilFail: 7680;
-    stencilZFail: 7680;
-    stencilZPass: 7680;
+export declare function useMask(
+  id: number,
+  inverse?: boolean
+): {
+  stencilWrite: boolean;
+  stencilRef: number;
+  stencilFunc: 514 | 517;
+  stencilFail: 7680;
+  stencilZFail: 7680;
+  stencilZPass: 7680;
 };
 export {};
diff --git a/core/MeshDiscardMaterial.d.ts b/core/MeshDiscardMaterial.d.ts
index 11bb69fec911c3acea5200a76d0317c358dece2d..43a365f25e3adc670a57482247c47f3fea33ceb3 100644
--- a/core/MeshDiscardMaterial.d.ts
+++ b/core/MeshDiscardMaterial.d.ts
@@ -1,11 +1,14 @@
-import { ShaderMaterial } from 'three';
-import { ReactThreeFiber } from '@react-three/fiber';
-import { ForwardRefComponent } from '../helpers/ts-utils';
+import { ShaderMaterial } from "three";
+import { ReactThreeFiber } from "@react-three/fiber";
+import { ForwardRefComponent } from "../helpers/ts-utils";
 declare global {
-    namespace JSX {
-        interface IntrinsicElements {
-            discardMaterialImpl: ReactThreeFiber.ShaderMaterialProps;
-        }
+  namespace JSX {
+    interface JSX_IntrinsicElements {
+      discardMaterialImpl: ReactThreeFiber.ShaderMaterialProps;
     }
+  }
 }
-export declare const MeshDiscardMaterial: ForwardRefComponent<JSX.IntrinsicElements['shaderMaterial'], ShaderMaterial>;
+export declare const MeshDiscardMaterial: ForwardRefComponent<
+  JSX_IntrinsicElements["shaderMaterial"],
+  ShaderMaterial
+>;
diff --git a/core/MeshDistortMaterial.d.ts b/core/MeshDistortMaterial.d.ts
index 7e888c64907fae02d273ced46fe0f8b97e216d2f..9e34d35f0978564c3db5f88f04d5111292b50cb2 100644
--- a/core/MeshDistortMaterial.d.ts
+++ b/core/MeshDistortMaterial.d.ts
@@ -1,41 +1,48 @@
-import { IUniform, MeshPhysicalMaterial, MeshPhysicalMaterialParameters } from 'three';
-import { ForwardRefComponent } from '../helpers/ts-utils';
-type DistortMaterialType = JSX.IntrinsicElements['meshPhysicalMaterial'] & {
-    time?: number;
-    distort?: number;
-    radius?: number;
+import {
+  IUniform,
+  MeshPhysicalMaterial,
+  MeshPhysicalMaterialParameters,
+} from "three";
+import { ForwardRefComponent } from "../helpers/ts-utils";
+type DistortMaterialType = JSX_IntrinsicElements["meshPhysicalMaterial"] & {
+  time?: number;
+  distort?: number;
+  radius?: number;
 };
 type Props = DistortMaterialType & {
-    speed?: number;
-    factor?: number;
+  speed?: number;
+  factor?: number;
 };
 declare global {
-    namespace JSX {
-        interface IntrinsicElements {
-            distortMaterialImpl: DistortMaterialType;
-        }
+  namespace JSX {
+    interface JSX_IntrinsicElements {
+      distortMaterialImpl: DistortMaterialType;
     }
+  }
 }
 interface Uniform<T> {
-    value: T;
+  value: T;
 }
 declare class DistortMaterialImpl extends MeshPhysicalMaterial {
-    _time: Uniform<number>;
-    _distort: Uniform<number>;
-    _radius: Uniform<number>;
-    constructor(parameters?: MeshPhysicalMaterialParameters);
-    onBeforeCompile(shader: {
-        vertexShader: string;
-        uniforms: {
-            [uniform: string]: IUniform;
-        };
-    }): void;
-    get time(): number;
-    set time(v: number);
-    get distort(): number;
-    set distort(v: number);
-    get radius(): number;
-    set radius(v: number);
+  _time: Uniform<number>;
+  _distort: Uniform<number>;
+  _radius: Uniform<number>;
+  constructor(parameters?: MeshPhysicalMaterialParameters);
+  onBeforeCompile(shader: {
+    vertexShader: string;
+    uniforms: {
+      [uniform: string]: IUniform;
+    };
+  }): void;
+  get time(): number;
+  set time(v: number);
+  get distort(): number;
+  set distort(v: number);
+  get radius(): number;
+  set radius(v: number);
 }
-export declare const MeshDistortMaterial: ForwardRefComponent<Props, DistortMaterialImpl>;
+export declare const MeshDistortMaterial: ForwardRefComponent<
+  Props,
+  DistortMaterialImpl
+>;
 export {};
diff --git a/core/MeshPortalMaterial.d.ts b/core/MeshPortalMaterial.d.ts
index f09b2105ae216bdcd56170388e0f780067823388..feaa236a00f1a25b333e92c7cbd9b909c52f16a3 100644
--- a/core/MeshPortalMaterial.d.ts
+++ b/core/MeshPortalMaterial.d.ts
@@ -1,28 +1,30 @@
-import * as THREE from 'three';
-import * as React from 'react';
-import { ReactThreeFiber } from '@react-three/fiber';
+import * as THREE from "three";
+import * as React from "react";
+import { ReactThreeFiber } from "@react-three/fiber";
 export type PortalMaterialType = {
-    resolution: ReactThreeFiber.Vector2;
-    blur: number;
-    blend: number;
-    size?: number;
-    sdf?: THREE.Texture;
-    map?: THREE.Texture;
-} & JSX.IntrinsicElements['shaderMaterial'];
+  resolution: ReactThreeFiber.Vector2;
+  blur: number;
+  blend: number;
+  size?: number;
+  sdf?: THREE.Texture;
+  map?: THREE.Texture;
+} & JSX_IntrinsicElements["shaderMaterial"];
 declare global {
-    namespace JSX {
-        interface IntrinsicElements {
-            portalMaterialImpl: PortalMaterialType;
-        }
+  namespace JSX {
+    interface JSX_IntrinsicElements {
+      portalMaterialImpl: PortalMaterialType;
     }
+  }
 }
-export type PortalProps = JSX.IntrinsicElements['shaderMaterial'] & {
-    blend?: number;
-    blur?: number;
-    resolution?: number;
-    worldUnits?: boolean;
-    eventPriority?: number;
-    renderPriority?: number;
-    events?: boolean;
+export type PortalProps = JSX_IntrinsicElements["shaderMaterial"] & {
+  blend?: number;
+  blur?: number;
+  resolution?: number;
+  worldUnits?: boolean;
+  eventPriority?: number;
+  renderPriority?: number;
+  events?: boolean;
 };
-export declare const MeshPortalMaterial: React.ForwardRefExoticComponent<Omit<PortalProps, "ref"> & React.RefAttributes<PortalMaterialType>>;
+export declare const MeshPortalMaterial: React.ForwardRefExoticComponent<
+  Omit<PortalProps, "ref"> & React.RefAttributes<PortalMaterialType>
+>;
diff --git a/core/MeshReflectorMaterial.d.ts b/core/MeshReflectorMaterial.d.ts
index 827e0a3f5128d69b4df892e3d7388a708f92dcf7..b3b3a820852f023c903de8de5078cc7ff750c556 100644
--- a/core/MeshReflectorMaterial.d.ts
+++ b/core/MeshReflectorMaterial.d.ts
@@ -1,27 +1,33 @@
-import { Texture } from 'three';
-import { MeshReflectorMaterialProps, MeshReflectorMaterial as MeshReflectorMaterialImpl } from '../materials/MeshReflectorMaterial';
-import { ForwardRefComponent } from '../helpers/ts-utils';
-type Props = JSX.IntrinsicElements['meshStandardMaterial'] & {
-    resolution?: number;
-    mixBlur?: number;
-    mixStrength?: number;
-    blur?: [number, number] | number;
-    mirror: number;
-    minDepthThreshold?: number;
-    maxDepthThreshold?: number;
-    depthScale?: number;
-    depthToBlurRatioBias?: number;
-    distortionMap?: Texture;
-    distortion?: number;
-    mixContrast?: number;
-    reflectorOffset?: number;
+import { Texture } from "three";
+import {
+  MeshReflectorMaterialProps,
+  MeshReflectorMaterial as MeshReflectorMaterialImpl,
+} from "../materials/MeshReflectorMaterial";
+import { ForwardRefComponent } from "../helpers/ts-utils";
+type Props = JSX_IntrinsicElements["meshStandardMaterial"] & {
+  resolution?: number;
+  mixBlur?: number;
+  mixStrength?: number;
+  blur?: [number, number] | number;
+  mirror: number;
+  minDepthThreshold?: number;
+  maxDepthThreshold?: number;
+  depthScale?: number;
+  depthToBlurRatioBias?: number;
+  distortionMap?: Texture;
+  distortion?: number;
+  mixContrast?: number;
+  reflectorOffset?: number;
 };
 declare global {
-    namespace JSX {
-        interface IntrinsicElements {
-            meshReflectorMaterialImpl: MeshReflectorMaterialProps;
-        }
+  namespace JSX {
+    interface JSX_IntrinsicElements {
+      meshReflectorMaterialImpl: MeshReflectorMaterialProps;
     }
+  }
 }
-export declare const MeshReflectorMaterial: ForwardRefComponent<Props, MeshReflectorMaterialImpl>;
+export declare const MeshReflectorMaterial: ForwardRefComponent<
+  Props,
+  MeshReflectorMaterialImpl
+>;
 export {};
diff --git a/core/MeshRefractionMaterial.d.ts b/core/MeshRefractionMaterial.d.ts
index 772908147aae1a8b20870ca3b0915d66b85ae7d8..487bd904c0ad672ff958c6efbce9ed2f73c04ba0 100644
--- a/core/MeshRefractionMaterial.d.ts
+++ b/core/MeshRefractionMaterial.d.ts
@@ -1,22 +1,27 @@
-import * as THREE from 'three';
-import * as React from 'react';
-import { ReactThreeFiber } from '@react-three/fiber';
-import { MeshRefractionMaterial as MeshRefractionMaterial_ } from '../materials/MeshRefractionMaterial';
+import * as THREE from "three";
+import * as React from "react";
+import { ReactThreeFiber } from "@react-three/fiber";
+import { MeshRefractionMaterial as MeshRefractionMaterial_ } from "../materials/MeshRefractionMaterial";
 declare global {
-    namespace JSX {
-        interface IntrinsicElements {
-            meshRefractionMaterial: typeof MeshRefractionMaterial_;
-        }
+  namespace JSX {
+    interface JSX_IntrinsicElements {
+      meshRefractionMaterial: typeof MeshRefractionMaterial_;
     }
+  }
 }
-type MeshRefractionMaterialProps = JSX.IntrinsicElements['shaderMaterial'] & {
-    envMap: THREE.CubeTexture | THREE.Texture;
-    bounces?: number;
-    ior?: number;
-    fresnel?: number;
-    aberrationStrength?: number;
-    color?: ReactThreeFiber.Color;
-    fastChroma?: boolean;
+type MeshRefractionMaterialProps = JSX_IntrinsicElements["shaderMaterial"] & {
+  envMap: THREE.CubeTexture | THREE.Texture;
+  bounces?: number;
+  ior?: number;
+  fresnel?: number;
+  aberrationStrength?: number;
+  color?: ReactThreeFiber.Color;
+  fastChroma?: boolean;
 };
-export declare function MeshRefractionMaterial({ aberrationStrength, fastChroma, envMap, ...props }: MeshRefractionMaterialProps): React.JSX.Element;
+export declare function MeshRefractionMaterial({
+  aberrationStrength,
+  fastChroma,
+  envMap,
+  ...props
+}: MeshRefractionMaterialProps): React.JSX.Element;
 export {};
diff --git a/core/MeshTransmissionMaterial.d.ts b/core/MeshTransmissionMaterial.d.ts
index 00ab0bc42c677e0a3c6cabf0688a0385c83d071d..710e0d3919263773b956a7ec0e41d6de98e62686 100644
--- a/core/MeshTransmissionMaterial.d.ts
+++ b/core/MeshTransmissionMaterial.d.ts
@@ -1,35 +1,44 @@
-import * as THREE from 'three';
-import { ForwardRefComponent } from '../helpers/ts-utils';
-type MeshTransmissionMaterialType = Omit<JSX.IntrinsicElements['meshPhysicalMaterial'], 'args' | 'roughness' | 'thickness' | 'transmission'> & {
-    transmission?: number;
-    thickness?: number;
-    roughness?: number;
-    chromaticAberration?: number;
-    anisotropy?: number;
-    anisotropicBlur?: number;
-    distortion?: number;
-    distortionScale?: number;
-    temporalDistortion?: number;
-    buffer?: THREE.Texture;
-    time?: number;
-    args?: [samples: number, transmissionSampler: boolean];
+import * as THREE from "three";
+import { ForwardRefComponent } from "../helpers/ts-utils";
+type MeshTransmissionMaterialType = Omit<
+  JSX_IntrinsicElements["meshPhysicalMaterial"],
+  "args" | "roughness" | "thickness" | "transmission"
+> & {
+  transmission?: number;
+  thickness?: number;
+  roughness?: number;
+  chromaticAberration?: number;
+  anisotropy?: number;
+  anisotropicBlur?: number;
+  distortion?: number;
+  distortionScale?: number;
+  temporalDistortion?: number;
+  buffer?: THREE.Texture;
+  time?: number;
+  args?: [samples: number, transmissionSampler: boolean];
 };
-type MeshTransmissionMaterialProps = Omit<MeshTransmissionMaterialType, 'args'> & {
-    transmissionSampler?: boolean;
-    backside?: boolean;
-    backsideThickness?: number;
-    backsideEnvMapIntensity?: number;
-    resolution?: number;
-    backsideResolution?: number;
-    samples?: number;
-    background?: THREE.Texture | THREE.Color;
+type MeshTransmissionMaterialProps = Omit<
+  MeshTransmissionMaterialType,
+  "args"
+> & {
+  transmissionSampler?: boolean;
+  backside?: boolean;
+  backsideThickness?: number;
+  backsideEnvMapIntensity?: number;
+  resolution?: number;
+  backsideResolution?: number;
+  samples?: number;
+  background?: THREE.Texture | THREE.Color;
 };
 declare global {
-    namespace JSX {
-        interface IntrinsicElements {
-            meshTransmissionMaterial: MeshTransmissionMaterialType;
-        }
+  namespace JSX {
+    interface JSX_IntrinsicElements {
+      meshTransmissionMaterial: MeshTransmissionMaterialType;
     }
+  }
 }
-export declare const MeshTransmissionMaterial: ForwardRefComponent<MeshTransmissionMaterialProps, JSX.IntrinsicElements['meshTransmissionMaterial']>;
+export declare const MeshTransmissionMaterial: ForwardRefComponent<
+  MeshTransmissionMaterialProps,
+  JSX_IntrinsicElements["meshTransmissionMaterial"]
+>;
 export {};
diff --git a/core/MeshWobbleMaterial.d.ts b/core/MeshWobbleMaterial.d.ts
index 1a7d823cf5ed7d3a196d47859286049872f46eb3..c4a9c1c3c4182899c7db405db8dea93284788876 100644
--- a/core/MeshWobbleMaterial.d.ts
+++ b/core/MeshWobbleMaterial.d.ts
@@ -1,38 +1,45 @@
-import { IUniform, MeshStandardMaterial, MeshStandardMaterialParameters } from 'three';
-import { ForwardRefComponent } from '../helpers/ts-utils';
-type WobbleMaterialType = JSX.IntrinsicElements['meshStandardMaterial'] & {
-    time?: number;
-    factor?: number;
-    speed?: number;
+import {
+  IUniform,
+  MeshStandardMaterial,
+  MeshStandardMaterialParameters,
+} from "three";
+import { ForwardRefComponent } from "../helpers/ts-utils";
+type WobbleMaterialType = JSX_IntrinsicElements["meshStandardMaterial"] & {
+  time?: number;
+  factor?: number;
+  speed?: number;
 };
 type Props = WobbleMaterialType & {
-    speed?: number;
-    factor?: number;
+  speed?: number;
+  factor?: number;
 };
 declare global {
-    namespace JSX {
-        interface IntrinsicElements {
-            wobbleMaterialImpl: WobbleMaterialType;
-        }
+  namespace JSX {
+    interface JSX_IntrinsicElements {
+      wobbleMaterialImpl: WobbleMaterialType;
     }
+  }
 }
 interface Uniform<T> {
-    value: T;
+  value: T;
 }
 declare class WobbleMaterialImpl extends MeshStandardMaterial {
-    _time: Uniform<number>;
-    _factor: Uniform<number>;
-    constructor(parameters?: MeshStandardMaterialParameters);
-    onBeforeCompile(shader: {
-        vertexShader: string;
-        uniforms: {
-            [uniform: string]: IUniform;
-        };
-    }): void;
-    get time(): number;
-    set time(v: number);
-    get factor(): number;
-    set factor(v: number);
+  _time: Uniform<number>;
+  _factor: Uniform<number>;
+  constructor(parameters?: MeshStandardMaterialParameters);
+  onBeforeCompile(shader: {
+    vertexShader: string;
+    uniforms: {
+      [uniform: string]: IUniform;
+    };
+  }): void;
+  get time(): number;
+  set time(v: number);
+  get factor(): number;
+  set factor(v: number);
 }
-export declare const MeshWobbleMaterial: ForwardRefComponent<Props, WobbleMaterialImpl>;
+export declare const MeshWobbleMaterial: ForwardRefComponent<
+  Props,
+  WobbleMaterialImpl
+>;
 export {};
diff --git a/core/MotionPathControls.d.ts b/core/MotionPathControls.d.ts
index b13b70cf331b46311eafee9b267c7bd67dc77145..9e066021419816038362cd4445db901f7077fb90 100644
--- a/core/MotionPathControls.d.ts
+++ b/core/MotionPathControls.d.ts
@@ -1,27 +1,34 @@
-import * as THREE from 'three';
-import * as React from 'react';
-type MotionPathProps = JSX.IntrinsicElements['group'] & {
-    curves?: THREE.Curve<THREE.Vector3>[];
-    debug?: boolean;
-    object?: React.MutableRefObject<THREE.Object3D>;
-    focus?: [x: number, y: number, z: number] | React.MutableRefObject<THREE.Object3D>;
-    offset?: number;
-    smooth?: boolean | number;
-    eps?: number;
-    damping?: number;
-    focusDamping?: number;
-    maxSpeed?: number;
+import * as THREE from "three";
+import * as React from "react";
+type MotionPathProps = JSX_IntrinsicElements["group"] & {
+  curves?: THREE.Curve<THREE.Vector3>[];
+  debug?: boolean;
+  object?: React.MutableRefObject<THREE.Object3D>;
+  focus?:
+    | [x: number, y: number, z: number]
+    | React.MutableRefObject<THREE.Object3D>;
+  offset?: number;
+  smooth?: boolean | number;
+  eps?: number;
+  damping?: number;
+  focusDamping?: number;
+  maxSpeed?: number;
 };
 type MotionState = {
-    current: number;
-    path: THREE.CurvePath<THREE.Vector3>;
-    focus: React.MutableRefObject<THREE.Object3D> | [x: number, y: number, z: number] | undefined;
-    object: React.MutableRefObject<THREE.Object3D>;
-    offset: number;
-    point: THREE.Vector3;
-    tangent: THREE.Vector3;
-    next: THREE.Vector3;
+  current: number;
+  path: THREE.CurvePath<THREE.Vector3>;
+  focus:
+    | React.MutableRefObject<THREE.Object3D>
+    | [x: number, y: number, z: number]
+    | undefined;
+  object: React.MutableRefObject<THREE.Object3D>;
+  offset: number;
+  point: THREE.Vector3;
+  tangent: THREE.Vector3;
+  next: THREE.Vector3;
 };
 export declare function useMotion(): MotionState;
-export declare const MotionPathControls: React.ForwardRefExoticComponent<Omit<MotionPathProps, "ref"> & React.RefAttributes<THREE.Group>>;
+export declare const MotionPathControls: React.ForwardRefExoticComponent<
+  Omit<MotionPathProps, "ref"> & React.RefAttributes<THREE.Group>
+>;
 export {};
diff --git a/core/MultiMaterial.d.ts b/core/MultiMaterial.d.ts
index 8459dc5e5cf7ca72b5be4e32dab3dc4c9d0cda53..ed5ddc2e91739ca3c10396244a7908848147c4e5 100644
--- a/core/MultiMaterial.d.ts
+++ b/core/MultiMaterial.d.ts
@@ -1,2 +1,4 @@
-import * as React from 'react';
-export declare function MultiMaterial(props: JSX.IntrinsicElements['group']): React.JSX.Element;
+import * as React from "react";
+export declare function MultiMaterial(
+  props: JSX_IntrinsicElements["group"]
+): React.JSX.Element;
diff --git a/core/OrthographicCamera.d.ts b/core/OrthographicCamera.d.ts
index bd0a3fb16cebc694ce02ed8a8d504747d1cbeff0..04ec27e4decd2d73afc1c087485c78fbf46e183b 100644
--- a/core/OrthographicCamera.d.ts
+++ b/core/OrthographicCamera.d.ts
@@ -1,14 +1,17 @@
-import * as THREE from 'three';
-import * as React from 'react';
-import { OrthographicCamera as OrthographicCameraImpl } from 'three';
-import { ForwardRefComponent } from '../helpers/ts-utils';
-type Props = Omit<JSX.IntrinsicElements['orthographicCamera'], 'children'> & {
-    makeDefault?: boolean;
-    manual?: boolean;
-    children?: React.ReactNode | ((texture: THREE.Texture) => React.ReactNode);
-    frames?: number;
-    resolution?: number;
-    envMap?: THREE.Texture;
+import * as THREE from "three";
+import * as React from "react";
+import { OrthographicCamera as OrthographicCameraImpl } from "three";
+import { ForwardRefComponent } from "../helpers/ts-utils";
+type Props = Omit<JSX_IntrinsicElements["orthographicCamera"], "children"> & {
+  makeDefault?: boolean;
+  manual?: boolean;
+  children?: React.ReactNode | ((texture: THREE.Texture) => React.ReactNode);
+  frames?: number;
+  resolution?: number;
+  envMap?: THREE.Texture;
 };
-export declare const OrthographicCamera: ForwardRefComponent<Props, OrthographicCameraImpl>;
+export declare const OrthographicCamera: ForwardRefComponent<
+  Props,
+  OrthographicCameraImpl
+>;
 export {};
diff --git a/core/Outlines.d.ts b/core/Outlines.d.ts
index 68aabb966d395705a1ccc7e5fa947cc372b00349..742e2960d6e9a4c28d9b5283ae5387ba15341f20 100644
--- a/core/Outlines.d.ts
+++ b/core/Outlines.d.ts
@@ -1,16 +1,28 @@
-import * as React from 'react';
-import { ReactThreeFiber } from '@react-three/fiber';
-type OutlinesProps = JSX.IntrinsicElements['group'] & {
-    color?: ReactThreeFiber.Color;
-    screenspace?: boolean;
-    opacity?: number;
-    transparent?: boolean;
-    thickness?: number;
-    angle?: number;
-    toneMapped?: boolean;
-    polygonOffset?: boolean;
-    polygonOffsetFactor?: number;
-    renderOrder?: number;
+import * as React from "react";
+import { ReactThreeFiber } from "@react-three/fiber";
+type OutlinesProps = JSX_IntrinsicElements["group"] & {
+  color?: ReactThreeFiber.Color;
+  screenspace?: boolean;
+  opacity?: number;
+  transparent?: boolean;
+  thickness?: number;
+  angle?: number;
+  toneMapped?: boolean;
+  polygonOffset?: boolean;
+  polygonOffsetFactor?: number;
+  renderOrder?: number;
 };
-export declare function Outlines({ color, opacity, transparent, screenspace, toneMapped, polygonOffset, polygonOffsetFactor, renderOrder, thickness, angle, ...props }: OutlinesProps): React.JSX.Element;
+export declare function Outlines({
+  color,
+  opacity,
+  transparent,
+  screenspace,
+  toneMapped,
+  polygonOffset,
+  polygonOffsetFactor,
+  renderOrder,
+  thickness,
+  angle,
+  ...props
+}: OutlinesProps): React.JSX.Element;
 export {};
diff --git a/core/PerspectiveCamera.d.ts b/core/PerspectiveCamera.d.ts
index ae56a29be113ddbff7b03ed69275042fd9165263..bcdb88b49026174b86910d0ac0195cb5dc67bbe7 100644
--- a/core/PerspectiveCamera.d.ts
+++ b/core/PerspectiveCamera.d.ts
@@ -1,14 +1,17 @@
-import * as THREE from 'three';
-import * as React from 'react';
-import { PerspectiveCamera as PerspectiveCameraImpl } from 'three';
-import { ForwardRefComponent } from '../helpers/ts-utils';
-type Props = Omit<JSX.IntrinsicElements['perspectiveCamera'], 'children'> & {
-    makeDefault?: boolean;
-    manual?: boolean;
-    children?: React.ReactNode | ((texture: THREE.Texture) => React.ReactNode);
-    frames?: number;
-    resolution?: number;
-    envMap?: THREE.Texture;
+import * as THREE from "three";
+import * as React from "react";
+import { PerspectiveCamera as PerspectiveCameraImpl } from "three";
+import { ForwardRefComponent } from "../helpers/ts-utils";
+type Props = Omit<JSX_IntrinsicElements["perspectiveCamera"], "children"> & {
+  makeDefault?: boolean;
+  manual?: boolean;
+  children?: React.ReactNode | ((texture: THREE.Texture) => React.ReactNode);
+  frames?: number;
+  resolution?: number;
+  envMap?: THREE.Texture;
 };
-export declare const PerspectiveCamera: ForwardRefComponent<Props, PerspectiveCameraImpl>;
+export declare const PerspectiveCamera: ForwardRefComponent<
+  Props,
+  PerspectiveCameraImpl
+>;
 export {};
diff --git a/core/PointMaterial.d.ts b/core/PointMaterial.d.ts
index 04fe55256edca9d5304719bd7275ee52f3deb9f1..d05264ad5bfbafa698d827f154710540927a7d2b 100644
--- a/core/PointMaterial.d.ts
+++ b/core/PointMaterial.d.ts
@@ -1,16 +1,19 @@
-import * as THREE from 'three';
-import { PrimitiveProps } from '@react-three/fiber';
-import { ForwardRefComponent } from '../helpers/ts-utils';
-type PointMaterialType = JSX.IntrinsicElements['pointsMaterial'];
+import * as THREE from "three";
+import { PrimitiveProps } from "@react-three/fiber";
+import { ForwardRefComponent } from "../helpers/ts-utils";
+type PointMaterialType = JSX_IntrinsicElements["pointsMaterial"];
 declare global {
-    namespace JSX {
-        interface IntrinsicElements {
-            pointMaterialImpl: PointMaterialType;
-        }
+  namespace JSX {
+    interface JSX_IntrinsicElements {
+      pointMaterialImpl: PointMaterialType;
     }
+  }
 }
 export declare class PointMaterialImpl extends THREE.PointsMaterial {
-    constructor(props: any);
+  constructor(props: any);
 }
-export declare const PointMaterial: ForwardRefComponent<Omit<PrimitiveProps, 'object' | 'attach'>, PointMaterialImpl>;
+export declare const PointMaterial: ForwardRefComponent<
+  Omit<PrimitiveProps, "object" | "attach">,
+  PointMaterialImpl
+>;
 export {};
diff --git a/core/Points.d.ts b/core/Points.d.ts
index 339f5aca61c10996d98b79df1dcc16f26cd0e5c7..42fdc698d3caec1ab8e485f21e2a3da95d48b0ed 100644
--- a/core/Points.d.ts
+++ b/core/Points.d.ts
@@ -1,34 +1,48 @@
-import * as THREE from 'three';
-import * as React from 'react';
-import { ReactThreeFiber } from '@react-three/fiber';
-import { ForwardRefComponent } from '../helpers/ts-utils';
+import * as THREE from "three";
+import * as React from "react";
+import { ReactThreeFiber } from "@react-three/fiber";
+import { ForwardRefComponent } from "../helpers/ts-utils";
 declare global {
-    namespace JSX {
-        interface IntrinsicElements {
-            positionPoint: ReactThreeFiber.Object3DNode<PositionPoint, typeof PositionPoint>;
-        }
+  namespace JSX {
+    interface JSX_IntrinsicElements {
+      positionPoint: ReactThreeFiber.Object3DNode<
+        PositionPoint,
+        typeof PositionPoint
+      >;
     }
+  }
 }
-type PointsInstancesProps = JSX.IntrinsicElements['points'] & {
-    range?: number;
-    limit?: number;
+type PointsInstancesProps = JSX_IntrinsicElements["points"] & {
+  range?: number;
+  limit?: number;
 };
 export declare class PositionPoint extends THREE.Group {
-    size: number;
-    color: THREE.Color;
-    instance: React.MutableRefObject<THREE.Points | undefined>;
-    instanceKey: React.MutableRefObject<JSX.IntrinsicElements['positionPoint'] | undefined>;
-    constructor();
-    get geometry(): THREE.BufferGeometry | undefined;
-    raycast(raycaster: THREE.Raycaster, intersects: THREE.Intersection[]): void;
+  size: number;
+  color: THREE.Color;
+  instance: React.MutableRefObject<THREE.Points | undefined>;
+  instanceKey: React.MutableRefObject<
+    JSX_IntrinsicElements["positionPoint"] | undefined
+  >;
+  constructor();
+  get geometry(): THREE.BufferGeometry | undefined;
+  raycast(raycaster: THREE.Raycaster, intersects: THREE.Intersection[]): void;
 }
-export declare const Point: ForwardRefComponent<JSX.IntrinsicElements['positionPoint'], PositionPoint>;
-type PointsBuffersProps = JSX.IntrinsicElements['points'] & {
-    positions: Float32Array;
-    colors?: Float32Array;
-    sizes?: Float32Array;
-    stride?: 2 | 3;
+export declare const Point: ForwardRefComponent<
+  JSX_IntrinsicElements["positionPoint"],
+  PositionPoint
+>;
+type PointsBuffersProps = JSX_IntrinsicElements["points"] & {
+  positions: Float32Array;
+  colors?: Float32Array;
+  sizes?: Float32Array;
+  stride?: 2 | 3;
 };
-export declare const PointsBuffer: ForwardRefComponent<PointsBuffersProps, THREE.Points>;
-export declare const Points: ForwardRefComponent<PointsBuffersProps | PointsInstancesProps, THREE.Points>;
+export declare const PointsBuffer: ForwardRefComponent<
+  PointsBuffersProps,
+  THREE.Points
+>;
+export declare const Points: ForwardRefComponent<
+  PointsBuffersProps | PointsInstancesProps,
+  THREE.Points
+>;
 export {};
diff --git a/core/PositionalAudio.d.ts b/core/PositionalAudio.d.ts
index 82cd84a09b7cd9d6912314434db66a1c7a82f4d3..2cfc0c74521e647e5b4c52325e53736154e28206 100644
--- a/core/PositionalAudio.d.ts
+++ b/core/PositionalAudio.d.ts
@@ -1,9 +1,12 @@
-import { PositionalAudio as PositionalAudioImpl } from 'three';
-import { ForwardRefComponent } from '../helpers/ts-utils';
-type Props = JSX.IntrinsicElements['positionalAudio'] & {
-    url: string;
-    distance?: number;
-    loop?: boolean;
+import { PositionalAudio as PositionalAudioImpl } from "three";
+import { ForwardRefComponent } from "../helpers/ts-utils";
+type Props = JSX_IntrinsicElements["positionalAudio"] & {
+  url: string;
+  distance?: number;
+  loop?: boolean;
 };
-export declare const PositionalAudio: ForwardRefComponent<Props, PositionalAudioImpl>;
+export declare const PositionalAudio: ForwardRefComponent<
+  Props,
+  PositionalAudioImpl
+>;
 export {};
diff --git a/core/Reflector.d.ts b/core/Reflector.d.ts
index d94c276238c9d1e59ba1c195bca2b3a822ddea1b..64c64ea04f19d11a11269c6463ea291e0e2ea6ca 100644
--- a/core/Reflector.d.ts
+++ b/core/Reflector.d.ts
@@ -1,8 +1,12 @@
-import * as React from 'react';
-import { Mesh, Texture } from 'three';
-import { MeshReflectorMaterialProps } from '../materials/MeshReflectorMaterial';
-import { ForwardRefComponent } from '../helpers/ts-utils';
-export type ReflectorProps = Omit<JSX.IntrinsicElements['mesh'], 'args' | 'children'> & Pick<JSX.IntrinsicElements['planeGeometry'], 'args'> & {
+import * as React from "react";
+import { Mesh, Texture } from "three";
+import { MeshReflectorMaterialProps } from "../materials/MeshReflectorMaterial";
+import { ForwardRefComponent } from "../helpers/ts-utils";
+export type ReflectorProps = Omit<
+  JSX_IntrinsicElements["mesh"],
+  "args" | "children"
+> &
+  Pick<JSX_IntrinsicElements["planeGeometry"], "args"> & {
     resolution?: number;
     mixBlur?: number;
     mixStrength?: number;
@@ -17,14 +21,19 @@ export type ReflectorProps = Omit<JSX.IntrinsicElements['mesh'], 'args' | 'child
     distortion?: number;
     mixContrast?: number;
     children?: {
-        (Component: React.ElementType<JSX.IntrinsicElements['meshReflectorMaterial']>, ComponentProps: MeshReflectorMaterialProps): JSX.Element | null;
+      (
+        Component: React.ElementType<
+          JSX_IntrinsicElements["meshReflectorMaterial"]
+        >,
+        ComponentProps: MeshReflectorMaterialProps
+      ): JSX.Element | null;
     };
-};
+  };
 declare global {
-    namespace JSX {
-        interface IntrinsicElements {
-            meshReflectorMaterial: MeshReflectorMaterialProps;
-        }
+  namespace JSX {
+    interface JSX_IntrinsicElements {
+      meshReflectorMaterial: MeshReflectorMaterialProps;
     }
+  }
 }
 export declare const Reflector: ForwardRefComponent<ReflectorProps, Mesh>;
diff --git a/core/RenderCubeTexture.d.ts b/core/RenderCubeTexture.d.ts
index 5f341a813b09feebe832c1c0cae1682a8812d8d2..48bb9d195a21dc922ebb7b5f314ef203724bf915 100644
--- a/core/RenderCubeTexture.d.ts
+++ b/core/RenderCubeTexture.d.ts
@@ -1,30 +1,36 @@
-import * as THREE from 'three';
-import * as React from 'react';
-import { ComputeFunction, ReactThreeFiber } from '@react-three/fiber';
-import { ForwardRefComponent } from '../helpers/ts-utils';
-export type RenderCubeTextureProps = Omit<JSX.IntrinsicElements['texture'], 'rotation'> & {
-    stencilBuffer?: boolean;
-    depthBuffer?: boolean;
-    generateMipmaps?: boolean;
-    renderPriority?: number;
-    eventPriority?: number;
-    frames?: number;
-    compute?: ComputeFunction;
-    flip?: boolean;
-    resolution?: number;
-    children: React.ReactNode;
-    near?: number;
-    far?: number;
-    position?: ReactThreeFiber.Vector3;
-    rotation?: ReactThreeFiber.Euler;
-    scale?: ReactThreeFiber.Vector3;
-    quaternion?: ReactThreeFiber.Quaternion;
-    matrix?: ReactThreeFiber.Matrix4;
-    matrixAutoUpdate?: boolean;
+import * as THREE from "three";
+import * as React from "react";
+import { ComputeFunction, ReactThreeFiber } from "@react-three/fiber";
+import { ForwardRefComponent } from "../helpers/ts-utils";
+export type RenderCubeTextureProps = Omit<
+  JSX_IntrinsicElements["texture"],
+  "rotation"
+> & {
+  stencilBuffer?: boolean;
+  depthBuffer?: boolean;
+  generateMipmaps?: boolean;
+  renderPriority?: number;
+  eventPriority?: number;
+  frames?: number;
+  compute?: ComputeFunction;
+  flip?: boolean;
+  resolution?: number;
+  children: React.ReactNode;
+  near?: number;
+  far?: number;
+  position?: ReactThreeFiber.Vector3;
+  rotation?: ReactThreeFiber.Euler;
+  scale?: ReactThreeFiber.Vector3;
+  quaternion?: ReactThreeFiber.Quaternion;
+  matrix?: ReactThreeFiber.Matrix4;
+  matrixAutoUpdate?: boolean;
 };
 export type RenderCubeTextureApi = {
-    scene: THREE.Scene;
-    fbo: THREE.WebGLCubeRenderTarget;
-    camera: THREE.CubeCamera;
+  scene: THREE.Scene;
+  fbo: THREE.WebGLCubeRenderTarget;
+  camera: THREE.CubeCamera;
 };
-export declare const RenderCubeTexture: ForwardRefComponent<RenderCubeTextureProps, RenderCubeTextureApi>;
+export declare const RenderCubeTexture: ForwardRefComponent<
+  RenderCubeTextureProps,
+  RenderCubeTextureApi
+>;
diff --git a/core/RenderTexture.d.ts b/core/RenderTexture.d.ts
index c9f356e73440fd6b93df57ad743129d077af3416..f679b152dc0490680346ac163ff9a2fa16e79a17 100644
--- a/core/RenderTexture.d.ts
+++ b/core/RenderTexture.d.ts
@@ -1,18 +1,18 @@
-import * as THREE from 'three';
-import * as React from 'react';
-import { ForwardRefComponent } from '../helpers/ts-utils';
-type Props = JSX.IntrinsicElements['texture'] & {
-    width?: number;
-    height?: number;
-    samples?: number;
-    stencilBuffer?: boolean;
-    depthBuffer?: boolean;
-    generateMipmaps?: boolean;
-    renderPriority?: number;
-    eventPriority?: number;
-    frames?: number;
-    compute?: (event: any, state: any, previous: any) => false | undefined;
-    children: React.ReactNode;
+import * as THREE from "three";
+import * as React from "react";
+import { ForwardRefComponent } from "../helpers/ts-utils";
+type Props = JSX_IntrinsicElements["texture"] & {
+  width?: number;
+  height?: number;
+  samples?: number;
+  stencilBuffer?: boolean;
+  depthBuffer?: boolean;
+  generateMipmaps?: boolean;
+  renderPriority?: number;
+  eventPriority?: number;
+  frames?: number;
+  compute?: (event: any, state: any, previous: any) => false | undefined;
+  children: React.ReactNode;
 };
 export declare const RenderTexture: ForwardRefComponent<Props, THREE.Texture>;
 export {};
diff --git a/core/Resize.d.ts b/core/Resize.d.ts
index dc01883586877be4229492b911096a5671f47013..907a9134cd95fa84b956cc11b752d25d50a57a52 100644
--- a/core/Resize.d.ts
+++ b/core/Resize.d.ts
@@ -1,10 +1,12 @@
-import * as THREE from 'three';
-import * as React from 'react';
-export type ResizeProps = JSX.IntrinsicElements['group'] & {
-    width?: boolean;
-    height?: boolean;
-    depth?: boolean;
-    box3?: THREE.Box3;
-    precise?: boolean;
+import * as THREE from "three";
+import * as React from "react";
+export type ResizeProps = JSX_IntrinsicElements["group"] & {
+  width?: boolean;
+  height?: boolean;
+  depth?: boolean;
+  box3?: THREE.Box3;
+  precise?: boolean;
 };
-export declare const Resize: React.ForwardRefExoticComponent<Omit<ResizeProps, "ref"> & React.RefAttributes<THREE.Group>>;
+export declare const Resize: React.ForwardRefExoticComponent<
+  Omit<ResizeProps, "ref"> & React.RefAttributes<THREE.Group>
+>;
diff --git a/core/RoundedBox.d.ts b/core/RoundedBox.d.ts
index 4a84b7e339d69ab810564e1946ca927941672e07..3e0e397a33fd7df811c1194e78e69b5afb3a812f 100644
--- a/core/RoundedBox.d.ts
+++ b/core/RoundedBox.d.ts
@@ -1,12 +1,14 @@
-import { Mesh } from 'three';
-import { ForwardRefComponent, NamedArrayTuple } from '../helpers/ts-utils';
+import { Mesh } from "three";
+import { ForwardRefComponent, NamedArrayTuple } from "../helpers/ts-utils";
 type Props = {
-    args?: NamedArrayTuple<(width?: number, height?: number, depth?: number) => void>;
-    radius?: number;
-    smoothness?: number;
-    bevelSegments?: number;
-    steps?: number;
-    creaseAngle?: number;
-} & Omit<JSX.IntrinsicElements['mesh'], 'args'>;
+  args?: NamedArrayTuple<
+    (width?: number, height?: number, depth?: number) => void
+  >;
+  radius?: number;
+  smoothness?: number;
+  bevelSegments?: number;
+  steps?: number;
+  creaseAngle?: number;
+} & Omit<JSX_IntrinsicElements["mesh"], "args">;
 export declare const RoundedBox: ForwardRefComponent<Props, Mesh>;
 export {};
diff --git a/core/ScreenQuad.d.ts b/core/ScreenQuad.d.ts
index 15307c86906abc0a4c6c2a09e74fb66dbfcfa740..5158b196c2515de52ebdd449be5bd08a373ec9d4 100644
--- a/core/ScreenQuad.d.ts
+++ b/core/ScreenQuad.d.ts
@@ -1,5 +1,5 @@
-import * as THREE from 'three';
-import { ForwardRefComponent } from '../helpers/ts-utils';
-type Props = Omit<JSX.IntrinsicElements['mesh'], 'args'>;
+import * as THREE from "three";
+import { ForwardRefComponent } from "../helpers/ts-utils";
+type Props = Omit<JSX_IntrinsicElements["mesh"], "args">;
 export declare const ScreenQuad: ForwardRefComponent<Props, THREE.Mesh>;
 export {};
diff --git a/core/ScreenSpace.d.ts b/core/ScreenSpace.d.ts
index 254a87357786e5dbbaaebb8bfdd1d04efb6719ea..ccc9a967c27a6fa68a2dc3baf1653c226be750e9 100644
--- a/core/ScreenSpace.d.ts
+++ b/core/ScreenSpace.d.ts
@@ -1,6 +1,6 @@
-import { Group } from 'three';
-import { ForwardRefComponent } from '../helpers/ts-utils';
+import { Group } from "three";
+import { ForwardRefComponent } from "../helpers/ts-utils";
 export type ScreenSpaceProps = {
-    depth?: number;
-} & JSX.IntrinsicElements['group'];
+  depth?: number;
+} & JSX_IntrinsicElements["group"];
 export declare const ScreenSpace: ForwardRefComponent<ScreenSpaceProps, Group>;
diff --git a/core/Segments.d.ts b/core/Segments.d.ts
index fc709b11578c23da462627e508121c708418c306..1d8f85ea254113e20a84bbbe179acdfacf15ec6a 100644
--- a/core/Segments.d.ts
+++ b/core/Segments.d.ts
@@ -1,31 +1,37 @@
-import * as THREE from 'three';
-import * as React from 'react';
-import { ReactThreeFiber } from '@react-three/fiber';
-import { Line2, LineMaterialParameters } from 'three-stdlib';
-import { ForwardRefComponent } from '../helpers/ts-utils';
+import * as THREE from "three";
+import * as React from "react";
+import { ReactThreeFiber } from "@react-three/fiber";
+import { Line2, LineMaterialParameters } from "three-stdlib";
+import { ForwardRefComponent } from "../helpers/ts-utils";
 type SegmentsProps = LineMaterialParameters & {
-    limit?: number;
-    lineWidth?: number;
-    children: React.ReactNode;
+  limit?: number;
+  lineWidth?: number;
+  children: React.ReactNode;
 };
-type SegmentProps = Omit<JSX.IntrinsicElements['segmentObject'], 'start' | 'end' | 'color'> & {
-    start: ReactThreeFiber.Vector3;
-    end: ReactThreeFiber.Vector3;
-    color?: ReactThreeFiber.Color;
+type SegmentProps = Omit<
+  JSX_IntrinsicElements["segmentObject"],
+  "start" | "end" | "color"
+> & {
+  start: ReactThreeFiber.Vector3;
+  end: ReactThreeFiber.Vector3;
+  color?: ReactThreeFiber.Color;
 };
 declare const Segments: ForwardRefComponent<SegmentsProps, Line2>;
 declare global {
-    namespace JSX {
-        interface IntrinsicElements {
-            segmentObject: ReactThreeFiber.Object3DNode<SegmentObject, typeof SegmentObject>;
-        }
+  namespace JSX {
+    interface JSX_IntrinsicElements {
+      segmentObject: ReactThreeFiber.Object3DNode<
+        SegmentObject,
+        typeof SegmentObject
+      >;
     }
+  }
 }
 export declare class SegmentObject {
-    color: THREE.Color;
-    start: THREE.Vector3;
-    end: THREE.Vector3;
-    constructor();
+  color: THREE.Color;
+  start: THREE.Vector3;
+  end: THREE.Vector3;
+  constructor();
 }
 declare const Segment: ForwardRefComponent<SegmentProps, SegmentObject>;
 export { Segments, Segment };
diff --git a/core/Shadow.d.ts b/core/Shadow.d.ts
index 03688a5b3b4b6389b77d9c58a9cadbbaedb9874f..99896bfa0587deb942d72f1b0973701de842e958 100644
--- a/core/Shadow.d.ts
+++ b/core/Shadow.d.ts
@@ -1,11 +1,11 @@
-import { Mesh, Color, type PlaneGeometry, type MeshBasicMaterial } from 'three';
-import { ForwardRefComponent } from '../helpers/ts-utils';
-type Props = JSX.IntrinsicElements['mesh'] & {
-    colorStop?: number;
-    fog?: boolean;
-    color?: Color | number | string;
-    opacity?: number;
-    depthWrite?: boolean;
+import { Mesh, Color, type PlaneGeometry, type MeshBasicMaterial } from "three";
+import { ForwardRefComponent } from "../helpers/ts-utils";
+type Props = JSX_IntrinsicElements["mesh"] & {
+  colorStop?: number;
+  fog?: boolean;
+  color?: Color | number | string;
+  opacity?: number;
+  depthWrite?: boolean;
 };
 export type ShadowType = Mesh<PlaneGeometry, MeshBasicMaterial>;
 export declare const Shadow: ForwardRefComponent<Props, ShadowType>;
diff --git a/core/Sparkles.d.ts b/core/Sparkles.d.ts
index bfa0337d3659ff22ce3aa4b67831f8e167fb37da..e6b35245e2023acbd12ad89b09fff0772f98487d 100644
--- a/core/Sparkles.d.ts
+++ b/core/Sparkles.d.ts
@@ -12,7 +12,7 @@ interface Props {
 }
 declare global {
     namespace JSX {
-        interface IntrinsicElements {
+        interface JSX_IntrinsicElements {
             sparklesImplMaterial: Node<any, any>;
         }
     }
diff --git a/core/Splat.d.ts b/core/Splat.d.ts
index df1b65de82c8828335a5240159069e624a7d294a..ae64652c8fecf3d6ec8c28ee1c63a5507737cd76 100644
--- a/core/Splat.d.ts
+++ b/core/Splat.d.ts
@@ -1,58 +1,69 @@
-import * as THREE from 'three';
-import * as React from 'react';
+import * as THREE from "three";
+import * as React from "react";
 export type SplatMaterialType = {
-    alphaTest?: number;
-    alphaHash?: boolean;
-    centerAndScaleTexture?: THREE.DataTexture;
-    covAndColorTexture?: THREE.DataTexture;
-    viewport?: THREE.Vector2;
-    focal?: number;
+  alphaTest?: number;
+  alphaHash?: boolean;
+  centerAndScaleTexture?: THREE.DataTexture;
+  covAndColorTexture?: THREE.DataTexture;
+  viewport?: THREE.Vector2;
+  focal?: number;
 };
-export type TargetMesh = THREE.Mesh<THREE.InstancedBufferGeometry, THREE.ShaderMaterial & SplatMaterialType> & {
-    ready: boolean;
-    sorted: boolean;
-    pm: THREE.Matrix4;
-    vm1: THREE.Matrix4;
-    vm2: THREE.Matrix4;
-    viewport: THREE.Vector4;
+export type TargetMesh = THREE.Mesh<
+  THREE.InstancedBufferGeometry,
+  THREE.ShaderMaterial & SplatMaterialType
+> & {
+  ready: boolean;
+  sorted: boolean;
+  pm: THREE.Matrix4;
+  vm1: THREE.Matrix4;
+  vm2: THREE.Matrix4;
+  viewport: THREE.Vector4;
 };
 export type SharedState = {
-    url: string;
-    gl: THREE.WebGLRenderer;
-    worker: Worker;
-    manager: THREE.LoadingManager;
-    stream: ReadableStreamDefaultReader<Uint8Array>;
-    loading: boolean;
-    loaded: boolean;
-    loadedVertexCount: number;
-    rowLength: number;
-    maxVertexes: number;
-    chunkSize: number;
-    totalDownloadBytes: number;
-    numVertices: number;
-    bufferTextureWidth: number;
-    bufferTextureHeight: number;
-    centerAndScaleData: Float32Array;
-    covAndColorData: Uint32Array;
-    covAndColorTexture: THREE.DataTexture;
-    centerAndScaleTexture: THREE.DataTexture;
-    connect(target: TargetMesh): () => void;
-    update(target: TargetMesh, camera: THREE.Camera, hashed: boolean): void;
-    onProgress?: (event: ProgressEvent) => void;
+  url: string;
+  gl: THREE.WebGLRenderer;
+  worker: Worker;
+  manager: THREE.LoadingManager;
+  stream: ReadableStreamDefaultReader<Uint8Array>;
+  loading: boolean;
+  loaded: boolean;
+  loadedVertexCount: number;
+  rowLength: number;
+  maxVertexes: number;
+  chunkSize: number;
+  totalDownloadBytes: number;
+  numVertices: number;
+  bufferTextureWidth: number;
+  bufferTextureHeight: number;
+  centerAndScaleData: Float32Array;
+  covAndColorData: Uint32Array;
+  covAndColorTexture: THREE.DataTexture;
+  centerAndScaleTexture: THREE.DataTexture;
+  connect(target: TargetMesh): () => void;
+  update(target: TargetMesh, camera: THREE.Camera, hashed: boolean): void;
+  onProgress?: (event: ProgressEvent) => void;
 };
 declare global {
-    namespace JSX {
-        interface IntrinsicElements {
-            splatMaterial: SplatMaterialType & JSX.IntrinsicElements['shaderMaterial'];
-        }
+  namespace JSX {
+    interface JSX_IntrinsicElements {
+      splatMaterial: SplatMaterialType &
+        JSX_IntrinsicElements["shaderMaterial"];
     }
+  }
 }
 type SplatProps = {
-    src: string;
-    toneMapped?: boolean;
-    alphaTest?: number;
-    alphaHash?: boolean;
-    chunkSize?: number;
-} & JSX.IntrinsicElements['mesh'];
-export declare function Splat({ src, toneMapped, alphaTest, alphaHash, chunkSize, ...props }: SplatProps): React.JSX.Element;
+  src: string;
+  toneMapped?: boolean;
+  alphaTest?: number;
+  alphaHash?: boolean;
+  chunkSize?: number;
+} & JSX_IntrinsicElements["mesh"];
+export declare function Splat({
+  src,
+  toneMapped,
+  alphaTest,
+  alphaHash,
+  chunkSize,
+  ...props
+}: SplatProps): React.JSX.Element;
 export {};
diff --git a/core/SpotLight.d.ts b/core/SpotLight.d.ts
index 781eb9c8fc8b1651e073f3604e7395e9efbf34cb..eea56ad8ac0ce803cbcdd2f33fb935211454fd62 100644
--- a/core/SpotLight.d.ts
+++ b/core/SpotLight.d.ts
@@ -1,26 +1,31 @@
-import * as React from 'react';
-import { DepthTexture, SpotLight as SpotLightImpl, Texture } from 'three';
-import { ForwardRefComponent } from '../helpers/ts-utils';
-type SpotLightProps = JSX.IntrinsicElements['spotLight'] & {
-    depthBuffer?: DepthTexture;
-    attenuation?: number;
-    anglePower?: number;
-    radiusTop?: number;
-    radiusBottom?: number;
-    opacity?: number;
-    color?: string | number;
-    volumetric?: boolean;
-    debug?: boolean;
+import * as React from "react";
+import { DepthTexture, SpotLight as SpotLightImpl, Texture } from "three";
+import { ForwardRefComponent } from "../helpers/ts-utils";
+type SpotLightProps = JSX_IntrinsicElements["spotLight"] & {
+  depthBuffer?: DepthTexture;
+  attenuation?: number;
+  anglePower?: number;
+  radiusTop?: number;
+  radiusBottom?: number;
+  opacity?: number;
+  color?: string | number;
+  volumetric?: boolean;
+  debug?: boolean;
 };
 interface ShadowMeshProps {
-    distance?: number;
-    alphaTest?: number;
-    scale?: number;
-    map?: Texture;
-    shader?: string;
-    width?: number;
-    height?: number;
+  distance?: number;
+  alphaTest?: number;
+  scale?: number;
+  map?: Texture;
+  shader?: string;
+  width?: number;
+  height?: number;
 }
-export declare function SpotLightShadow(props: React.PropsWithChildren<ShadowMeshProps>): React.JSX.Element;
-declare const SpotLight: ForwardRefComponent<React.PropsWithChildren<SpotLightProps>, SpotLightImpl>;
+export declare function SpotLightShadow(
+  props: React.PropsWithChildren<ShadowMeshProps>
+): React.JSX.Element;
+declare const SpotLight: ForwardRefComponent<
+  React.PropsWithChildren<SpotLightProps>,
+  SpotLightImpl
+>;
 export { SpotLight };
diff --git a/core/SpriteAnimator.d.ts b/core/SpriteAnimator.d.ts
index ea5d36eef03b81a1a4bec62224753ea4199fe63f..a2715ca7970442de9ea7f12c9218fa5627447049 100644
--- a/core/SpriteAnimator.d.ts
+++ b/core/SpriteAnimator.d.ts
@@ -1,55 +1,61 @@
-import * as React from 'react';
-import { Vector3 } from '@react-three/fiber';
-import * as THREE from 'three';
-import { Instances, Instance } from './Instances';
-import { SpriteData } from './useSpriteLoader';
+import * as React from "react";
+import { Vector3 } from "@react-three/fiber";
+import * as THREE from "three";
+import { Instances, Instance } from "./Instances";
+import { SpriteData } from "./useSpriteLoader";
 type AnimationEventData = {
-    currentFrameName: string;
-    currentFrame: number;
+  currentFrameName: string;
+  currentFrame: number;
 };
 type CommonProps<T, U, V> = Pick<T & U & V, keyof T & keyof U & keyof V>;
-type CommonMeshProps = CommonProps<React.ComponentProps<'mesh'>, React.ComponentProps<typeof Instance>, React.ComponentProps<typeof Instances>>;
+type CommonMeshProps = CommonProps<
+  React.ComponentProps<"mesh">,
+  React.ComponentProps<typeof Instance>,
+  React.ComponentProps<typeof Instances>
+>;
 export type SpriteAnimatorProps = {
-    startFrame?: number;
-    endFrame?: number;
-    fps?: number;
-    frameName?: string;
-    textureDataURL?: string;
-    textureImageURL?: string;
-    loop?: boolean;
-    numberOfFrames?: number;
-    autoPlay?: boolean;
-    animationNames?: Array<string>;
-    onStart?: (data: AnimationEventData) => void;
-    onEnd?: (data: AnimationEventData) => void;
-    onLoopEnd?: (data: AnimationEventData) => void;
-    onFrame?: (data: AnimationEventData) => void;
-    play?: boolean;
-    pause?: boolean;
-    flipX?: boolean;
-    alphaTest?: number;
-    asSprite?: boolean;
-    offset?: number;
-    playBackwards?: boolean;
-    resetOnEnd?: boolean;
-    instanceItems?: Vector3[];
-    maxItems?: number;
-    spriteDataset?: {
-        spriteTexture: THREE.Texture;
-        spriteData: SpriteData | null;
-        aspect: Vector3;
-    } | null;
-    canvasRenderingContext2DSettings?: CanvasRenderingContext2DSettings;
-    roundFramePosition?: boolean;
-    meshProps?: CommonMeshProps;
-} & JSX.IntrinsicElements['group'];
+  startFrame?: number;
+  endFrame?: number;
+  fps?: number;
+  frameName?: string;
+  textureDataURL?: string;
+  textureImageURL?: string;
+  loop?: boolean;
+  numberOfFrames?: number;
+  autoPlay?: boolean;
+  animationNames?: Array<string>;
+  onStart?: (data: AnimationEventData) => void;
+  onEnd?: (data: AnimationEventData) => void;
+  onLoopEnd?: (data: AnimationEventData) => void;
+  onFrame?: (data: AnimationEventData) => void;
+  play?: boolean;
+  pause?: boolean;
+  flipX?: boolean;
+  alphaTest?: number;
+  asSprite?: boolean;
+  offset?: number;
+  playBackwards?: boolean;
+  resetOnEnd?: boolean;
+  instanceItems?: Vector3[];
+  maxItems?: number;
+  spriteDataset?: {
+    spriteTexture: THREE.Texture;
+    spriteData: SpriteData | null;
+    aspect: Vector3;
+  } | null;
+  canvasRenderingContext2DSettings?: CanvasRenderingContext2DSettings;
+  roundFramePosition?: boolean;
+  meshProps?: CommonMeshProps;
+} & JSX_IntrinsicElements["group"];
 type SpriteAnimatorState = {
-    current?: number;
-    offset?: number;
-    imageUrl?: string;
-    hasEnded: boolean;
-    ref: React.Ref<THREE.Group>;
+  current?: number;
+  offset?: number;
+  imageUrl?: string;
+  hasEnded: boolean;
+  ref: React.Ref<THREE.Group>;
 };
 export declare function useSpriteAnimator(): SpriteAnimatorState | null;
-export declare const SpriteAnimator: React.ForwardRefExoticComponent<Omit<SpriteAnimatorProps, "ref"> & React.RefAttributes<THREE.Group>>;
+export declare const SpriteAnimator: React.ForwardRefExoticComponent<
+  Omit<SpriteAnimatorProps, "ref"> & React.RefAttributes<THREE.Group>
+>;
 export {};
diff --git a/core/Stage.d.ts b/core/Stage.d.ts
index 21cbeb3446cbdb48da4c4111c77592f370db54b5..4d1ba3a2cfbcd3a7326ed83d77dfa4fde24d4093 100644
--- a/core/Stage.d.ts
+++ b/core/Stage.d.ts
@@ -1,26 +1,45 @@
-import * as React from 'react';
-import { EnvironmentProps } from './Environment';
-import { ContactShadowsProps } from './ContactShadows';
-import { CenterProps } from './Center';
-import { AccumulativeShadowsProps, RandomizedLightProps } from './AccumulativeShadows';
-import { PresetsType } from '../helpers/environment-assets';
-type StageShadows = Partial<AccumulativeShadowsProps> & Partial<RandomizedLightProps> & Partial<ContactShadowsProps> & {
-    type: 'contact' | 'accumulative';
+import * as React from "react";
+import { EnvironmentProps } from "./Environment";
+import { ContactShadowsProps } from "./ContactShadows";
+import { CenterProps } from "./Center";
+import {
+  AccumulativeShadowsProps,
+  RandomizedLightProps,
+} from "./AccumulativeShadows";
+import { PresetsType } from "../helpers/environment-assets";
+type StageShadows = Partial<AccumulativeShadowsProps> &
+  Partial<RandomizedLightProps> &
+  Partial<ContactShadowsProps> & {
+    type: "contact" | "accumulative";
     offset?: number;
     bias?: number;
     normalBias?: number;
     size?: number;
-};
+  };
 type StageProps = {
-    preset?: 'rembrandt' | 'portrait' | 'upfront' | 'soft' | {
+  preset?:
+    | "rembrandt"
+    | "portrait"
+    | "upfront"
+    | "soft"
+    | {
         main: [x: number, y: number, z: number];
         fill: [x: number, y: number, z: number];
-    };
-    shadows?: boolean | 'contact' | 'accumulative' | StageShadows;
-    adjustCamera?: boolean | number;
-    environment?: PresetsType | Partial<EnvironmentProps> | null;
-    intensity?: number;
-    center?: Partial<CenterProps>;
+      };
+  shadows?: boolean | "contact" | "accumulative" | StageShadows;
+  adjustCamera?: boolean | number;
+  environment?: PresetsType | Partial<EnvironmentProps> | null;
+  intensity?: number;
+  center?: Partial<CenterProps>;
 };
-export declare function Stage({ children, center, adjustCamera, intensity, shadows, environment, preset, ...props }: JSX.IntrinsicElements['group'] & StageProps): React.JSX.Element;
+export declare function Stage({
+  children,
+  center,
+  adjustCamera,
+  intensity,
+  shadows,
+  environment,
+  preset,
+  ...props
+}: JSX_IntrinsicElements["group"] & StageProps): React.JSX.Element;
 export {};
diff --git a/core/Stars.d.ts b/core/Stars.d.ts
index b682cfced2d5365300cbc7aac3c607a468f89c2a..65e5a91ec6982e941b15cba5bd134506495406cf 100644
--- a/core/Stars.d.ts
+++ b/core/Stars.d.ts
@@ -15,7 +15,7 @@ declare class StarfieldMaterial extends ShaderMaterial {
 }
 declare global {
     namespace JSX {
-        interface IntrinsicElements {
+        interface JSX_IntrinsicElements {
             starfieldMaterial: ReactThreeFiber.MaterialNode<StarfieldMaterial, []>;
         }
     }
diff --git a/core/Text.d.ts b/core/Text.d.ts
index 137a46ffead1b8f8402e1b47558708121d8602c6..2eea13afdf69b7b4e163bd6c991cf12b1b4893bb 100644
--- a/core/Text.d.ts
+++ b/core/Text.d.ts
@@ -1,38 +1,44 @@
-import * as React from 'react';
-import { ReactThreeFiber } from '@react-three/fiber';
-import { ForwardRefComponent } from '../helpers/ts-utils';
-type Props = JSX.IntrinsicElements['mesh'] & {
-    children: React.ReactNode;
-    characters?: string;
-    color?: ReactThreeFiber.Color;
-    fontSize?: number;
-    fontWeight?: number | string;
-    fontStyle?: 'italic' | 'normal';
-    maxWidth?: number;
-    lineHeight?: number;
-    letterSpacing?: number;
-    textAlign?: 'left' | 'right' | 'center' | 'justify';
-    font?: string;
-    anchorX?: number | 'left' | 'center' | 'right';
-    anchorY?: number | 'top' | 'top-baseline' | 'middle' | 'bottom-baseline' | 'bottom';
-    clipRect?: [number, number, number, number];
-    depthOffset?: number;
-    direction?: 'auto' | 'ltr' | 'rtl';
-    overflowWrap?: 'normal' | 'break-word';
-    whiteSpace?: 'normal' | 'overflowWrap' | 'nowrap';
-    outlineWidth?: number | string;
-    outlineOffsetX?: number | string;
-    outlineOffsetY?: number | string;
-    outlineBlur?: number | string;
-    outlineColor?: ReactThreeFiber.Color;
-    outlineOpacity?: number;
-    strokeWidth?: number | string;
-    strokeColor?: ReactThreeFiber.Color;
-    strokeOpacity?: number;
-    fillOpacity?: number;
-    sdfGlyphSize?: number;
-    debugSDF?: boolean;
-    onSync?: (troika: any) => void;
+import * as React from "react";
+import { ReactThreeFiber } from "@react-three/fiber";
+import { ForwardRefComponent } from "../helpers/ts-utils";
+type Props = JSX_IntrinsicElements["mesh"] & {
+  children: React.ReactNode;
+  characters?: string;
+  color?: ReactThreeFiber.Color;
+  fontSize?: number;
+  fontWeight?: number | string;
+  fontStyle?: "italic" | "normal";
+  maxWidth?: number;
+  lineHeight?: number;
+  letterSpacing?: number;
+  textAlign?: "left" | "right" | "center" | "justify";
+  font?: string;
+  anchorX?: number | "left" | "center" | "right";
+  anchorY?:
+    | number
+    | "top"
+    | "top-baseline"
+    | "middle"
+    | "bottom-baseline"
+    | "bottom";
+  clipRect?: [number, number, number, number];
+  depthOffset?: number;
+  direction?: "auto" | "ltr" | "rtl";
+  overflowWrap?: "normal" | "break-word";
+  whiteSpace?: "normal" | "overflowWrap" | "nowrap";
+  outlineWidth?: number | string;
+  outlineOffsetX?: number | string;
+  outlineOffsetY?: number | string;
+  outlineBlur?: number | string;
+  outlineColor?: ReactThreeFiber.Color;
+  outlineOpacity?: number;
+  strokeWidth?: number | string;
+  strokeColor?: ReactThreeFiber.Color;
+  strokeOpacity?: number;
+  fillOpacity?: number;
+  sdfGlyphSize?: number;
+  debugSDF?: boolean;
+  onSync?: (troika: any) => void;
 };
 export declare const Text: ForwardRefComponent<Props, any>;
 export {};
diff --git a/core/Text3D.d.ts b/core/Text3D.d.ts
index e2195fca3234a04ce88f4a4d3d17375392185362..2089fca15a75ff3469070af3d274e41abeefc881 100644
--- a/core/Text3D.d.ts
+++ b/core/Text3D.d.ts
@@ -6,7 +6,7 @@ import { FontData } from './useFont';
 import { ForwardRefComponent } from '../helpers/ts-utils';
 declare global {
     namespace JSX {
-        interface IntrinsicElements {
+        interface JSX_IntrinsicElements {
             renamedTextGeometry: Node<any, any>;
         }
     }
diff --git a/core/TransformControls.d.ts b/core/TransformControls.d.ts
index fdba2fb121105a885ca705960acb2f3c8c5c2bdf..1c93b797e465e25e81a92e4aaf8472d4af7d2dc3 100644
--- a/core/TransformControls.d.ts
+++ b/core/TransformControls.d.ts
@@ -1,18 +1,22 @@
-import { ReactThreeFiber } from '@react-three/fiber';
-import * as React from 'react';
-import * as THREE from 'three';
-import { TransformControls as TransformControlsImpl } from 'three-stdlib';
-import { ForwardRefComponent } from '../helpers/ts-utils';
-export type TransformControlsProps = ReactThreeFiber.Object3DNode<TransformControlsImpl, typeof TransformControlsImpl> & JSX.IntrinsicElements['group'] & {
+import { ReactThreeFiber } from "@react-three/fiber";
+import * as React from "react";
+import * as THREE from "three";
+import { TransformControls as TransformControlsImpl } from "three-stdlib";
+import { ForwardRefComponent } from "../helpers/ts-utils";
+export type TransformControlsProps = ReactThreeFiber.Object3DNode<
+  TransformControlsImpl,
+  typeof TransformControlsImpl
+> &
+  JSX_IntrinsicElements["group"] & {
     object?: THREE.Object3D | React.MutableRefObject<THREE.Object3D>;
     enabled?: boolean;
     axis?: string | null;
     domElement?: HTMLElement;
-    mode?: 'translate' | 'rotate' | 'scale';
+    mode?: "translate" | "rotate" | "scale";
     translationSnap?: number | null;
     rotationSnap?: number | null;
     scaleSnap?: number | null;
-    space?: 'world' | 'local';
+    space?: "world" | "local";
     size?: number;
     showX?: boolean;
     showY?: boolean;
@@ -24,5 +28,8 @@ export type TransformControlsProps = ReactThreeFiber.Object3DNode<TransformContr
     onMouseUp?: (e?: THREE.Event) => void;
     onObjectChange?: (e?: THREE.Event) => void;
     makeDefault?: boolean;
-};
-export declare const TransformControls: ForwardRefComponent<TransformControlsProps, TransformControlsImpl>;
+  };
+export declare const TransformControls: ForwardRefComponent<
+  TransformControlsProps,
+  TransformControlsImpl
+>;
diff --git a/core/Wireframe.d.ts b/core/Wireframe.d.ts
index 3aecbe04ae526b163764be7f9da0d3703194c454..45ed775e1f7917a05a42a3da118caa03fe87c701 100644
--- a/core/Wireframe.d.ts
+++ b/core/Wireframe.d.ts
@@ -4,7 +4,7 @@ import { MaterialNode } from '@react-three/fiber';
 import { WireframeMaterialProps } from '../materials/WireframeMaterial';
 declare global {
     namespace JSX {
-        interface IntrinsicElements {
+        interface JSX_IntrinsicElements {
             meshWireframeMaterial: MaterialNode<THREE.ShaderMaterial, WireframeMaterialProps>;
         }
     }
diff --git a/core/shapes.d.ts b/core/shapes.d.ts
index 6f390c7558f2029930b83082222d803cf71bd906..3e9ce195d47d2f7d85d732f0e8ea1be92a3f56ee 100644
--- a/core/shapes.d.ts
+++ b/core/shapes.d.ts
@@ -1,25 +1,84 @@
-import * as THREE from 'three';
-import { ForwardRefComponent } from '../helpers/ts-utils';
-export type Args<T> = T extends new (...args: any) => any ? ConstructorParameters<T> : T;
-export type ShapeProps<T> = Omit<JSX.IntrinsicElements['mesh'], 'args'> & {
-    args?: Args<T>;
+import * as THREE from "three";
+import { ForwardRefComponent } from "../helpers/ts-utils";
+export type Args<T> = T extends new (...args: any) => any
+  ? ConstructorParameters<T>
+  : T;
+export type ShapeProps<T> = Omit<JSX_IntrinsicElements["mesh"], "args"> & {
+  args?: Args<T>;
 };
-export declare const Box: ForwardRefComponent<ShapeProps<typeof THREE.BoxGeometry>, THREE.Mesh<THREE.BufferGeometry, THREE.Material | THREE.Material[]>>;
-export declare const Circle: ForwardRefComponent<ShapeProps<typeof THREE.CircleGeometry>, THREE.Mesh<THREE.BufferGeometry, THREE.Material | THREE.Material[]>>;
-export declare const Cone: ForwardRefComponent<ShapeProps<typeof THREE.ConeGeometry>, THREE.Mesh<THREE.BufferGeometry, THREE.Material | THREE.Material[]>>;
-export declare const Cylinder: ForwardRefComponent<ShapeProps<typeof THREE.CylinderGeometry>, THREE.Mesh<THREE.BufferGeometry, THREE.Material | THREE.Material[]>>;
-export declare const Sphere: ForwardRefComponent<ShapeProps<typeof THREE.SphereGeometry>, THREE.Mesh<THREE.BufferGeometry, THREE.Material | THREE.Material[]>>;
-export declare const Plane: ForwardRefComponent<ShapeProps<typeof THREE.PlaneGeometry>, THREE.Mesh<THREE.BufferGeometry, THREE.Material | THREE.Material[]>>;
-export declare const Tube: ForwardRefComponent<ShapeProps<typeof THREE.TubeGeometry>, THREE.Mesh<THREE.BufferGeometry, THREE.Material | THREE.Material[]>>;
-export declare const Torus: ForwardRefComponent<ShapeProps<typeof THREE.TorusGeometry>, THREE.Mesh<THREE.BufferGeometry, THREE.Material | THREE.Material[]>>;
-export declare const TorusKnot: ForwardRefComponent<ShapeProps<typeof THREE.TorusKnotGeometry>, THREE.Mesh<THREE.BufferGeometry, THREE.Material | THREE.Material[]>>;
-export declare const Tetrahedron: ForwardRefComponent<ShapeProps<typeof THREE.TetrahedronGeometry>, THREE.Mesh<THREE.BufferGeometry, THREE.Material | THREE.Material[]>>;
-export declare const Ring: ForwardRefComponent<ShapeProps<typeof THREE.RingGeometry>, THREE.Mesh<THREE.BufferGeometry, THREE.Material | THREE.Material[]>>;
-export declare const Polyhedron: ForwardRefComponent<ShapeProps<typeof THREE.PolyhedronGeometry>, THREE.Mesh<THREE.BufferGeometry, THREE.Material | THREE.Material[]>>;
-export declare const Icosahedron: ForwardRefComponent<ShapeProps<typeof THREE.IcosahedronGeometry>, THREE.Mesh<THREE.BufferGeometry, THREE.Material | THREE.Material[]>>;
-export declare const Octahedron: ForwardRefComponent<ShapeProps<typeof THREE.OctahedronGeometry>, THREE.Mesh<THREE.BufferGeometry, THREE.Material | THREE.Material[]>>;
-export declare const Dodecahedron: ForwardRefComponent<ShapeProps<typeof THREE.DodecahedronGeometry>, THREE.Mesh<THREE.BufferGeometry, THREE.Material | THREE.Material[]>>;
-export declare const Extrude: ForwardRefComponent<ShapeProps<typeof THREE.ExtrudeGeometry>, THREE.Mesh<THREE.BufferGeometry, THREE.Material | THREE.Material[]>>;
-export declare const Lathe: ForwardRefComponent<ShapeProps<typeof THREE.LatheGeometry>, THREE.Mesh<THREE.BufferGeometry, THREE.Material | THREE.Material[]>>;
-export declare const Capsule: ForwardRefComponent<ShapeProps<typeof THREE.CapsuleGeometry>, THREE.Mesh<THREE.BufferGeometry, THREE.Material | THREE.Material[]>>;
-export declare const Shape: ForwardRefComponent<ShapeProps<typeof THREE.ShapeGeometry>, THREE.Mesh<THREE.BufferGeometry, THREE.Material | THREE.Material[]>>;
+export declare const Box: ForwardRefComponent<
+  ShapeProps<typeof THREE.BoxGeometry>,
+  THREE.Mesh<THREE.BufferGeometry, THREE.Material | THREE.Material[]>
+>;
+export declare const Circle: ForwardRefComponent<
+  ShapeProps<typeof THREE.CircleGeometry>,
+  THREE.Mesh<THREE.BufferGeometry, THREE.Material | THREE.Material[]>
+>;
+export declare const Cone: ForwardRefComponent<
+  ShapeProps<typeof THREE.ConeGeometry>,
+  THREE.Mesh<THREE.BufferGeometry, THREE.Material | THREE.Material[]>
+>;
+export declare const Cylinder: ForwardRefComponent<
+  ShapeProps<typeof THREE.CylinderGeometry>,
+  THREE.Mesh<THREE.BufferGeometry, THREE.Material | THREE.Material[]>
+>;
+export declare const Sphere: ForwardRefComponent<
+  ShapeProps<typeof THREE.SphereGeometry>,
+  THREE.Mesh<THREE.BufferGeometry, THREE.Material | THREE.Material[]>
+>;
+export declare const Plane: ForwardRefComponent<
+  ShapeProps<typeof THREE.PlaneGeometry>,
+  THREE.Mesh<THREE.BufferGeometry, THREE.Material | THREE.Material[]>
+>;
+export declare const Tube: ForwardRefComponent<
+  ShapeProps<typeof THREE.TubeGeometry>,
+  THREE.Mesh<THREE.BufferGeometry, THREE.Material | THREE.Material[]>
+>;
+export declare const Torus: ForwardRefComponent<
+  ShapeProps<typeof THREE.TorusGeometry>,
+  THREE.Mesh<THREE.BufferGeometry, THREE.Material | THREE.Material[]>
+>;
+export declare const TorusKnot: ForwardRefComponent<
+  ShapeProps<typeof THREE.TorusKnotGeometry>,
+  THREE.Mesh<THREE.BufferGeometry, THREE.Material | THREE.Material[]>
+>;
+export declare const Tetrahedron: ForwardRefComponent<
+  ShapeProps<typeof THREE.TetrahedronGeometry>,
+  THREE.Mesh<THREE.BufferGeometry, THREE.Material | THREE.Material[]>
+>;
+export declare const Ring: ForwardRefComponent<
+  ShapeProps<typeof THREE.RingGeometry>,
+  THREE.Mesh<THREE.BufferGeometry, THREE.Material | THREE.Material[]>
+>;
+export declare const Polyhedron: ForwardRefComponent<
+  ShapeProps<typeof THREE.PolyhedronGeometry>,
+  THREE.Mesh<THREE.BufferGeometry, THREE.Material | THREE.Material[]>
+>;
+export declare const Icosahedron: ForwardRefComponent<
+  ShapeProps<typeof THREE.IcosahedronGeometry>,
+  THREE.Mesh<THREE.BufferGeometry, THREE.Material | THREE.Material[]>
+>;
+export declare const Octahedron: ForwardRefComponent<
+  ShapeProps<typeof THREE.OctahedronGeometry>,
+  THREE.Mesh<THREE.BufferGeometry, THREE.Material | THREE.Material[]>
+>;
+export declare const Dodecahedron: ForwardRefComponent<
+  ShapeProps<typeof THREE.DodecahedronGeometry>,
+  THREE.Mesh<THREE.BufferGeometry, THREE.Material | THREE.Material[]>
+>;
+export declare const Extrude: ForwardRefComponent<
+  ShapeProps<typeof THREE.ExtrudeGeometry>,
+  THREE.Mesh<THREE.BufferGeometry, THREE.Material | THREE.Material[]>
+>;
+export declare const Lathe: ForwardRefComponent<
+  ShapeProps<typeof THREE.LatheGeometry>,
+  THREE.Mesh<THREE.BufferGeometry, THREE.Material | THREE.Material[]>
+>;
+export declare const Capsule: ForwardRefComponent<
+  ShapeProps<typeof THREE.CapsuleGeometry>,
+  THREE.Mesh<THREE.BufferGeometry, THREE.Material | THREE.Material[]>
+>;
+export declare const Shape: ForwardRefComponent<
+  ShapeProps<typeof THREE.ShapeGeometry>,
+  THREE.Mesh<THREE.BufferGeometry, THREE.Material | THREE.Material[]>
+>;
diff --git a/materials/MeshReflectorMaterial.d.ts b/materials/MeshReflectorMaterial.d.ts
index e906d4c68681708d640d4927990b2a599e7c2aca..11f1a161fffd4e78f791ae1245e52332d9c77c50 100644
--- a/materials/MeshReflectorMaterial.d.ts
+++ b/materials/MeshReflectorMaterial.d.ts
@@ -1,66 +1,66 @@
-import { Matrix4, MeshStandardMaterial, Texture } from 'three';
+import { Matrix4, MeshStandardMaterial, Texture } from "three";
 export declare class MeshReflectorMaterial extends MeshStandardMaterial {
-    private _tDepth;
-    private _distortionMap;
-    private _tDiffuse;
-    private _tDiffuseBlur;
-    private _textureMatrix;
-    private _hasBlur;
-    private _mirror;
-    private _mixBlur;
-    private _blurStrength;
-    private _minDepthThreshold;
-    private _maxDepthThreshold;
-    private _depthScale;
-    private _depthToBlurRatioBias;
-    private _distortion;
-    private _mixContrast;
-    constructor(parameters?: {});
-    onBeforeCompile(shader: any): void;
-    get tDiffuse(): Texture | null;
-    set tDiffuse(v: Texture | null);
-    get tDepth(): Texture | null;
-    set tDepth(v: Texture | null);
-    get distortionMap(): Texture | null;
-    set distortionMap(v: Texture | null);
-    get tDiffuseBlur(): Texture | null;
-    set tDiffuseBlur(v: Texture | null);
-    get textureMatrix(): Matrix4 | null;
-    set textureMatrix(v: Matrix4 | null);
-    get hasBlur(): boolean;
-    set hasBlur(v: boolean);
-    get mirror(): number;
-    set mirror(v: number);
-    get mixBlur(): number;
-    set mixBlur(v: number);
-    get mixStrength(): number;
-    set mixStrength(v: number);
-    get minDepthThreshold(): number;
-    set minDepthThreshold(v: number);
-    get maxDepthThreshold(): number;
-    set maxDepthThreshold(v: number);
-    get depthScale(): number;
-    set depthScale(v: number);
-    get depthToBlurRatioBias(): number;
-    set depthToBlurRatioBias(v: number);
-    get distortion(): number;
-    set distortion(v: number);
-    get mixContrast(): number;
-    set mixContrast(v: number);
+  private _tDepth;
+  private _distortionMap;
+  private _tDiffuse;
+  private _tDiffuseBlur;
+  private _textureMatrix;
+  private _hasBlur;
+  private _mirror;
+  private _mixBlur;
+  private _blurStrength;
+  private _minDepthThreshold;
+  private _maxDepthThreshold;
+  private _depthScale;
+  private _depthToBlurRatioBias;
+  private _distortion;
+  private _mixContrast;
+  constructor(parameters?: {});
+  onBeforeCompile(shader: any): void;
+  get tDiffuse(): Texture | null;
+  set tDiffuse(v: Texture | null);
+  get tDepth(): Texture | null;
+  set tDepth(v: Texture | null);
+  get distortionMap(): Texture | null;
+  set distortionMap(v: Texture | null);
+  get tDiffuseBlur(): Texture | null;
+  set tDiffuseBlur(v: Texture | null);
+  get textureMatrix(): Matrix4 | null;
+  set textureMatrix(v: Matrix4 | null);
+  get hasBlur(): boolean;
+  set hasBlur(v: boolean);
+  get mirror(): number;
+  set mirror(v: number);
+  get mixBlur(): number;
+  set mixBlur(v: number);
+  get mixStrength(): number;
+  set mixStrength(v: number);
+  get minDepthThreshold(): number;
+  set minDepthThreshold(v: number);
+  get maxDepthThreshold(): number;
+  set maxDepthThreshold(v: number);
+  get depthScale(): number;
+  set depthScale(v: number);
+  get depthToBlurRatioBias(): number;
+  set depthToBlurRatioBias(v: number);
+  get distortion(): number;
+  set distortion(v: number);
+  get mixContrast(): number;
+  set mixContrast(v: number);
 }
 export type MeshReflectorMaterialProps = {
-    mixBlur: number;
-    mixStrength: number;
-    mirror: number;
-    textureMatrix: Matrix4;
-    tDiffuse: Texture;
-    distortionMap?: Texture;
-    tDiffuseBlur: Texture;
-    hasBlur: boolean;
-    minDepthThreshold: number;
-    maxDepthThreshold: number;
-    depthScale: number;
-    depthToBlurRatioBias: number;
-    distortion: number;
-    mixContrast: number;
-} & JSX.IntrinsicElements['meshStandardMaterial'];
+  mixBlur: number;
+  mixStrength: number;
+  mirror: number;
+  textureMatrix: Matrix4;
+  tDiffuse: Texture;
+  distortionMap?: Texture;
+  tDiffuseBlur: Texture;
+  hasBlur: boolean;
+  minDepthThreshold: number;
+  maxDepthThreshold: number;
+  depthScale: number;
+  depthToBlurRatioBias: number;
+  distortion: number;
+  mixContrast: number;
+} & JSX_IntrinsicElements["meshStandardMaterial"];
diff --git a/web/Facemesh.d.ts b/web/Facemesh.d.ts
index 372df50af1aa12a947a7f82e8abd758d0cfeb820..e6bb948d9ec362f9ea22036831ae7e882011781d 100644
--- a/web/Facemesh.d.ts
+++ b/web/Facemesh.d.ts
@@ -1,30 +1,33 @@
-import * as React from 'react';
-import * as THREE from 'three';
+import * as React from "react";
+import * as THREE from "three";
 export type MediaPipeFaceMesh = typeof FacemeshDatas.SAMPLE_FACE;
-export type MediaPipePoints = typeof FacemeshDatas.SAMPLE_FACE.keypoints | (typeof FacemeshDatas.SAMPLE_FACELANDMARKER_RESULT.faceLandmarks)[0];
+export type MediaPipePoints =
+  | typeof FacemeshDatas.SAMPLE_FACE.keypoints
+  | (typeof FacemeshDatas.SAMPLE_FACELANDMARKER_RESULT.faceLandmarks)[0];
 export type FacemeshProps = {
-    points?: MediaPipePoints;
-    face?: MediaPipeFaceMesh;
-    width?: number;
-    height?: number;
-    depth?: number;
-    verticalTri?: [number, number, number];
-    origin?: number | THREE.Vector3;
-    facialTransformationMatrix?: (typeof FacemeshDatas.SAMPLE_FACELANDMARKER_RESULT.facialTransformationMatrixes)[0];
-    offset?: boolean;
-    offsetScalar?: number;
-    faceBlendshapes?: (typeof FacemeshDatas.SAMPLE_FACELANDMARKER_RESULT.faceBlendshapes)[0];
-    eyes?: boolean;
-    eyesAsOrigin?: boolean;
-    debug?: boolean;
-} & Omit<JSX.IntrinsicElements['group'], 'ref'>;
+  points?: MediaPipePoints;
+  face?: MediaPipeFaceMesh;
+  width?: number;
+  height?: number;
+  depth?: number;
+  verticalTri?: [number, number, number];
+  origin?: number | THREE.Vector3;
+  facialTransformationMatrix?: (typeof FacemeshDatas.SAMPLE_FACELANDMARKER_RESULT.facialTransformationMatrixes)[0];
+  offset?: boolean;
+  offsetScalar?: number;
+  faceBlendshapes?: (typeof FacemeshDatas.SAMPLE_FACELANDMARKER_RESULT.faceBlendshapes)[0];
+  eyes?: boolean;
+  eyesAsOrigin?: boolean;
+  debug?: boolean;
+} & Omit<JSX_IntrinsicElements["group"], "ref">;
 export type FacemeshApi = {
-    meshRef: React.RefObject<THREE.Mesh>;
-    outerRef: React.RefObject<THREE.Group>;
-    eyeRightRef: React.RefObject<FacemeshEyeApi>;
-    eyeLeftRef: React.RefObject<FacemeshEyeApi>;
+  meshRef: React.RefObject<THREE.Mesh>;
+  outerRef: React.RefObject<THREE.Group>;
+  eyeRightRef: React.RefObject<FacemeshEyeApi>;
+  eyeLeftRef: React.RefObject<FacemeshEyeApi>;
 };
-export declare const Facemesh: React.ForwardRefExoticComponent<{
+export declare const Facemesh: React.ForwardRefExoticComponent<
+  {
     points?: MediaPipePoints;
     face?: MediaPipeFaceMesh;
     width?: number;
@@ -39,79 +42,90 @@ export declare const Facemesh: React.ForwardRefExoticComponent<{
     eyes?: boolean;
     eyesAsOrigin?: boolean;
     debug?: boolean;
-} & Omit<import("@react-three/fiber").GroupProps, "ref"> & React.RefAttributes<FacemeshApi>>;
+  } & Omit<import("@react-three/fiber").GroupProps, "ref"> &
+    React.RefAttributes<FacemeshApi>
+>;
 export type FacemeshEyeProps = {
-    side: 'left' | 'right';
-    debug?: boolean;
+  side: "left" | "right";
+  debug?: boolean;
 };
 export type FacemeshEyeApi = {
-    eyeMeshRef: React.RefObject<THREE.Group>;
-    irisDirRef: React.RefObject<THREE.Group>;
-    _computeSphere: (faceGeometry: THREE.BufferGeometry) => THREE.Sphere;
-    _update: (faceGeometry: THREE.BufferGeometry, faceBlendshapes: FacemeshProps['faceBlendshapes'], sphere?: THREE.Sphere) => void;
+  eyeMeshRef: React.RefObject<THREE.Group>;
+  irisDirRef: React.RefObject<THREE.Group>;
+  _computeSphere: (faceGeometry: THREE.BufferGeometry) => THREE.Sphere;
+  _update: (
+    faceGeometry: THREE.BufferGeometry,
+    faceBlendshapes: FacemeshProps["faceBlendshapes"],
+    sphere?: THREE.Sphere
+  ) => void;
 };
 export declare const FacemeshEyeDefaults: {
-    contourLandmarks: {
-        right: number[];
-        left: number[];
-    };
-    blendshapes: {
-        right: number[];
-        left: number[];
-    };
-    color: {
-        right: string;
-        left: string;
-    };
-    fov: {
-        horizontal: number;
-        vertical: number;
-    };
+  contourLandmarks: {
+    right: number[];
+    left: number[];
+  };
+  blendshapes: {
+    right: number[];
+    left: number[];
+  };
+  color: {
+    right: string;
+    left: string;
+  };
+  fov: {
+    horizontal: number;
+    vertical: number;
+  };
 };
-export declare const FacemeshEye: React.ForwardRefExoticComponent<FacemeshEyeProps & React.RefAttributes<FacemeshEyeApi>>;
+export declare const FacemeshEye: React.ForwardRefExoticComponent<
+  FacemeshEyeProps & React.RefAttributes<FacemeshEyeApi>
+>;
 export declare const FacemeshDatas: {
-    TRIANGULATION: number[];
-    SAMPLE_FACE: {
-        keypoints: ({
-            x: number;
-            y: number;
-            z: number;
-            name: string;
-        } | {
-            x: number;
-            y: number;
-            z: number;
-            name?: undefined;
-        })[];
-        box: {
-            xMin: number;
-            yMin: number;
-            xMax: number;
-            yMax: number;
-            width: number;
-            height: number;
-        };
-    };
-    SAMPLE_FACELANDMARKER_RESULT: {
-        faceLandmarks: {
-            x: number;
-            y: number;
-            z: number;
-        }[][];
-        faceBlendshapes: {
-            categories: {
-                index: number;
-                score: number;
-                categoryName: string;
-                displayName: string;
-            }[];
-            headIndex: number;
-            headName: string;
-        }[];
-        facialTransformationMatrixes: {
-            rows: number;
-            columns: number;
-            data: number[];
-        }[];
+  TRIANGULATION: number[];
+  SAMPLE_FACE: {
+    keypoints: (
+      | {
+          x: number;
+          y: number;
+          z: number;
+          name: string;
+        }
+      | {
+          x: number;
+          y: number;
+          z: number;
+          name?: undefined;
+        }
+    )[];
+    box: {
+      xMin: number;
+      yMin: number;
+      xMax: number;
+      yMax: number;
+      width: number;
+      height: number;
     };
+  };
+  SAMPLE_FACELANDMARKER_RESULT: {
+    faceLandmarks: {
+      x: number;
+      y: number;
+      z: number;
+    }[][];
+    faceBlendshapes: {
+      categories: {
+        index: number;
+        score: number;
+        categoryName: string;
+        displayName: string;
+      }[];
+      headIndex: number;
+      headName: string;
+    }[];
+    facialTransformationMatrixes: {
+      rows: number;
+      columns: number;
+      data: number[];
+    }[];
+  };
 };
diff --git a/web/Select.d.ts b/web/Select.d.ts
index 108185e1f035fac035757931435d2860ada6be80..ad6ace74ce8e637f22a275d3496d75ce5efe3a1a 100644
--- a/web/Select.d.ts
+++ b/web/Select.d.ts
@@ -1,14 +1,24 @@
-import * as React from 'react';
-import * as THREE from 'three';
-type Props = JSX.IntrinsicElements['group'] & {
-    multiple?: boolean;
-    box?: boolean;
-    border?: string;
-    backgroundColor?: string;
-    onChange?: (selected: THREE.Object3D[]) => void;
-    onChangePointerUp?: (selected: THREE.Object3D[]) => void;
-    filter?: (selected: THREE.Object3D[]) => THREE.Object3D[];
+import * as React from "react";
+import * as THREE from "three";
+type Props = JSX_IntrinsicElements["group"] & {
+  multiple?: boolean;
+  box?: boolean;
+  border?: string;
+  backgroundColor?: string;
+  onChange?: (selected: THREE.Object3D[]) => void;
+  onChangePointerUp?: (selected: THREE.Object3D[]) => void;
+  filter?: (selected: THREE.Object3D[]) => THREE.Object3D[];
 };
-export declare function Select({ box, multiple, children, onChange, onChangePointerUp, border, backgroundColor, filter: customFilter, ...props }: Props): React.JSX.Element;
+export declare function Select({
+  box,
+  multiple,
+  children,
+  onChange,
+  onChangePointerUp,
+  border,
+  backgroundColor,
+  filter: customFilter,
+  ...props
+}: Props): React.JSX.Element;
 export declare function useSelect(): THREE.Object3D[];
 export {};
