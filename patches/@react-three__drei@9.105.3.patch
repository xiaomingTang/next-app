diff --git a/core/AccumulativeShadows.d.ts b/core/AccumulativeShadows.d.ts
index dc6e0a491229f328fb6176843e8ad5ac633aab03..02264f41ec15163442666ca4a4c0eb2e33d32931 100644
--- a/core/AccumulativeShadows.d.ts
+++ b/core/AccumulativeShadows.d.ts
@@ -35,14 +35,12 @@ type SoftShadowMaterialProps = {
     blend?: number;
 };
 declare global {
-    namespace JSX {
-        interface IntrinsicElements {
-            softShadowMaterial: JSX.IntrinsicElements['shaderMaterial'] & SoftShadowMaterialProps;
-        }
+    interface JSX_IntrinsicElements {
+        softShadowMaterial: JSX_IntrinsicElements['shaderMaterial'] & SoftShadowMaterialProps;
     }
 }
 export declare const accumulativeContext: React.Context<AccumulativeContext>;
-export declare const AccumulativeShadows: ForwardRefComponent<JSX.IntrinsicElements['group'] & AccumulativeShadowsProps, AccumulativeContext>;
+export declare const AccumulativeShadows: ForwardRefComponent<JSX_IntrinsicElements['group'] & AccumulativeShadowsProps, AccumulativeContext>;
 export type RandomizedLightProps = {
     frames?: number;
     position?: [x: number, y: number, z: number];
@@ -57,5 +55,5 @@ export type RandomizedLightProps = {
     near?: number;
     far?: number;
 };
-export declare const RandomizedLight: ForwardRefComponent<JSX.IntrinsicElements['group'] & RandomizedLightProps, AccumulativeLightContext>;
+export declare const RandomizedLight: ForwardRefComponent<JSX_IntrinsicElements['group'] & RandomizedLightProps, AccumulativeLightContext>;
 export {};
diff --git a/core/Backdrop.d.ts b/core/Backdrop.d.ts
index f1da2d2a5c2b644f6082474632101b881afd54e8..ee14d133e1db15c7ac988eb355429a85c2c65b4b 100644
--- a/core/Backdrop.d.ts
+++ b/core/Backdrop.d.ts
@@ -1,5 +1,5 @@
 import * as React from 'react';
-export type BackdropProps = JSX.IntrinsicElements['group'] & {
+export type BackdropProps = JSX_IntrinsicElements['group'] & {
     floor?: number;
     segments?: number;
     receiveShadow?: boolean;
diff --git a/core/Billboard.d.ts b/core/Billboard.d.ts
index a27cddbc7233a3eafdfab4ca31ded5823f0aff02..5b980a3cca8c1945ac4d9038989fce3aeeb23436 100644
--- a/core/Billboard.d.ts
+++ b/core/Billboard.d.ts
@@ -5,5 +5,5 @@ export type BillboardProps = {
     lockX?: boolean;
     lockY?: boolean;
     lockZ?: boolean;
-} & JSX.IntrinsicElements['group'];
+} & JSX_IntrinsicElements['group'];
 export declare const Billboard: ForwardRefComponent<BillboardProps, Group>;
diff --git a/core/Bounds.d.ts b/core/Bounds.d.ts
index ec12162b0341942187b8dd142ef12523f70cb448..8188b9649ddd66b1430a41797a4e7c5d7ae1cb2a 100644
--- a/core/Bounds.d.ts
+++ b/core/Bounds.d.ts
@@ -22,7 +22,7 @@ export type BoundsApi = {
     fit(): BoundsApi;
     clip(): BoundsApi;
 };
-export type BoundsProps = JSX.IntrinsicElements['group'] & {
+export type BoundsProps = JSX_IntrinsicElements['group'] & {
     maxDuration?: number;
     margin?: number;
     observe?: boolean;
diff --git a/core/Caustics.d.ts b/core/Caustics.d.ts
index 1ca24e0e7c04b7f0b8f6081f6ee8e5586775e8dd..bddd0442dda48b9243fe5b3fce3e387845dee3ba 100644
--- a/core/Caustics.d.ts
+++ b/core/Caustics.d.ts
@@ -2,7 +2,7 @@ import * as THREE from 'three';
 import * as React from 'react';
 import { ReactThreeFiber } from '@react-three/fiber';
 import { ForwardRefComponent } from '../helpers/ts-utils';
-type CausticsProps = JSX.IntrinsicElements['group'] & {
+type CausticsProps = JSX_IntrinsicElements['group'] & {
     frames?: number;
     debug?: boolean;
     causticsOnly: boolean;
@@ -16,20 +16,18 @@ type CausticsProps = JSX.IntrinsicElements['group'] & {
     lightSource?: [x: number, y: number, z: number] | React.MutableRefObject<THREE.Object3D>;
 };
 declare global {
-    namespace JSX {
-        interface IntrinsicElements {
-            causticsProjectionMaterial: ReactThreeFiber.MeshNormalMaterialProps & {
-                viewMatrix?: {
-                    value: THREE.Matrix4;
-                };
-                color?: ReactThreeFiber.Color;
-                causticsTexture?: THREE.Texture;
-                causticsTextureB?: THREE.Texture;
-                lightProjMatrix?: THREE.Matrix4;
-                lightViewMatrix?: THREE.Matrix4;
-            };
-        }
-    }
+  interface JSX_IntrinsicElements {
+      causticsProjectionMaterial: ReactThreeFiber.MeshNormalMaterialProps & {
+          viewMatrix?: {
+              value: THREE.Matrix4;
+          };
+          color?: ReactThreeFiber.Color;
+          causticsTexture?: THREE.Texture;
+          causticsTextureB?: THREE.Texture;
+          lightProjMatrix?: THREE.Matrix4;
+          lightViewMatrix?: THREE.Matrix4;
+      };
+  }
 }
 export declare const Caustics: ForwardRefComponent<CausticsProps, THREE.Group>;
 export {};
diff --git a/core/Center.d.ts b/core/Center.d.ts
index e00a1efc9028c4b13c0e6106232862f8b4ce653d..40a02b91156e1d8400e36eb089ead182c54d3237 100644
--- a/core/Center.d.ts
+++ b/core/Center.d.ts
@@ -28,4 +28,4 @@ export type CenterProps = {
     onCentered?: (props: OnCenterCallbackProps) => void;
     cacheKey?: any;
 };
-export declare const Center: ForwardRefComponent<JSX.IntrinsicElements['group'] & CenterProps, Group>;
+export declare const Center: ForwardRefComponent<JSX_IntrinsicElements['group'] & CenterProps, Group>;
diff --git a/core/Clone.d.ts b/core/Clone.d.ts
index cf95554052a40dbf815610bcdcb24a66e56b7176..f44c41255e5c78ee29ec8a2423a1b21d9b2441ea 100644
--- a/core/Clone.d.ts
+++ b/core/Clone.d.ts
@@ -12,4 +12,4 @@ export type CloneProps = {
     receiveShadow?: boolean;
     isChild?: boolean;
 };
-export declare const Clone: ForwardRefComponent<Omit<JSX.IntrinsicElements['group'], 'children'> & CloneProps, THREE.Group>;
+export declare const Clone: ForwardRefComponent<Omit<JSX_IntrinsicElements['group'], 'children'> & CloneProps, THREE.Group>;
diff --git a/core/Cloud.d.ts b/core/Cloud.d.ts
index ac5335eb742d2a69875ca72fd3db072c50618cb7..802f6fd213ffe571142bfc61fee4235afc9db173 100644
--- a/core/Cloud.d.ts
+++ b/core/Cloud.d.ts
@@ -2,11 +2,9 @@ import * as React from 'react';
 import { Color, Group, Vector3, Material, MeshLambertMaterial, Matrix4 } from 'three';
 import { MaterialNode, ReactThreeFiber } from '@react-three/fiber';
 declare global {
-    namespace JSX {
-        interface IntrinsicElements {
-            cloudMaterial: MaterialNode<MeshLambertMaterial, typeof MeshLambertMaterial>;
-        }
-    }
+  interface JSX_IntrinsicElements {
+      cloudMaterial: MaterialNode<MeshLambertMaterial, typeof MeshLambertMaterial>;
+  }
 }
 type CloudState = {
     uuid: string;
@@ -28,14 +26,14 @@ type CloudState = {
     rotationFactor: number;
     color: Color;
 };
-type CloudsProps = JSX.IntrinsicElements['group'] & {
+type CloudsProps = JSX_IntrinsicElements['group'] & {
     texture?: string;
     limit?: number;
     range?: number;
     material?: typeof Material;
     frustumCulled?: boolean;
 };
-type CloudProps = JSX.IntrinsicElements['group'] & {
+type CloudProps = JSX_IntrinsicElements['group'] & {
     seed?: number;
     segments?: number;
     bounds?: ReactThreeFiber.Vector3;
diff --git a/core/ContactShadows.d.ts b/core/ContactShadows.d.ts
index 7574dafa6b25adeabfc1f49e49c5ef3dce3a85f3..864530d54d4b5eedb1419694027597c8884eac92 100644
--- a/core/ContactShadows.d.ts
+++ b/core/ContactShadows.d.ts
@@ -14,4 +14,4 @@ export type ContactShadowsProps = {
     color?: THREE.ColorRepresentation;
     depthWrite?: boolean;
 };
-export declare const ContactShadows: ForwardRefComponent<Omit<JSX.IntrinsicElements['group'], 'scale'> & ContactShadowsProps, THREE.Group>;
+export declare const ContactShadows: ForwardRefComponent<Omit<JSX_IntrinsicElements['group'], 'scale'> & ContactShadowsProps, THREE.Group>;
diff --git a/core/CubeCamera.d.ts b/core/CubeCamera.d.ts
index bfd23850d564767b9b0742340340069911eda9eb..86521c9b0a9c6a726a82f9ece63439593dd4947e 100644
--- a/core/CubeCamera.d.ts
+++ b/core/CubeCamera.d.ts
@@ -1,7 +1,7 @@
 import { Texture } from 'three';
 import * as React from 'react';
 import { CubeCameraOptions } from './useCubeCamera';
-type Props = Omit<JSX.IntrinsicElements['group'], 'children'> & {
+type Props = Omit<JSX_IntrinsicElements['group'], 'children'> & {
     children: (tex: Texture) => React.ReactNode;
     frames?: number;
 } & CubeCameraOptions;
diff --git a/core/CurveModifier.d.ts b/core/CurveModifier.d.ts
index 00fb70c7ac1bb483c451f8c781445d7c231e82cb..be2d46c9b84ae76fab3a64f2ec1fc60d4d21b5f3 100644
--- a/core/CurveModifier.d.ts
+++ b/core/CurveModifier.d.ts
@@ -3,7 +3,7 @@ import * as THREE from 'three';
 import { Flow } from 'three-stdlib';
 import { ForwardRefComponent } from '../helpers/ts-utils';
 export interface CurveModifierProps {
-    children: React.ReactElement<JSX.IntrinsicElements['mesh']>;
+    children: React.ReactElement<JSX_IntrinsicElements['mesh']>;
     curve?: THREE.Curve<THREE.Vector3>;
 }
 export type CurveModifierRef = Pick<Flow, 'moveAlongCurve'>;
diff --git a/core/Decal.d.ts b/core/Decal.d.ts
index 7e6e8b1ca4a19ad8470cabfaa9ce98232114d7bc..90b438b10990058a23da95a70c7b9588490e4b7c 100644
--- a/core/Decal.d.ts
+++ b/core/Decal.d.ts
@@ -2,7 +2,7 @@ import * as React from 'react';
 import * as THREE from 'three';
 import * as FIBER from '@react-three/fiber';
 import { ForwardRefComponent } from '../helpers/ts-utils';
-export type DecalProps = Omit<JSX.IntrinsicElements['mesh'], 'children'> & {
+export type DecalProps = Omit<JSX_IntrinsicElements['mesh'], 'children'> & {
     debug?: boolean;
     mesh?: React.MutableRefObject<THREE.Mesh>;
     position?: FIBER.Vector3;
diff --git a/core/Detailed.d.ts b/core/Detailed.d.ts
index db4b378efac6297814657244a804762898d0f909..9c9cda1e53c4c06bb5bccc1dcaeb97f8e38003b8 100644
--- a/core/Detailed.d.ts
+++ b/core/Detailed.d.ts
@@ -1,7 +1,7 @@
 import * as React from 'react';
 import { LOD, Object3D } from 'three';
 import { ForwardRefComponent } from '../helpers/ts-utils';
-type Props = JSX.IntrinsicElements['lOD'] & {
+type Props = JSX_IntrinsicElements['lOD'] & {
     children: React.ReactElement<Object3D>[];
     hysteresis?: number;
     distances: number[];
diff --git a/core/Effects.d.ts b/core/Effects.d.ts
index 573fb243463a19c5335125800032a926068b9ed9..e05ae3f652e8d2f34888391864f59f73a4583dbf 100644
--- a/core/Effects.d.ts
+++ b/core/Effects.d.ts
@@ -16,12 +16,10 @@ type Props = ReactThreeFiber.Node<EffectComposer, typeof EffectComposer> & {
     anisotropy?: number;
 };
 declare global {
-    namespace JSX {
-        interface IntrinsicElements {
-            effectComposer: ReactThreeFiber.Node<EffectComposer, typeof EffectComposer>;
-            renderPass: ReactThreeFiber.Node<RenderPass, typeof RenderPass>;
-            shaderPass: ReactThreeFiber.Node<ShaderPass, typeof ShaderPass>;
-        }
+    interface JSX_IntrinsicElements {
+        effectComposer: ReactThreeFiber.Node<EffectComposer, typeof EffectComposer>;
+        renderPass: ReactThreeFiber.Node<RenderPass, typeof RenderPass>;
+        shaderPass: ReactThreeFiber.Node<ShaderPass, typeof ShaderPass>;
     }
 }
 export declare const isWebGL2Available: () => boolean;
diff --git a/core/Environment.d.ts b/core/Environment.d.ts
index e590f1cbb3ed5fb029636b42160807b337753162..4742141513803e8e45f04de4006369c2d431d198 100644
--- a/core/Environment.d.ts
+++ b/core/Environment.d.ts
@@ -30,10 +30,8 @@ export declare function EnvironmentMap({ scene, background, map, ...config }: En
 export declare function EnvironmentCube({ background, scene, blur, backgroundBlurriness, backgroundIntensity, backgroundRotation, environmentIntensity, environmentRotation, ...rest }: EnvironmentProps): null;
 export declare function EnvironmentPortal({ children, near, far, resolution, frames, map, background, blur, backgroundBlurriness, backgroundIntensity, backgroundRotation, environmentIntensity, environmentRotation, scene, files, path, preset, extensions, }: EnvironmentProps): React.JSX.Element;
 declare global {
-    namespace JSX {
-        interface IntrinsicElements {
-            groundProjectedEnvImpl: Object3DNode<GroundProjectedEnvImpl, typeof GroundProjectedEnvImpl>;
-        }
-    }
+  interface JSX_IntrinsicElements {
+      groundProjectedEnvImpl: Object3DNode<GroundProjectedEnvImpl, typeof GroundProjectedEnvImpl>;
+  }
 }
 export declare function Environment(props: EnvironmentProps): React.JSX.Element;
diff --git a/core/Example.d.ts b/core/Example.d.ts
index c76c7566f32a2b3de1c249e54c8b2f6111aab596..ed898bd9c2eb846d142222c55d6493b0f99db454 100644
--- a/core/Example.d.ts
+++ b/core/Example.d.ts
@@ -5,7 +5,7 @@ export type ExampleProps = {
     color?: Color;
     debug?: boolean;
     bevelSize?: number;
-} & JSX.IntrinsicElements['group'];
+} & JSX_IntrinsicElements['group'];
 export type ExampleApi = {
     incr: (x?: number) => void;
     decr: (x?: number) => void;
diff --git a/core/Fisheye.d.ts b/core/Fisheye.d.ts
index 9f491ede8d59f0465a21d658f57d661aa0ffb21f..7fcf1d0a835ee773da9313f1f496ec5a1067f368 100644
--- a/core/Fisheye.d.ts
+++ b/core/Fisheye.d.ts
@@ -1,5 +1,5 @@
 import * as React from 'react';
-export type FisheyeProps = JSX.IntrinsicElements['mesh'] & {
+export type FisheyeProps = JSX_IntrinsicElements['mesh'] & {
     zoom?: number;
     segments?: number;
     resolution?: number;
diff --git a/core/Float.d.ts b/core/Float.d.ts
index 1233ff296f673cb1674ce2c8130b829622c8eef0..e2d2eb1a0385c6aa2ca5f0db345c5f3de4d9b563 100644
--- a/core/Float.d.ts
+++ b/core/Float.d.ts
@@ -1,7 +1,7 @@
 import * as React from 'react';
 import * as THREE from 'three';
 import { ForwardRefComponent } from '../helpers/ts-utils';
-export type FloatProps = JSX.IntrinsicElements['group'] & {
+export type FloatProps = JSX_IntrinsicElements['group'] & {
     enabled?: boolean;
     speed?: number;
     rotationIntensity?: number;
diff --git a/core/GizmoHelper.d.ts b/core/GizmoHelper.d.ts
index 4d416374a24030fcf6dcc1848b7a2f1ca253e2b5..47d2d13c3e89eaef9dbfceef06d16de6e4f0eaed 100644
--- a/core/GizmoHelper.d.ts
+++ b/core/GizmoHelper.d.ts
@@ -3,7 +3,7 @@ type GizmoHelperContext = {
     tweenCamera: (direction: Vector3) => void;
 };
 export declare const useGizmoContext: () => GizmoHelperContext;
-export type GizmoHelperProps = JSX.IntrinsicElements['group'] & {
+export type GizmoHelperProps = JSX_IntrinsicElements['group'] & {
     alignment?: 'top-left' | 'top-right' | 'bottom-right' | 'bottom-left' | 'bottom-center' | 'center-right' | 'center-left' | 'center-center' | 'top-center';
     margin?: [number, number];
     renderPriority?: number;
diff --git a/core/GizmoViewport.d.ts b/core/GizmoViewport.d.ts
index b2822a491074914ca99d921d1d261410d4adce7b..454d202246aeeefd33ec0f5f6e7dd5407478eaad 100644
--- a/core/GizmoViewport.d.ts
+++ b/core/GizmoViewport.d.ts
@@ -1,6 +1,6 @@
 import * as React from 'react';
 import { ThreeEvent } from '@react-three/fiber';
-type GizmoViewportProps = JSX.IntrinsicElements['group'] & {
+type GizmoViewportProps = JSX_IntrinsicElements['group'] & {
     axisColors?: [string, string, string];
     axisScale?: [number, number, number];
     labels?: [string, string, string];
diff --git a/core/Gltf.d.ts b/core/Gltf.d.ts
index 5155166faee506933b7bdb7d17eababb034b3b90..f31bc35c3f33f94f6910f3aee6661b1c724f549d 100644
--- a/core/Gltf.d.ts
+++ b/core/Gltf.d.ts
@@ -1,7 +1,7 @@
 import * as THREE from 'three';
 import { CloneProps } from './Clone';
 import { ForwardRefComponent } from '../helpers/ts-utils';
-type GltfProps = Omit<JSX.IntrinsicElements['group'], 'children'> & Omit<CloneProps, 'object'> & {
+type GltfProps = Omit<JSX_IntrinsicElements['group'], 'children'> & Omit<CloneProps, 'object'> & {
     src: string;
 };
 export declare const Gltf: ForwardRefComponent<GltfProps, THREE.Object3D>;
diff --git a/core/GradientTexture.d.ts b/core/GradientTexture.d.ts
index 470a56d95ef0b753af0aa095d86256f218eec115..f6bd46672e639297dd2caa664cde8cc638aeda3d 100644
--- a/core/GradientTexture.d.ts
+++ b/core/GradientTexture.d.ts
@@ -12,6 +12,6 @@ type Props = {
     type?: GradientType;
     innerCircleRadius?: number;
     outerCircleRadius?: string | number;
-} & JSX.IntrinsicElements['texture'];
+} & JSX_IntrinsicElements['texture'];
 export declare function GradientTexture({ stops, colors, size, width, type, innerCircleRadius, outerCircleRadius, ...props }: Props): React.JSX.Element;
 export {};
diff --git a/core/Grid.d.ts b/core/Grid.d.ts
index 88c1a3a272afffd2bdfd4e0dbb2b64e2de48a124..581d2e644462075f88f23a0a255601b24ba6a64e 100644
--- a/core/Grid.d.ts
+++ b/core/Grid.d.ts
@@ -18,10 +18,8 @@ export type GridProps = GridMaterialType & {
     args?: ConstructorParameters<typeof THREE.PlaneGeometry>;
 };
 declare global {
-    namespace JSX {
-        interface IntrinsicElements {
-            gridMaterial: JSX.IntrinsicElements['shaderMaterial'] & GridMaterialType;
-        }
-    }
+  interface JSX_IntrinsicElements {
+      gridMaterial: JSX_IntrinsicElements['shaderMaterial'] & GridMaterialType;
+  }
 }
-export declare const Grid: ForwardRefComponent<Omit<JSX.IntrinsicElements['mesh'], 'args'> & GridProps, THREE.Mesh>;
+export declare const Grid: ForwardRefComponent<Omit<JSX_IntrinsicElements['mesh'], 'args'> & GridProps, THREE.Mesh>;
diff --git a/core/Image.d.ts b/core/Image.d.ts
index 07e3b1ff4a369dbd26531fdb290144fd79609efa..ff1d0332401a7e51bed8f80a01a990545e13ce6f 100644
--- a/core/Image.d.ts
+++ b/core/Image.d.ts
@@ -1,7 +1,7 @@
 import * as THREE from 'three';
 import { Color } from '@react-three/fiber';
 import { ForwardRefComponent } from '../helpers/ts-utils';
-export type ImageProps = Omit<JSX.IntrinsicElements['mesh'], 'scale'> & {
+export type ImageProps = Omit<JSX_IntrinsicElements['mesh'], 'scale'> & {
     segments?: number;
     scale?: number | [number, number];
     color?: Color;
@@ -19,7 +19,7 @@ export type ImageProps = Omit<JSX.IntrinsicElements['mesh'], 'scale'> & {
     texture?: never;
     url: string;
 });
-type ImageMaterialType = JSX.IntrinsicElements['shaderMaterial'] & {
+type ImageMaterialType = JSX_IntrinsicElements['shaderMaterial'] & {
     scale?: number[];
     imageBounds?: number[];
     radius?: number;
@@ -30,11 +30,9 @@ type ImageMaterialType = JSX.IntrinsicElements['shaderMaterial'] & {
     grayscale?: number;
 };
 declare global {
-    namespace JSX {
-        interface IntrinsicElements {
-            imageMaterial: ImageMaterialType;
-        }
-    }
+  interface JSX_IntrinsicElements {
+      imageMaterial: ImageMaterialType;
+  }
 }
 export declare const Image: ForwardRefComponent<ImageProps, THREE.Mesh>;
 export {};
diff --git a/core/Instances.d.ts b/core/Instances.d.ts
index 674bcb43cd4e2e25573be6b67b9bdbb0ee9a0b3c..88a43002895998505eebfd2d96ef0b481d61b8a4 100644
--- a/core/Instances.d.ts
+++ b/core/Instances.d.ts
@@ -3,22 +3,20 @@ import * as React from 'react';
 import { ReactThreeFiber } from '@react-three/fiber';
 import { ForwardRefComponent } from '../helpers/ts-utils';
 declare global {
-    namespace JSX {
-        interface IntrinsicElements {
-            positionMesh: ReactThreeFiber.Object3DNode<PositionMesh, typeof PositionMesh>;
-        }
-    }
+  interface JSX_IntrinsicElements {
+      positionMesh: ReactThreeFiber.Object3DNode<PositionMesh, typeof PositionMesh>;
+  }
 }
 type Api = {
     getParent: () => React.MutableRefObject<InstancedMesh>;
     subscribe: <T>(ref: React.MutableRefObject<T>) => void;
 };
-export type InstancesProps = JSX.IntrinsicElements['instancedMesh'] & {
+export type InstancesProps = JSX_IntrinsicElements['instancedMesh'] & {
     range?: number;
     limit?: number;
     frames?: number;
 };
-export type InstanceProps = JSX.IntrinsicElements['positionMesh'] & {
+export type InstanceProps = JSX_IntrinsicElements['positionMesh'] & {
     context?: React.Context<Api>;
 };
 type InstancedMesh = Omit<THREE.InstancedMesh, 'instanceMatrix' | 'instanceColor'> & {
@@ -28,7 +26,7 @@ type InstancedMesh = Omit<THREE.InstancedMesh, 'instanceMatrix' | 'instanceColor
 declare class PositionMesh extends THREE.Group {
     color: THREE.Color;
     instance: React.MutableRefObject<THREE.InstancedMesh | undefined>;
-    instanceKey: React.MutableRefObject<JSX.IntrinsicElements['positionMesh'] | undefined>;
+    instanceKey: React.MutableRefObject<JSX_IntrinsicElements['positionMesh'] | undefined>;
     constructor();
     get geometry(): THREE.BufferGeometry | undefined;
     raycast(raycaster: THREE.Raycaster, intersects: THREE.Intersection[]): void;
diff --git a/core/Lightformer.d.ts b/core/Lightformer.d.ts
index 94b94f555965b057b40903b45c2afc412c88c030..8f1c5e2f886de3c05dc49644c6530bfda47eb7b1 100644
--- a/core/Lightformer.d.ts
+++ b/core/Lightformer.d.ts
@@ -1,7 +1,7 @@
 import { ReactThreeFiber } from '@react-three/fiber';
 import * as THREE from 'three';
 import { ForwardRefComponent } from '../helpers/ts-utils';
-export type LightProps = JSX.IntrinsicElements['mesh'] & {
+export type LightProps = JSX_IntrinsicElements['mesh'] & {
     args?: any[];
     map?: THREE.Texture;
     toneMapped?: boolean;
diff --git a/core/MarchingCubes.d.ts b/core/MarchingCubes.d.ts
index 99b771deef99520eabd7945eb04933b69fe2b260..b21bc14bc70642b6073ee4bf52eb9fb22ad276dd 100644
--- a/core/MarchingCubes.d.ts
+++ b/core/MarchingCubes.d.ts
@@ -7,18 +7,18 @@ export type MarchingCubesProps = {
     maxPolyCount?: number;
     enableUvs?: boolean;
     enableColors?: boolean;
-} & JSX.IntrinsicElements['group'];
+} & JSX_IntrinsicElements['group'];
 export declare const MarchingCubes: ForwardRefComponent<MarchingCubesProps, MarchingCubesImpl>;
 type MarchingCubeProps = {
     strength?: number;
     subtract?: number;
     color?: Color;
-} & JSX.IntrinsicElements['group'];
+} & JSX_IntrinsicElements['group'];
 export declare const MarchingCube: ForwardRefComponent<MarchingCubeProps, THREE.Group>;
 type MarchingPlaneProps = {
     planeType?: 'x' | 'y' | 'z';
     strength?: number;
     subtract?: number;
-} & JSX.IntrinsicElements['group'];
+} & JSX_IntrinsicElements['group'];
 export declare const MarchingPlane: ForwardRefComponent<MarchingPlaneProps, THREE.Group>;
 export {};
diff --git a/core/Mask.d.ts b/core/Mask.d.ts
index fe2c522da4b14ba26db0004c1de395f107102370..2461e415434d78a0d690b4ae5de42b3ee184429c 100644
--- a/core/Mask.d.ts
+++ b/core/Mask.d.ts
@@ -1,6 +1,6 @@
 import * as THREE from 'three';
 import { ForwardRefComponent } from '../helpers/ts-utils';
-type Props = Omit<JSX.IntrinsicElements['mesh'], 'id'> & {
+type Props = Omit<JSX_IntrinsicElements['mesh'], 'id'> & {
     id: number;
     colorWrite?: boolean;
     depthWrite?: boolean;
diff --git a/core/MeshDiscardMaterial.d.ts b/core/MeshDiscardMaterial.d.ts
index 11bb69fec911c3acea5200a76d0317c358dece2d..0631d928ed6a0ca4e65b6ab6a98704596a364b6b 100644
--- a/core/MeshDiscardMaterial.d.ts
+++ b/core/MeshDiscardMaterial.d.ts
@@ -2,10 +2,8 @@ import { ShaderMaterial } from 'three';
 import { ReactThreeFiber } from '@react-three/fiber';
 import { ForwardRefComponent } from '../helpers/ts-utils';
 declare global {
-    namespace JSX {
-        interface IntrinsicElements {
-            discardMaterialImpl: ReactThreeFiber.ShaderMaterialProps;
-        }
-    }
+  interface JSX_IntrinsicElements {
+      discardMaterialImpl: ReactThreeFiber.ShaderMaterialProps;
+  }
 }
-export declare const MeshDiscardMaterial: ForwardRefComponent<JSX.IntrinsicElements['shaderMaterial'], ShaderMaterial>;
+export declare const MeshDiscardMaterial: ForwardRefComponent<JSX_IntrinsicElements['shaderMaterial'], ShaderMaterial>;
diff --git a/core/MeshDistortMaterial.d.ts b/core/MeshDistortMaterial.d.ts
index 7e888c64907fae02d273ced46fe0f8b97e216d2f..c77addbc7d87e67e233e6f886cc2da7e10d43b88 100644
--- a/core/MeshDistortMaterial.d.ts
+++ b/core/MeshDistortMaterial.d.ts
@@ -1,6 +1,6 @@
 import { IUniform, MeshPhysicalMaterial, MeshPhysicalMaterialParameters } from 'three';
 import { ForwardRefComponent } from '../helpers/ts-utils';
-type DistortMaterialType = JSX.IntrinsicElements['meshPhysicalMaterial'] & {
+type DistortMaterialType = JSX_IntrinsicElements['meshPhysicalMaterial'] & {
     time?: number;
     distort?: number;
     radius?: number;
@@ -10,11 +10,9 @@ type Props = DistortMaterialType & {
     factor?: number;
 };
 declare global {
-    namespace JSX {
-        interface IntrinsicElements {
-            distortMaterialImpl: DistortMaterialType;
-        }
-    }
+  interface JSX_IntrinsicElements {
+      distortMaterialImpl: DistortMaterialType;
+  }
 }
 interface Uniform<T> {
     value: T;
diff --git a/core/MeshPortalMaterial.d.ts b/core/MeshPortalMaterial.d.ts
index f09b2105ae216bdcd56170388e0f780067823388..070d686d86ce2d33941b4b68c38109f51b16b7df 100644
--- a/core/MeshPortalMaterial.d.ts
+++ b/core/MeshPortalMaterial.d.ts
@@ -8,15 +8,13 @@ export type PortalMaterialType = {
     size?: number;
     sdf?: THREE.Texture;
     map?: THREE.Texture;
-} & JSX.IntrinsicElements['shaderMaterial'];
+} & JSX_IntrinsicElements['shaderMaterial'];
 declare global {
-    namespace JSX {
-        interface IntrinsicElements {
-            portalMaterialImpl: PortalMaterialType;
-        }
-    }
+  interface JSX_IntrinsicElements {
+      portalMaterialImpl: PortalMaterialType;
+  }
 }
-export type PortalProps = JSX.IntrinsicElements['shaderMaterial'] & {
+export type PortalProps = JSX_IntrinsicElements['shaderMaterial'] & {
     blend?: number;
     blur?: number;
     resolution?: number;
diff --git a/core/MeshReflectorMaterial.d.ts b/core/MeshReflectorMaterial.d.ts
index 827e0a3f5128d69b4df892e3d7388a708f92dcf7..94b6fd0f0189c1adea58065931ab684078e24382 100644
--- a/core/MeshReflectorMaterial.d.ts
+++ b/core/MeshReflectorMaterial.d.ts
@@ -1,7 +1,7 @@
 import { Texture } from 'three';
 import { MeshReflectorMaterialProps, MeshReflectorMaterial as MeshReflectorMaterialImpl } from '../materials/MeshReflectorMaterial';
 import { ForwardRefComponent } from '../helpers/ts-utils';
-type Props = JSX.IntrinsicElements['meshStandardMaterial'] & {
+type Props = JSX_IntrinsicElements['meshStandardMaterial'] & {
     resolution?: number;
     mixBlur?: number;
     mixStrength?: number;
@@ -17,11 +17,9 @@ type Props = JSX.IntrinsicElements['meshStandardMaterial'] & {
     reflectorOffset?: number;
 };
 declare global {
-    namespace JSX {
-        interface IntrinsicElements {
-            meshReflectorMaterialImpl: MeshReflectorMaterialProps;
-        }
-    }
+  interface JSX_IntrinsicElements {
+      meshReflectorMaterialImpl: MeshReflectorMaterialProps;
+  }
 }
 export declare const MeshReflectorMaterial: ForwardRefComponent<Props, MeshReflectorMaterialImpl>;
 export {};
diff --git a/core/MeshRefractionMaterial.d.ts b/core/MeshRefractionMaterial.d.ts
index 772908147aae1a8b20870ca3b0915d66b85ae7d8..091a8d6809402999d2ae12d1d6eb168a202e9a9a 100644
--- a/core/MeshRefractionMaterial.d.ts
+++ b/core/MeshRefractionMaterial.d.ts
@@ -3,13 +3,11 @@ import * as React from 'react';
 import { ReactThreeFiber } from '@react-three/fiber';
 import { MeshRefractionMaterial as MeshRefractionMaterial_ } from '../materials/MeshRefractionMaterial';
 declare global {
-    namespace JSX {
-        interface IntrinsicElements {
-            meshRefractionMaterial: typeof MeshRefractionMaterial_;
-        }
-    }
+  interface JSX_IntrinsicElements {
+      meshRefractionMaterial: typeof MeshRefractionMaterial_;
+  }
 }
-type MeshRefractionMaterialProps = JSX.IntrinsicElements['shaderMaterial'] & {
+type MeshRefractionMaterialProps = JSX_IntrinsicElements['shaderMaterial'] & {
     envMap: THREE.CubeTexture | THREE.Texture;
     bounces?: number;
     ior?: number;
diff --git a/core/MeshTransmissionMaterial.d.ts b/core/MeshTransmissionMaterial.d.ts
index 00ab0bc42c677e0a3c6cabf0688a0385c83d071d..79346ea4452dc75f7f04784dd6b05e8c4ba70c26 100644
--- a/core/MeshTransmissionMaterial.d.ts
+++ b/core/MeshTransmissionMaterial.d.ts
@@ -1,6 +1,6 @@
 import * as THREE from 'three';
 import { ForwardRefComponent } from '../helpers/ts-utils';
-type MeshTransmissionMaterialType = Omit<JSX.IntrinsicElements['meshPhysicalMaterial'], 'args' | 'roughness' | 'thickness' | 'transmission'> & {
+type MeshTransmissionMaterialType = Omit<JSX_IntrinsicElements['meshPhysicalMaterial'], 'args' | 'roughness' | 'thickness' | 'transmission'> & {
     transmission?: number;
     thickness?: number;
     roughness?: number;
@@ -25,11 +25,9 @@ type MeshTransmissionMaterialProps = Omit<MeshTransmissionMaterialType, 'args'>
     background?: THREE.Texture | THREE.Color;
 };
 declare global {
-    namespace JSX {
-        interface IntrinsicElements {
-            meshTransmissionMaterial: MeshTransmissionMaterialType;
-        }
-    }
+  interface JSX_IntrinsicElements {
+      meshTransmissionMaterial: MeshTransmissionMaterialType;
+  }
 }
-export declare const MeshTransmissionMaterial: ForwardRefComponent<MeshTransmissionMaterialProps, JSX.IntrinsicElements['meshTransmissionMaterial']>;
+export declare const MeshTransmissionMaterial: ForwardRefComponent<MeshTransmissionMaterialProps, JSX_IntrinsicElements['meshTransmissionMaterial']>;
 export {};
diff --git a/core/MeshWobbleMaterial.d.ts b/core/MeshWobbleMaterial.d.ts
index 1a7d823cf5ed7d3a196d47859286049872f46eb3..498bec71f506efc7442a1afbff03c8ae1014e1df 100644
--- a/core/MeshWobbleMaterial.d.ts
+++ b/core/MeshWobbleMaterial.d.ts
@@ -1,6 +1,6 @@
 import { IUniform, MeshStandardMaterial, MeshStandardMaterialParameters } from 'three';
 import { ForwardRefComponent } from '../helpers/ts-utils';
-type WobbleMaterialType = JSX.IntrinsicElements['meshStandardMaterial'] & {
+type WobbleMaterialType = JSX_IntrinsicElements['meshStandardMaterial'] & {
     time?: number;
     factor?: number;
     speed?: number;
@@ -10,11 +10,9 @@ type Props = WobbleMaterialType & {
     factor?: number;
 };
 declare global {
-    namespace JSX {
-        interface IntrinsicElements {
-            wobbleMaterialImpl: WobbleMaterialType;
-        }
-    }
+  interface JSX_IntrinsicElements {
+      wobbleMaterialImpl: WobbleMaterialType;
+  }
 }
 interface Uniform<T> {
     value: T;
diff --git a/core/MotionPathControls.d.ts b/core/MotionPathControls.d.ts
index b13b70cf331b46311eafee9b267c7bd67dc77145..a36d779a3f2b8d26f3265826f504ab1939f99b25 100644
--- a/core/MotionPathControls.d.ts
+++ b/core/MotionPathControls.d.ts
@@ -1,6 +1,6 @@
 import * as THREE from 'three';
 import * as React from 'react';
-type MotionPathProps = JSX.IntrinsicElements['group'] & {
+type MotionPathProps = JSX_IntrinsicElements['group'] & {
     curves?: THREE.Curve<THREE.Vector3>[];
     debug?: boolean;
     object?: React.MutableRefObject<THREE.Object3D>;
diff --git a/core/OrthographicCamera.d.ts b/core/OrthographicCamera.d.ts
index bd0a3fb16cebc694ce02ed8a8d504747d1cbeff0..bdeb52d3cf7eb985e4720a974c567ce65e7915bb 100644
--- a/core/OrthographicCamera.d.ts
+++ b/core/OrthographicCamera.d.ts
@@ -2,7 +2,7 @@ import * as THREE from 'three';
 import * as React from 'react';
 import { OrthographicCamera as OrthographicCameraImpl } from 'three';
 import { ForwardRefComponent } from '../helpers/ts-utils';
-type Props = Omit<JSX.IntrinsicElements['orthographicCamera'], 'children'> & {
+type Props = Omit<JSX_IntrinsicElements['orthographicCamera'], 'children'> & {
     makeDefault?: boolean;
     manual?: boolean;
     children?: React.ReactNode | ((texture: THREE.Texture) => React.ReactNode);
diff --git a/core/Outlines.d.ts b/core/Outlines.d.ts
index 68aabb966d395705a1ccc7e5fa947cc372b00349..b1d6cb9bde6467e80176e7d252ec248415ee63b9 100644
--- a/core/Outlines.d.ts
+++ b/core/Outlines.d.ts
@@ -1,6 +1,6 @@
 import * as React from 'react';
 import { ReactThreeFiber } from '@react-three/fiber';
-type OutlinesProps = JSX.IntrinsicElements['group'] & {
+type OutlinesProps = JSX_IntrinsicElements['group'] & {
     color?: ReactThreeFiber.Color;
     screenspace?: boolean;
     opacity?: number;
diff --git a/core/PerspectiveCamera.d.ts b/core/PerspectiveCamera.d.ts
index ae56a29be113ddbff7b03ed69275042fd9165263..17ba9df717123578759406b78f186227d414a379 100644
--- a/core/PerspectiveCamera.d.ts
+++ b/core/PerspectiveCamera.d.ts
@@ -2,7 +2,7 @@ import * as THREE from 'three';
 import * as React from 'react';
 import { PerspectiveCamera as PerspectiveCameraImpl } from 'three';
 import { ForwardRefComponent } from '../helpers/ts-utils';
-type Props = Omit<JSX.IntrinsicElements['perspectiveCamera'], 'children'> & {
+type Props = Omit<JSX_IntrinsicElements['perspectiveCamera'], 'children'> & {
     makeDefault?: boolean;
     manual?: boolean;
     children?: React.ReactNode | ((texture: THREE.Texture) => React.ReactNode);
diff --git a/core/PointMaterial.d.ts b/core/PointMaterial.d.ts
index 04fe55256edca9d5304719bd7275ee52f3deb9f1..e68adc0a5010b64b9dcd266dc0747d9e1b310520 100644
--- a/core/PointMaterial.d.ts
+++ b/core/PointMaterial.d.ts
@@ -1,13 +1,11 @@
 import * as THREE from 'three';
 import { PrimitiveProps } from '@react-three/fiber';
 import { ForwardRefComponent } from '../helpers/ts-utils';
-type PointMaterialType = JSX.IntrinsicElements['pointsMaterial'];
+type PointMaterialType = JSX_IntrinsicElements['pointsMaterial'];
 declare global {
-    namespace JSX {
-        interface IntrinsicElements {
-            pointMaterialImpl: PointMaterialType;
-        }
-    }
+  interface JSX_IntrinsicElements {
+      pointMaterialImpl: PointMaterialType;
+  }
 }
 export declare class PointMaterialImpl extends THREE.PointsMaterial {
     constructor(props: any);
diff --git a/core/Points.d.ts b/core/Points.d.ts
index 339f5aca61c10996d98b79df1dcc16f26cd0e5c7..aa5f3f6cd433389975cb3238f40f36e5998de4ca 100644
--- a/core/Points.d.ts
+++ b/core/Points.d.ts
@@ -3,13 +3,11 @@ import * as React from 'react';
 import { ReactThreeFiber } from '@react-three/fiber';
 import { ForwardRefComponent } from '../helpers/ts-utils';
 declare global {
-    namespace JSX {
-        interface IntrinsicElements {
-            positionPoint: ReactThreeFiber.Object3DNode<PositionPoint, typeof PositionPoint>;
-        }
-    }
+  interface JSX_IntrinsicElements {
+      positionPoint: ReactThreeFiber.Object3DNode<PositionPoint, typeof PositionPoint>;
+  }
 }
-type PointsInstancesProps = JSX.IntrinsicElements['points'] & {
+type PointsInstancesProps = JSX_IntrinsicElements['points'] & {
     range?: number;
     limit?: number;
 };
@@ -17,13 +15,13 @@ export declare class PositionPoint extends THREE.Group {
     size: number;
     color: THREE.Color;
     instance: React.MutableRefObject<THREE.Points | undefined>;
-    instanceKey: React.MutableRefObject<JSX.IntrinsicElements['positionPoint'] | undefined>;
+    instanceKey: React.MutableRefObject<JSX_IntrinsicElements['positionPoint'] | undefined>;
     constructor();
     get geometry(): THREE.BufferGeometry | undefined;
     raycast(raycaster: THREE.Raycaster, intersects: THREE.Intersection[]): void;
 }
-export declare const Point: ForwardRefComponent<JSX.IntrinsicElements['positionPoint'], PositionPoint>;
-type PointsBuffersProps = JSX.IntrinsicElements['points'] & {
+export declare const Point: ForwardRefComponent<JSX_IntrinsicElements['positionPoint'], PositionPoint>;
+type PointsBuffersProps = JSX_IntrinsicElements['points'] & {
     positions: Float32Array;
     colors?: Float32Array;
     sizes?: Float32Array;
diff --git a/core/PositionalAudio.d.ts b/core/PositionalAudio.d.ts
index 82cd84a09b7cd9d6912314434db66a1c7a82f4d3..75803fa20cf69fb03ede3cf10d7d304493d5ffef 100644
--- a/core/PositionalAudio.d.ts
+++ b/core/PositionalAudio.d.ts
@@ -1,6 +1,6 @@
 import { PositionalAudio as PositionalAudioImpl } from 'three';
 import { ForwardRefComponent } from '../helpers/ts-utils';
-type Props = JSX.IntrinsicElements['positionalAudio'] & {
+type Props = JSX_IntrinsicElements['positionalAudio'] & {
     url: string;
     distance?: number;
     loop?: boolean;
diff --git a/core/Reflector.d.ts b/core/Reflector.d.ts
index d94c276238c9d1e59ba1c195bca2b3a822ddea1b..d0eecbd7ba83a0fad967499b937c8230dc654b88 100644
--- a/core/Reflector.d.ts
+++ b/core/Reflector.d.ts
@@ -2,7 +2,7 @@ import * as React from 'react';
 import { Mesh, Texture } from 'three';
 import { MeshReflectorMaterialProps } from '../materials/MeshReflectorMaterial';
 import { ForwardRefComponent } from '../helpers/ts-utils';
-export type ReflectorProps = Omit<JSX.IntrinsicElements['mesh'], 'args' | 'children'> & Pick<JSX.IntrinsicElements['planeGeometry'], 'args'> & {
+export type ReflectorProps = Omit<JSX_IntrinsicElements['mesh'], 'args' | 'children'> & Pick<JSX_IntrinsicElements['planeGeometry'], 'args'> & {
     resolution?: number;
     mixBlur?: number;
     mixStrength?: number;
@@ -17,14 +17,12 @@ export type ReflectorProps = Omit<JSX.IntrinsicElements['mesh'], 'args' | 'child
     distortion?: number;
     mixContrast?: number;
     children?: {
-        (Component: React.ElementType<JSX.IntrinsicElements['meshReflectorMaterial']>, ComponentProps: MeshReflectorMaterialProps): JSX.Element | null;
+        (Component: React.ElementType<JSX_IntrinsicElements['meshReflectorMaterial']>, ComponentProps: MeshReflectorMaterialProps): JSX.Element | null;
     };
 };
 declare global {
-    namespace JSX {
-        interface IntrinsicElements {
-            meshReflectorMaterial: MeshReflectorMaterialProps;
-        }
-    }
+  interface JSX_IntrinsicElements {
+      meshReflectorMaterial: MeshReflectorMaterialProps;
+  }
 }
 export declare const Reflector: ForwardRefComponent<ReflectorProps, Mesh>;
diff --git a/core/RenderCubeTexture.d.ts b/core/RenderCubeTexture.d.ts
index 5f341a813b09feebe832c1c0cae1682a8812d8d2..f2b6e28a23ad0a0ed00ef5d87d9f915b66cf3114 100644
--- a/core/RenderCubeTexture.d.ts
+++ b/core/RenderCubeTexture.d.ts
@@ -2,7 +2,7 @@ import * as THREE from 'three';
 import * as React from 'react';
 import { ComputeFunction, ReactThreeFiber } from '@react-three/fiber';
 import { ForwardRefComponent } from '../helpers/ts-utils';
-export type RenderCubeTextureProps = Omit<JSX.IntrinsicElements['texture'], 'rotation'> & {
+export type RenderCubeTextureProps = Omit<JSX_IntrinsicElements['texture'], 'rotation'> & {
     stencilBuffer?: boolean;
     depthBuffer?: boolean;
     generateMipmaps?: boolean;
diff --git a/core/RenderTexture.d.ts b/core/RenderTexture.d.ts
index c9f356e73440fd6b93df57ad743129d077af3416..91e3a93b428bec2c3841a0e298a58625d0301126 100644
--- a/core/RenderTexture.d.ts
+++ b/core/RenderTexture.d.ts
@@ -1,7 +1,7 @@
 import * as THREE from 'three';
 import * as React from 'react';
 import { ForwardRefComponent } from '../helpers/ts-utils';
-type Props = JSX.IntrinsicElements['texture'] & {
+type Props = JSX_IntrinsicElements['texture'] & {
     width?: number;
     height?: number;
     samples?: number;
diff --git a/core/Resize.d.ts b/core/Resize.d.ts
index dc01883586877be4229492b911096a5671f47013..e91b758a085231bed8897f316f4f6ae5bce1bdc2 100644
--- a/core/Resize.d.ts
+++ b/core/Resize.d.ts
@@ -1,6 +1,6 @@
 import * as THREE from 'three';
 import * as React from 'react';
-export type ResizeProps = JSX.IntrinsicElements['group'] & {
+export type ResizeProps = JSX_IntrinsicElements['group'] & {
     width?: boolean;
     height?: boolean;
     depth?: boolean;
diff --git a/core/RoundedBox.d.ts b/core/RoundedBox.d.ts
index 4a84b7e339d69ab810564e1946ca927941672e07..f3682ef1b665d3e2627c699d850a807eb4106517 100644
--- a/core/RoundedBox.d.ts
+++ b/core/RoundedBox.d.ts
@@ -7,6 +7,6 @@ type Props = {
     bevelSegments?: number;
     steps?: number;
     creaseAngle?: number;
-} & Omit<JSX.IntrinsicElements['mesh'], 'args'>;
+} & Omit<JSX_IntrinsicElements['mesh'], 'args'>;
 export declare const RoundedBox: ForwardRefComponent<Props, Mesh>;
 export {};
diff --git a/core/ScreenQuad.d.ts b/core/ScreenQuad.d.ts
index 15307c86906abc0a4c6c2a09e74fb66dbfcfa740..ae956214d5b4ecc6b652467e58d41d92d4959696 100644
--- a/core/ScreenQuad.d.ts
+++ b/core/ScreenQuad.d.ts
@@ -1,5 +1,5 @@
 import * as THREE from 'three';
 import { ForwardRefComponent } from '../helpers/ts-utils';
-type Props = Omit<JSX.IntrinsicElements['mesh'], 'args'>;
+type Props = Omit<JSX_IntrinsicElements['mesh'], 'args'>;
 export declare const ScreenQuad: ForwardRefComponent<Props, THREE.Mesh>;
 export {};
diff --git a/core/ScreenSpace.d.ts b/core/ScreenSpace.d.ts
index 254a87357786e5dbbaaebb8bfdd1d04efb6719ea..cc890b6eabe1af7423d541f6917693cce0e1b560 100644
--- a/core/ScreenSpace.d.ts
+++ b/core/ScreenSpace.d.ts
@@ -2,5 +2,5 @@ import { Group } from 'three';
 import { ForwardRefComponent } from '../helpers/ts-utils';
 export type ScreenSpaceProps = {
     depth?: number;
-} & JSX.IntrinsicElements['group'];
+} & JSX_IntrinsicElements['group'];
 export declare const ScreenSpace: ForwardRefComponent<ScreenSpaceProps, Group>;
diff --git a/core/Segments.d.ts b/core/Segments.d.ts
index fc709b11578c23da462627e508121c708418c306..a3bf6faac34dc103ffb2800cf1d62db98c78b49c 100644
--- a/core/Segments.d.ts
+++ b/core/Segments.d.ts
@@ -8,18 +8,16 @@ type SegmentsProps = LineMaterialParameters & {
     lineWidth?: number;
     children: React.ReactNode;
 };
-type SegmentProps = Omit<JSX.IntrinsicElements['segmentObject'], 'start' | 'end' | 'color'> & {
+type SegmentProps = Omit<JSX_IntrinsicElements['segmentObject'], 'start' | 'end' | 'color'> & {
     start: ReactThreeFiber.Vector3;
     end: ReactThreeFiber.Vector3;
     color?: ReactThreeFiber.Color;
 };
 declare const Segments: ForwardRefComponent<SegmentsProps, Line2>;
 declare global {
-    namespace JSX {
-        interface IntrinsicElements {
-            segmentObject: ReactThreeFiber.Object3DNode<SegmentObject, typeof SegmentObject>;
-        }
-    }
+  interface JSX_IntrinsicElements {
+      segmentObject: ReactThreeFiber.Object3DNode<SegmentObject, typeof SegmentObject>;
+  }
 }
 export declare class SegmentObject {
     color: THREE.Color;
diff --git a/core/Shadow.d.ts b/core/Shadow.d.ts
index 03688a5b3b4b6389b77d9c58a9cadbbaedb9874f..5aa6769c9e9c52225beca7a54b73d86e1e8aee59 100644
--- a/core/Shadow.d.ts
+++ b/core/Shadow.d.ts
@@ -1,6 +1,6 @@
 import { Mesh, Color, type PlaneGeometry, type MeshBasicMaterial } from 'three';
 import { ForwardRefComponent } from '../helpers/ts-utils';
-type Props = JSX.IntrinsicElements['mesh'] & {
+type Props = JSX_IntrinsicElements['mesh'] & {
     colorStop?: number;
     fog?: boolean;
     color?: Color | number | string;
diff --git a/core/Sparkles.d.ts b/core/Sparkles.d.ts
index bfa0337d3659ff22ce3aa4b67831f8e167fb37da..375f7aefffa56d7ee0bad9e10702d589da2fa03b 100644
--- a/core/Sparkles.d.ts
+++ b/core/Sparkles.d.ts
@@ -11,11 +11,9 @@ interface Props {
     noise?: number | [number, number, number] | THREE.Vector3 | Float32Array;
 }
 declare global {
-    namespace JSX {
-        interface IntrinsicElements {
-            sparklesImplMaterial: Node<any, any>;
-        }
-    }
+  interface JSX_IntrinsicElements {
+      sparklesImplMaterial: Node<any, any>;
+  }
 }
 export declare const Sparkles: ForwardRefComponent<Props & PointsProps, THREE.Points>;
 export {};
diff --git a/core/Splat.d.ts b/core/Splat.d.ts
index df1b65de82c8828335a5240159069e624a7d294a..a2cff68114ce6911a640dfa17a4e8d0181ad3f3d 100644
--- a/core/Splat.d.ts
+++ b/core/Splat.d.ts
@@ -41,11 +41,9 @@ export type SharedState = {
     onProgress?: (event: ProgressEvent) => void;
 };
 declare global {
-    namespace JSX {
-        interface IntrinsicElements {
-            splatMaterial: SplatMaterialType & JSX.IntrinsicElements['shaderMaterial'];
-        }
-    }
+  interface JSX_IntrinsicElements {
+      splatMaterial: SplatMaterialType & JSX_IntrinsicElements['shaderMaterial'];
+  }
 }
 type SplatProps = {
     src: string;
@@ -53,6 +51,6 @@ type SplatProps = {
     alphaTest?: number;
     alphaHash?: boolean;
     chunkSize?: number;
-} & JSX.IntrinsicElements['mesh'];
+} & JSX_IntrinsicElements['mesh'];
 export declare function Splat({ src, toneMapped, alphaTest, alphaHash, chunkSize, ...props }: SplatProps): React.JSX.Element;
 export {};
diff --git a/core/SpotLight.d.ts b/core/SpotLight.d.ts
index 781eb9c8fc8b1651e073f3604e7395e9efbf34cb..46354832e450d1714e646636cea457c12a2e1c8e 100644
--- a/core/SpotLight.d.ts
+++ b/core/SpotLight.d.ts
@@ -1,7 +1,7 @@
 import * as React from 'react';
 import { DepthTexture, SpotLight as SpotLightImpl, Texture } from 'three';
 import { ForwardRefComponent } from '../helpers/ts-utils';
-type SpotLightProps = JSX.IntrinsicElements['spotLight'] & {
+type SpotLightProps = JSX_IntrinsicElements['spotLight'] & {
     depthBuffer?: DepthTexture;
     attenuation?: number;
     anglePower?: number;
diff --git a/core/SpriteAnimator.d.ts b/core/SpriteAnimator.d.ts
index 199b177d9e32f7588c0da324d51547f86982e778..76baa737c82d53d0afea6461576b3d19e3478a5d 100644
--- a/core/SpriteAnimator.d.ts
+++ b/core/SpriteAnimator.d.ts
@@ -26,7 +26,7 @@ export type SpriteAnimatorProps = {
     maxItems?: number;
     instanceItems?: any[];
     spriteDataset?: any;
-} & JSX.IntrinsicElements['group'];
+} & JSX_IntrinsicElements['group'];
 type SpriteAnimatorState = {
     current: number | undefined;
     offset: number | undefined;
diff --git a/core/Stage.d.ts b/core/Stage.d.ts
index 21cbeb3446cbdb48da4c4111c77592f370db54b5..1488daf90afb739cb7509cf0f5c9eab52b48f719 100644
--- a/core/Stage.d.ts
+++ b/core/Stage.d.ts
@@ -22,5 +22,5 @@ type StageProps = {
     intensity?: number;
     center?: Partial<CenterProps>;
 };
-export declare function Stage({ children, center, adjustCamera, intensity, shadows, environment, preset, ...props }: JSX.IntrinsicElements['group'] & StageProps): React.JSX.Element;
+export declare function Stage({ children, center, adjustCamera, intensity, shadows, environment, preset, ...props }: JSX_IntrinsicElements['group'] & StageProps): React.JSX.Element;
 export {};
diff --git a/core/Stars.d.ts b/core/Stars.d.ts
index b682cfced2d5365300cbc7aac3c607a468f89c2a..6da20c17d48c9c22e53ddf2d3d8c0ea954538481 100644
--- a/core/Stars.d.ts
+++ b/core/Stars.d.ts
@@ -14,11 +14,9 @@ declare class StarfieldMaterial extends ShaderMaterial {
     constructor();
 }
 declare global {
-    namespace JSX {
-        interface IntrinsicElements {
-            starfieldMaterial: ReactThreeFiber.MaterialNode<StarfieldMaterial, []>;
-        }
-    }
+  interface JSX_IntrinsicElements {
+      starfieldMaterial: ReactThreeFiber.MaterialNode<StarfieldMaterial, []>;
+  }
 }
 export declare const Stars: ForwardRefComponent<Props, Points>;
 export {};
diff --git a/core/Text.d.ts b/core/Text.d.ts
index 137a46ffead1b8f8402e1b47558708121d8602c6..4c77b18ca095c6c408f46261f28766619793dc55 100644
--- a/core/Text.d.ts
+++ b/core/Text.d.ts
@@ -1,7 +1,7 @@
 import * as React from 'react';
 import { ReactThreeFiber } from '@react-three/fiber';
 import { ForwardRefComponent } from '../helpers/ts-utils';
-type Props = JSX.IntrinsicElements['mesh'] & {
+type Props = JSX_IntrinsicElements['mesh'] & {
     children: React.ReactNode;
     characters?: string;
     color?: ReactThreeFiber.Color;
diff --git a/core/Text3D.d.ts b/core/Text3D.d.ts
index e2195fca3234a04ce88f4a4d3d17375392185362..a80fe4bd375580adec0507dacb062473f2bbbf2c 100644
--- a/core/Text3D.d.ts
+++ b/core/Text3D.d.ts
@@ -5,11 +5,9 @@ import { TextGeometryParameters } from 'three-stdlib';
 import { FontData } from './useFont';
 import { ForwardRefComponent } from '../helpers/ts-utils';
 declare global {
-    namespace JSX {
-        interface IntrinsicElements {
-            renamedTextGeometry: Node<any, any>;
-        }
-    }
+  interface JSX_IntrinsicElements {
+      renamedTextGeometry: Node<any, any>;
+  }
 }
 type Text3DProps = {
     font: FontData | string;
diff --git a/core/TransformControls.d.ts b/core/TransformControls.d.ts
index fdba2fb121105a885ca705960acb2f3c8c5c2bdf..2e3b360a312e9432619e7f86df2f734cf1025743 100644
--- a/core/TransformControls.d.ts
+++ b/core/TransformControls.d.ts
@@ -3,7 +3,7 @@ import * as React from 'react';
 import * as THREE from 'three';
 import { TransformControls as TransformControlsImpl } from 'three-stdlib';
 import { ForwardRefComponent } from '../helpers/ts-utils';
-export type TransformControlsProps = ReactThreeFiber.Object3DNode<TransformControlsImpl, typeof TransformControlsImpl> & JSX.IntrinsicElements['group'] & {
+export type TransformControlsProps = ReactThreeFiber.Object3DNode<TransformControlsImpl, typeof TransformControlsImpl> & JSX_IntrinsicElements['group'] & {
     object?: THREE.Object3D | React.MutableRefObject<THREE.Object3D>;
     enabled?: boolean;
     axis?: string | null;
diff --git a/core/Wireframe.d.ts b/core/Wireframe.d.ts
index 3aecbe04ae526b163764be7f9da0d3703194c454..84261c8e55c0ae143be8f15b0544c7e9f59c7099 100644
--- a/core/Wireframe.d.ts
+++ b/core/Wireframe.d.ts
@@ -3,11 +3,9 @@ import * as THREE from 'three';
 import { MaterialNode } from '@react-three/fiber';
 import { WireframeMaterialProps } from '../materials/WireframeMaterial';
 declare global {
-    namespace JSX {
-        interface IntrinsicElements {
-            meshWireframeMaterial: MaterialNode<THREE.ShaderMaterial, WireframeMaterialProps>;
-        }
-    }
+  interface JSX_IntrinsicElements {
+      meshWireframeMaterial: MaterialNode<THREE.ShaderMaterial, WireframeMaterialProps>;
+  }
 }
 interface WireframeProps {
     geometry?: THREE.BufferGeometry | React.RefObject<THREE.BufferGeometry>;
diff --git a/core/shapes.d.ts b/core/shapes.d.ts
index 6f390c7558f2029930b83082222d803cf71bd906..5800ab0370b563e6086f580f41936f16c9b9cbcf 100644
--- a/core/shapes.d.ts
+++ b/core/shapes.d.ts
@@ -1,7 +1,7 @@
 import * as THREE from 'three';
 import { ForwardRefComponent } from '../helpers/ts-utils';
 export type Args<T> = T extends new (...args: any) => any ? ConstructorParameters<T> : T;
-export type ShapeProps<T> = Omit<JSX.IntrinsicElements['mesh'], 'args'> & {
+export type ShapeProps<T> = Omit<JSX_IntrinsicElements['mesh'], 'args'> & {
     args?: Args<T>;
 };
 export declare const Box: ForwardRefComponent<ShapeProps<typeof THREE.BoxGeometry>, THREE.Mesh<THREE.BufferGeometry, THREE.Material | THREE.Material[]>>;
diff --git a/core/useBVH.d.ts b/core/useBVH.d.ts
index 768bea7138e75fde653ad5dc485e4641e80116f5..7e640c0934ad09c62d65e83af0f81e85ff4d7342 100644
--- a/core/useBVH.d.ts
+++ b/core/useBVH.d.ts
@@ -10,7 +10,7 @@ export interface BVHOptions {
     maxLeafTris?: number;
     indirect?: boolean;
 }
-export type BvhProps = BVHOptions & JSX.IntrinsicElements['group'] & {
+export type BvhProps = BVHOptions & JSX_IntrinsicElements['group'] & {
     enabled?: boolean;
     firstHitOnly?: boolean;
 };
diff --git a/materials/MeshReflectorMaterial.d.ts b/materials/MeshReflectorMaterial.d.ts
index e906d4c68681708d640d4927990b2a599e7c2aca..8669bb476b19bb3cafb3c3a88f3d2fc6a0885a7b 100644
--- a/materials/MeshReflectorMaterial.d.ts
+++ b/materials/MeshReflectorMaterial.d.ts
@@ -63,4 +63,4 @@ export type MeshReflectorMaterialProps = {
     depthToBlurRatioBias: number;
     distortion: number;
     mixContrast: number;
-} & JSX.IntrinsicElements['meshStandardMaterial'];
+} & JSX_IntrinsicElements['meshStandardMaterial'];
diff --git a/web/Facemesh.d.ts b/web/Facemesh.d.ts
index 0ed818b866e6a28e3933806143e758fd028da513..b188368536552711ae297de39579166cf99f1829 100644
--- a/web/Facemesh.d.ts
+++ b/web/Facemesh.d.ts
@@ -17,7 +17,7 @@ export type FacemeshProps = {
     eyes?: boolean;
     eyesAsOrigin?: boolean;
     debug?: boolean;
-} & Omit<JSX.IntrinsicElements['group'], 'ref'>;
+} & Omit<JSX_IntrinsicElements['group'], 'ref'>;
 export type FacemeshApi = {
     meshRef: React.RefObject<THREE.Mesh>;
     outerRef: React.RefObject<THREE.Group>;
diff --git a/web/Select.d.ts b/web/Select.d.ts
index 108185e1f035fac035757931435d2860ada6be80..db938d6c00dbb2742a2b469d4f97ce70dadca26a 100644
--- a/web/Select.d.ts
+++ b/web/Select.d.ts
@@ -1,6 +1,6 @@
 import * as React from 'react';
 import * as THREE from 'three';
-type Props = JSX.IntrinsicElements['group'] & {
+type Props = JSX_IntrinsicElements['group'] & {
     multiple?: boolean;
     box?: boolean;
     border?: string;
