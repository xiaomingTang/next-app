// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated-prisma-client"
}

datasource db {
  provider = "mysql"
  url      = env("MYSQLDB_URI")
}

enum Role {
  ADMIN
  USER
}

enum BlogType {
  // 已发布
  PUBLISHED
  // 未发布(即 草稿)
  UNPUBLISHED
}

model User {
  id            Int             @id @default(autoincrement())
  name          String
  email         String          @unique
  password      String
  role          Role            @default(USER)
  shortUrls     ShortUrl[]
  blogs         Blog[]
  tags          Tag[]
  uploads       Upload[]
  homepageLinks HomepageLinks[]
  projects      Project[]
  ttsTasks      TtsTask[]
}

model QrcodeLoginToken {
  token     String   @id
  userId    Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ShortUrl {
  hash        String   @id
  description String   @default("")
  url         String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  timeout     DateTime
  limit       Int      @default(1234567890)
  password    String   @default("")
  creatorId   Int
  creator     User     @relation(fields: [creatorId], references: [id])
}

model Tag {
  hash        String   @id
  name        String   @unique
  description String   @default("")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  blogs       Blog[]
  creatorId   Int
  creator     User     @relation(fields: [creatorId], references: [id])
}

model Blog {
  hash        String   @id
  type        BlogType
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  title       String   @default("") @db.VarChar(1000)
  content     String   @db.Text()
  description String   @default("") @db.VarChar(1000)
  tags        Tag[]
  creatorId   Int
  creator     User     @relation(fields: [creatorId], references: [id])

  @@fulltext([title, description, content])
}

model Upload {
  id        Int      @id @default(autoincrement())
  key       String
  url       String   @db.VarChar(1000)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  creatorId Int
  creator   User     @relation(fields: [creatorId], references: [id])
}

enum FriendsLinkStatus {
  ACCEPTED
  REJECTED
  PENDING
}

model FriendsLink {
  hash        String            @id
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  status      FriendsLinkStatus
  // 站点名称
  name        String            @default("") @db.VarChar(100)
  email       String            @default("") @db.VarChar(200)
  // 必填
  url         String            @default("") @db.VarChar(200)
  description String            @default("") @db.VarChar(200)
  image       String            @default("") @db.VarChar(400)
}

model Comment {
  hash      String   @id
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  email     String   @default("")
  name      String   @default("")
  content   String   @db.Text()
}

model CustomMP3 {
  hash      String   @id
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  mp3       String   @db.VarChar(200)
  lrc       String   @default("") @db.VarChar(200)
}

model HomepageLinks {
  hash        String   @id
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  enabled     Boolean  @default(true)
  name        String
  url         String
  image       String   @default("")
  description String   @default("")
  creatorId   Int
  creator     User     @relation(fields: [creatorId], references: [id])
}

enum ProjectType {
  DIR
  TEXT
  IMAGE
  VIDEO
  AUDIO
  UNKNOWN
}

model Project {
  hash       String      @id
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  creatorId  Int
  creator    User        @relation(fields: [creatorId], references: [id])
  name       String
  type       ProjectType
  rootHash   String
  // 根元素 parentHash 是自身
  parentHash String
  // 文本类项目此字段存储的是文本内容，其他类型项目此字段存储的是文件的 url
  content    String?     @db.Text()
  deleted    Boolean     @default(false)
}

enum TtsStatus {
  PENDING
  PROCESSING
  SUCCESS
  FAILED
}

model TtsTask {
  hash      String    @id
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  status    TtsStatus
  deviceId  String
  // JSON 字符串，存储 TTS 任务的参数
  options   String
  error     String?   @db.Text()
  userId    Int?
  user      User?     @relation(fields: [userId], references: [id])
}
